import asyncio
from typing import List
from datetime import datetime

from app.services.cache_service import cache_service
from app.services.photo_service import photo_service
from app.services.price_service import price_service
from app.models.tour import DirectionInfo
from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class DirectionsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ –∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    
    def __init__(self):
        self.cache = cache_service
        self.photo_service = photo_service
        self.price_service = price_service
    
    async def get_directions_with_prices(self) -> List[DirectionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π"""
        cache_key = "directions_with_prices_and_photos"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_directions = await self.cache.get(cache_key)
        if cached_directions:
            logger.info(f"üì∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞")
            return [DirectionInfo(**item) for item in cached_directions]
        
        logger.info("üîÑ –ö—ç—à –ø—É—Å—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π")
        return await self._generate_directions_with_hotel_photos()

    async def _generate_directions_with_hotel_photos(self) -> List[DirectionInfo]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ü–µ–Ω–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π"""
        logger.info(f"üè® –ù–ê–ß–ò–ù–ê–ï–ú –ì–ï–ù–ï–†–ê–¶–ò–Æ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô –° –§–û–¢–û –û–¢–ï–õ–ï–ô")
        
        try:
            directions = []
            
            # –ë–µ—Ä–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
            popular_countries = settings.POPULAR_COUNTRIES[:6]  # –ü–µ—Ä–≤—ã–µ 6 —Å—Ç—Ä–∞–Ω
            
            logger.info(f"üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—ã: {popular_countries}")
            
            for country_code in popular_countries:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                    country_name = self._get_country_name(country_code)
                    logger.info(f"üåç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {country_name} (–∫–æ–¥: {country_code})")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    hotel_photo_task = self.photo_service.get_country_hotel_photo_fast(country_code, country_name)
                    min_price_task = self.price_service.get_country_min_price(country_code, country_name)
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
                    hotel_photo, min_price = await asyncio.gather(
                        hotel_photo_task, 
                        min_price_task,
                        return_exceptions=True
                    )
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    if isinstance(hotel_photo, Exception):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è {country_name}: {hotel_photo}")
                        hotel_photo = None
                    
                    if isinstance(min_price, Exception):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {country_name}: {min_price}")
                        min_price = 50000.0
                    
                    # Fallback –¥–ª—è —Ñ–æ—Ç–æ
                    if not hotel_photo:
                        hotel_photo = self.photo_service.get_fallback_image(country_code, country_name)
                    
                    direction = DirectionInfo(
                        name=country_name,
                        image_link=hotel_photo,
                        min_price=min_price
                    )
                    directions.append(direction)
                    
                    logger.info(f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {country_name}: —Ü–µ–Ω–∞ {min_price}, —Ñ–æ—Ç–æ: {'‚úì' if hotel_photo and not hotel_photo.startswith('https://via.placeholder.com') else '‚úó'}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country_code}: {e}")
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    country_name = self._get_country_name(country_code)
                    direction = DirectionInfo(
                        name=country_name,
                        image_link=self.photo_service.get_fallback_image(country_code, country_name),
                        min_price=50000.0
                    )
                    directions.append(direction)
                    continue
            
            logger.info(f"üèÅ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê. –ü–æ–ª—É—á–µ–Ω–æ: {len(directions)}")
            
            if directions:
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 6 —á–∞—Å–æ–≤
                try:
                    await self.cache.set(
                        "directions_with_prices_and_photos", 
                        [direction.dict() for direction in directions], 
                        ttl=21600
                    )
                    logger.info(f"üíæ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                except Exception as cache_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {cache_error}")
            
            return directions
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            return []

    async def refresh_directions(self) -> List[DirectionInfo]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        # –£–¥–∞–ª—è–µ–º –∫—ç—à
        await self.cache.delete("directions_with_prices_and_photos")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return await self._generate_directions_with_hotel_photos()

    async def get_directions_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_directions = await self.cache.get("directions_with_prices_and_photos")
            
            return {
                "cache": {
                    "has_data": bool(cached_directions),
                    "directions_count": len(cached_directions) if cached_directions else 0,
                    "cache_key": "directions_with_prices_and_photos"
                },
                "photo_sources": {
                    "hot_tours": "Fastest - from hot tours API",
                    "hotels_reference": "Medium - from hotels directory",
                    "tours_search": "Slower - from search results",
                    "fallback": "Placeholder with country colors"
                },
                "endpoints": {
                    "get_directions": "/api/v1/tours/directions",
                    "refresh_directions": "/api/v1/tours/directions/refresh", 
                    "check_status": "/api/v1/tours/directions/status"
                },
                "features": {
                    "real_hotel_photos": True,
                    "min_prices_from_search": True,
                    "cache_ttl_hours": 6,
                    "parallel_processing": True,
                    "multiple_photo_sources": True
                }
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "recommendation": "use_refresh_endpoint"
            }

    async def fix_cache_issues(self) -> dict:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            # 1. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∞
            old_cache_keys = [
                "directions_with_prices_search",
                "directions_with_prices",
                "directions_with_prices_and_photos"
            ]
            
            cleared_keys = []
            for key in old_cache_keys:
                if await self.cache.delete(key):
                    cleared_keys.append(key)
            
            # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            logger.info("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            new_directions = await self._generate_directions_with_hotel_photos()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache_check = await self.cache.get("directions_with_prices_and_photos")
            
            return {
                "success": True,
                "actions_performed": [
                    f"–û—á–∏—â–µ–Ω—ã –∫–ª—é—á–∏ –∫—ç—à–∞: {cleared_keys}",
                    f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(new_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
                    f"–ö—ç—à {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω' if cache_check else '–ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω'}"
                ],
                "generated_directions": [
                    {
                        "name": d.name,
                        "has_real_photo": not d.image_link.startswith("https://via.placeholder.com"),
                        "price": d.min_price
                    }
                    for d in new_directions
                ],
                "recommendations": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ endpoints /api/v1/tours/directions",
                    "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/v1/tours/directions/diagnose"
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
            raise

    def _get_country_name(self, country_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É"""
        country_map = {
            1: "–ï–≥–∏–ø–µ—Ç",
            4: "–¢—É—Ä—Ü–∏—è", 
            22: "–¢–∞–∏–ª–∞–Ω–¥",
            8: "–ì—Ä–µ—Ü–∏—è",
            15: "–û–ê–≠",
            35: "–ú–∞–ª—å–¥–∏–≤—ã"
        }
        return country_map.get(country_code, f"–°—Ç—Ä–∞–Ω–∞ {country_code}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
directions_service = DirectionsService()