import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class CacheWarmupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏"""
    
    def __init__(self):
        self.countries = settings.POPULAR_COUNTRIES
        self.cities = settings.DEPARTURE_CITIES
        
    async def warm_up_cache(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞"""
        logger.info("üî• –ù–∞—á–∞—Ç –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–æ–Ω–∏ –±—ã—Å—Ç—Ä—ã–µ)
            await self._warm_references()
            
            # –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            await self._warm_hot_tours()
            
            # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –¥–µ–ª–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            await self._warm_popular_searches()
            
            logger.info("‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞: {e}")
    
    async def _warm_references(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–±—ã—Å—Ç—Ä–æ)"""
        logger.info("üìö –ü—Ä–æ–≥—Ä–µ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        
        reference_types = [
            "departure",
            "country", 
            "meal",
            "stars",
            "operator",
            "services"
        ]
        
        for ref_type in reference_types:
            try:
                data = await tourvisor_client.get_references(ref_type)
                
                cache_key = f"reference:{ref_type}"
                await cache_service.set(
                    cache_key,
                    data,
                    ttl=86400  # 24 —á–∞—Å–∞ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                )
                
                logger.info(f"üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {ref_type} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω")
                await asyncio.sleep(0.2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {ref_type}: {e}")
        
        # –ö—ç—à–∏—Ä—É–µ–º –∫—É—Ä–æ—Ä—Ç—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        for country in self.countries:
            try:
                regions_data = await tourvisor_client.get_references(
                    "region",
                    regcountry=country
                )
                
                cache_key = f"reference:regions_country_{country}"
                await cache_service.set(
                    cache_key,
                    regions_data,
                    ttl=86400
                )
                
                logger.info(f"üèñÔ∏è –ö—É—Ä–æ—Ä—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã")
                await asyncio.sleep(0.2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}: {e}")
    
    async def _warm_hot_tours(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)"""
        logger.info("üî• –ü—Ä–æ–≥—Ä–µ–≤ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤
        hot_tours_available = await self._check_hot_tours_availability()
        
        if not hot_tours_available:
            logger.warning("‚ö†Ô∏è –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç—Ç–∞–ø")
            return
        
        for city in self.cities:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                hot_tours = await tourvisor_client.get_hot_tours(
                    city=city,
                    items=20
                )
                
                cache_key = f"hot_tours:city_{city}"
                await cache_service.set(
                    cache_key,
                    hot_tours,
                    ttl=settings.POPULAR_TOURS_CACHE_TTL
                )
                
                logger.info(f"üî• –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—â–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
                if hot_tours.get("hotcount", 0) > 0:
                    for country in self.countries:
                        try:
                            country_hot_tours = await tourvisor_client.get_hot_tours(
                                city=city,
                                items=10,
                                countries=str(country)
                            )
                            
                            cache_key = f"hot_tours:city_{city}_country_{country}"
                            await cache_service.set(
                                cache_key,
                                country_hot_tours,
                                ttl=settings.POPULAR_TOURS_CACHE_TTL
                            )
                            
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            await asyncio.sleep(0.5)
                        except Exception as country_error:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ {city}-{country}: {country_error}")
                            continue
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
                continue
    
    async def _check_hot_tours_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã
            test_hot_tours = await tourvisor_client.get_hot_tours(
                city=1,  # –ú–æ—Å–∫–≤–∞
                items=3
            )
            
            hot_count = test_hot_tours.get("hotcount", 0)
            logger.info(f"üß™ –¢–µ—Å—Ç –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {hot_count} —Ç—É—Ä–æ–≤")
            
            return hot_count > 0
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: {e}")
            return False
    
    async def _warm_popular_searches(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–º–µ–¥–ª–µ–Ω–Ω–æ)"""
        logger.info("üîç –ü—Ä–æ–≥—Ä–µ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤...")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        base_search_params = [
            {"nights_from": 7, "nights_to": 10, "adults": 2, "child": 0},
            {"nights_from": 10, "nights_to": 14, "adults": 2, "child": 0},
        ]
        
        # –î–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ (–Ω–µ –Ω–∞ –º–µ—Å—è—Ü, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ)
        today = datetime.now()
        date_ranges = [
            {
                "datefrom": (today + timedelta(days=7)).strftime("%d.%m.%Y"),
                "dateto": (today + timedelta(days=14)).strftime("%d.%m.%Y")
            },
            {
                "datefrom": (today + timedelta(days=14)).strftime("%d.%m.%Y"),
                "dateto": (today + timedelta(days=21)).strftime("%d.%m.%Y")
            }
        ]
        
        search_count = 0
        max_searches = 6  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤
        
        for city in self.cities:
            for country in self.countries:
                for search_params in base_search_params[:1]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    for date_range in date_ranges[:1]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                        
                        if search_count >= max_searches:
                            logger.info(f"‚úã –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ ({max_searches})")
                            return
                        
                        try:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                            full_params = {
                                "departure": city,
                                "country": country,
                                "nightsfrom": search_params["nights_from"],
                                "nightsto": search_params["nights_to"],
                                "adults": search_params["adults"],
                                "child": search_params["child"],
                                **date_range
                            }
                            
                            logger.info(f"üîç –ü–æ–∏—Å–∫ {search_count + 1}/{max_searches}: {country} –∏–∑ {city}")
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                            request_id = await tourvisor_client.search_tours(full_params)
                            
                            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
                            search_completed = await self._wait_for_search_completion(request_id, max_wait=20)
                            
                            if search_completed:
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                results = await tourvisor_client.get_search_results(request_id, 1, 15)
                                
                                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                cache_key = f"popular_search:{city}_{country}_{search_params['nights_from']}_{search_params['nights_to']}"
                                await cache_service.set(
                                    cache_key,
                                    results,
                                    ttl=settings.POPULAR_TOURS_CACHE_TTL
                                )
                                
                                logger.info(f"‚úÖ –ü–æ–∏—Å–∫ {city}-{country} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω")
                            else:
                                logger.warning(f"‚è∞ –ü–æ–∏—Å–∫ {city}-{country} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è")
                            
                            search_count += 1
                            
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                            await asyncio.sleep(2)
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ {city}-{country}: {e}")
                            search_count += 1
                            continue
    
    async def _wait_for_search_completion(self, request_id: str, max_wait: int = 20) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            for attempt in range(max_wait):
                await asyncio.sleep(1)
                
                status_result = await tourvisor_client.get_search_status(request_id)
                status = status_result.get("data", {}).get("status", {})
                
                state = status.get("state", "searching")
                progress = status.get("progress", 0)
                hotels_found = status.get("hotelsfound", 0)
                
                # –°—á–∏—Ç–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –µ—Å–ª–∏:
                # 1. –°—Ç–∞—Ç—É—Å "finished"
                # 2. –ü—Ä–æ–≥—Ä–µ—Å—Å >= 70% –∏ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏
                # 3. –ü—Ä–æ—à–ª–æ >= 15 —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏
                if (state == "finished" or 
                    (progress >= 70 and hotels_found > 0) or
                    (attempt >= 15 and hotels_found > 0)):
                    
                    logger.debug(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state}, –ø—Ä–æ–≥—Ä–µ—Å—Å={progress}%, –æ—Ç–µ–ª–µ–π={hotels_found}")
                    return True
            
            logger.debug(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ {request_id}")
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ {request_id}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞
async def warm_up_cache():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞"""
    warmup_service = CacheWarmupService()
    
    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await warmup_service.warm_up_cache()
    
    while True:
        try:
            # –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ–≤ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
            logger.info("üò¥ –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤...")
            await asyncio.sleep(21600)
            
            await warmup_service.warm_up_cache()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(1800)