import pytest
from unittest.mock import patch, AsyncMock, MagicMock
from app.services.random_tours_service import random_tours_service
from app.models.tour import RandomTourRequest


class TestRandomToursBusinessLogic:
    """–¢–µ—Å—Ç—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    
    def test_service_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        assert random_tours_service is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ª–æ–≥–æ–≤
        expected_methods = [
            'get_random_tours',
            'refresh_random_tours', 
            'clear_random_tours_cache',
            '_generate_fully_random_tours'
        ]
        
        for method_name in expected_methods:
            assert hasattr(random_tours_service, method_name)
            assert callable(getattr(random_tours_service, method_name))
            print(f"‚úì {method_name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def test_generation_strategies(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ª–æ–≥–æ–≤"""
        # –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–∏–º: search, hot_tours, mock
        
        expected_strategies = ['search', 'hot_tours', 'mock']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_methods = [
            '_try_search_strategy',
            '_try_hot_tours_strategy', 
            '_create_smart_mock_tours'
        ]
        
        found_methods = []
        for method_name in strategy_methods:
            if hasattr(random_tours_service, method_name):
                found_methods.append(method_name)
                print(f"‚úì {method_name} - –Ω–∞–π–¥–µ–Ω")
        
        assert len(found_methods) > 0
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {found_methods}")
    
    def test_multilevel_generation_workflow(self):
        """–¢–µ—Å—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏–∑ –ª–æ–≥–æ–≤)"""
        # –ò–∑ –ª–æ–≥–æ–≤: "–ù–ê–ß–ò–ù–ê–ï–ú –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–£–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ 6 –¢–£–†–û–í"
        # "–£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–±—É–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã"
        # "–£—Ä–æ–≤–µ–Ω—å 2: –ù—É–∂–Ω–æ –µ—â–µ 6 —Ç—É—Ä–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫"
        
        multilevel_methods = [
            '_generate_random_tours_multilevel',
            '_try_fully_random_hot_tours_strategy',
            '_try_fully_random_search_strategy'
        ]
        
        found_multilevel = []
        for method_name in multilevel_methods:
            if hasattr(random_tours_service, method_name):
                found_multilevel.append(method_name)
                print(f"‚úì {method_name} - –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω")
        
        assert len(found_multilevel) > 0
        print(f"–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã: {found_multilevel}")
    
    def test_tour_filtering_and_matching(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–æ–≤"""
        # –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–∏–º –º–µ—Ç–æ–¥—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filtering_methods = [
            '_filter_tours_by_hotel_types',
            '_tour_matches_type',
            '_get_cached_tours_with_filters'
        ]
        
        found_filtering = []
        for method_name in filtering_methods:
            if hasattr(random_tours_service, method_name):
                found_filtering.append(method_name)
                print(f"‚úì {method_name} - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        assert len(found_filtering) > 0
        print(f"–ú–µ—Ç–æ–¥—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {found_filtering}")
    
    def test_tour_conversion_and_optimization(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤"""
        # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        conversion_methods = [
            '_convert_search_to_hot_tour',
            '_create_optimized_search_variants',
            '_get_multiple_tours_from_search'
        ]
        
        found_conversion = []
        for method_name in conversion_methods:
            if hasattr(random_tours_service, method_name):
                found_conversion.append(method_name)
                print(f"‚úì {method_name} - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        assert len(found_conversion) > 0
        print(f"–ú–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {found_conversion}")
    
    @patch('app.services.cache_service.get')
    @patch('app.services.cache_service.set')
    def test_cache_integration_mock(self, mock_set, mock_get):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º —á–µ—Ä–µ–∑ –º–æ–∫–∏"""
        # –ú–æ–∫–∏—Ä—É–µ–º –∫—ç—à
        mock_get.return_value = None  # –ö—ç—à –ø—É—Å—Ç
        mock_set.return_value = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
        cache_methods = [
            'clear_random_tours_cache',
            'clear_hotel_type_cache'
        ]
        
        for method_name in cache_methods:
            if hasattr(random_tours_service, method_name):
                method = getattr(random_tours_service, method_name)
                assert callable(method)
                print(f"‚úì {method_name} - –∫—ç—à –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("–ö—ç—à –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –º–æ–∫–∏")


class TestTourDataStructure:
    """–¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    
    def test_tour_field_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Ç—É—Ä–∞"""
        # –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–∏–º —á—Ç–æ —Ç—É—Ä—ã –∏–º–µ—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏
        expected_tour_fields = [
            'hotelname',
            'countryname', 
            'price',
            'nights',
            'departurename',
            'generation_strategy',
            'search_source'
        ]
        
        # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –∑–Ω–∞–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –æ–∂–∏–¥–∞—Ç—å
        print(f"–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è —Ç—É—Ä–∞: {expected_tour_fields}")
        assert len(expected_tour_fields) > 0
    
    def test_generation_metadata(self):
        """–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        # –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: generation_strategy, search_source
        expected_metadata = [
            'generation_strategy',  # search, hot_tours, mock
            'search_source',        # –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            'cached_at'            # –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        ]
        
        print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {expected_metadata}")
        assert len(expected_metadata) > 0


class TestRandomTourRequest:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    
    def test_valid_request_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ò–∑ –ª–æ–≥–æ–≤: "üéØ –ó–∞–ø—Ä–æ—Å 6 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"
        request = RandomTourRequest(count=6)
        assert request.count == 6
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        min_request = RandomTourRequest(count=1)
        assert min_request.count == 1
        
        max_request = RandomTourRequest(count=20)  # –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        assert max_request.count == 20
        
        print("‚úì RandomTourRequest –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_default_values(self):
        """–¢–µ—Å—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        # –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤: –¥–µ—Ñ–æ–ª—Ç = 6
        default_request = RandomTourRequest()
        assert default_request.count == 6
        print(f"‚úì –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {default_request.count}")


class TestServiceConfiguration:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    
    def test_service_constants(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ª–æ–≥–æ–≤"""
        # –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        expected_config = {
            'update_interval_hours': 12.0,
            'tours_per_type': 6,
            'hotel_types_count': 8,
            'strategies': ['search', 'hot_tours', 'mock'],
            'countries': ['1', '4', '22', '9']
        }
        
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ª–æ–≥–æ–≤:")
        for key, value in expected_config.items():
            print(f"  {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—á–Ω–∞
        assert expected_config['tours_per_type'] > 0
        assert expected_config['update_interval_hours'] > 0
        assert len(expected_config['strategies']) > 0
        assert len(expected_config['countries']) > 0
        
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")