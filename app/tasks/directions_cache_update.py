# app/tasks/directions_cache_update.py

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import traceback

from app.services.directions_service import directions_service
from app.services.cache_service import cache_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class DirectionsCacheUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.update_interval = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.countries_batch_size = 3  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ 3 —Å—Ç—Ä–∞–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        self.is_running = False
        self.last_update = None
        self.update_stats = {}
        
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logger.info("üïí –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        while self.is_running:
            try:
                await self._run_update_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                logger.info(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (24 —á–∞—Å–∞)")
                await asyncio.sleep(self.update_interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
                logger.error(traceback.format_exc())
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(3600)
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        self.is_running = False
    
    async def _run_update_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        start_time = datetime.now()
        logger.info(f"üîÑ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–≠–®–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô ({start_time.strftime('%Y-%m-%d %H:%M:%S')})")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
            countries_list = list(directions_service.COUNTRIES_MAPPING.items())
            total_countries = len(countries_list)
            
            logger.info(f"üåç –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_countries} —Å—Ç—Ä–∞–Ω")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_stats = {
                "start_time": start_time,
                "total_countries": total_countries,
                "processed_countries": 0,
                "successful_countries": 0,
                "failed_countries": 0,
                "total_directions": 0,
                "countries_details": {}
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            for i in range(0, total_countries, self.countries_batch_size):
                batch = countries_list[i:i + self.countries_batch_size]
                
                logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i//self.countries_batch_size + 1}/{(total_countries + self.countries_batch_size - 1)//self.countries_batch_size}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞
                batch_tasks = []
                for country_name, country_info in batch:
                    task = asyncio.create_task(
                        self._update_country_directions(country_name, country_info)
                    )
                    batch_tasks.append((country_name, task))
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
                for country_name, task in batch_tasks:
                    try:
                        result = await task
                        update_stats["processed_countries"] += 1
                        
                        if result["success"]:
                            update_stats["successful_countries"] += 1
                            update_stats["total_directions"] += result["directions_count"]
                        else:
                            update_stats["failed_countries"] += 1
                        
                        update_stats["countries_details"][country_name] = result
                        
                        logger.info(f"‚úÖ {country_name}: {result['directions_count']} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                        
                    except Exception as e:
                        update_stats["processed_countries"] += 1
                        update_stats["failed_countries"] += 1
                        update_stats["countries_details"][country_name] = {
                            "success": False,
                            "error": str(e),
                            "directions_count": 0
                        }
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {country_name}: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
                if i + self.countries_batch_size < total_countries:
                    logger.info("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (30 —Å–µ–∫)")
                    await asyncio.sleep(30)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
            end_time = datetime.now()
            execution_time = end_time - start_time
            
            update_stats["end_time"] = end_time
            update_stats["execution_time_seconds"] = execution_time.total_seconds()
            update_stats["success_rate"] = (update_stats["successful_countries"] / total_countries * 100) if total_countries > 0 else 0
            
            self.last_update = end_time
            self.update_stats = update_stats
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—ç—à
            await cache_service.set("directions_cache_update_stats", update_stats, ttl=48*3600)  # 48 —á–∞—Å–æ–≤
            
            logger.info(f"üèÅ –¶–ò–ö–õ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {update_stats['successful_countries']}/{total_countries} —Å—Ç—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ, "
                       f"{update_stats['total_directions']} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, "
                       f"–≤—Ä–µ–º—è: {execution_time.total_seconds():.1f} —Å–µ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            logger.error(traceback.format_exc())
            raise
        
        
    async def _update_country_directions(self, country_name: str, country_info: Dict) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
        
        –ò–∑–º–µ–Ω–µ–Ω–∏—è:
        1. –ù–ï –æ—á–∏—â–∞–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        3. –û—Ç–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        """
        country_id = country_info.get("country_id")
        
        if not country_id:
            return {
                "success": False,
                "error": "–ù–µ—Ç country_id",
                "directions_count": 0,
                "execution_time_seconds": 0
            }
        
        start_time = datetime.now()
        cache_key = f"directions_with_prices_country_{country_id}"
        
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {country_name} (ID: {country_id})")
            
            # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            old_cache = None
            try:
                old_cache = await cache_service.get(cache_key)
                if old_cache:
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–µ—à –¥–ª—è {country_name}: {len(old_cache)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–µ—à –¥–ª—è {country_name}: {e}")
            
            # –ù–ï –û–ß–ò–©–ê–ï–ú –ö–ï–®! –ü—É—Å—Ç—å get_directions_by_country —Å–∞–º —Ä–µ—à–∞–µ—Ç
            # await cache_service.delete(cache_key)  # <-- –£–ë–ò–†–ê–ï–ú –≠–¢–£ –°–¢–†–û–ö–£
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            # directions_service.get_directions_by_country —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–µ—à
            # –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            directions = await directions_service.get_directions_by_country(country_name)
            
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            with_prices = len([d for d in directions if d.get("min_price")])
            with_images = len([d for d in directions if d.get("image_link")])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
            if directions:
                result = {
                    "success": True,
                    "directions_count": len(directions),
                    "execution_time_seconds": execution_time,
                    "quality_stats": {
                        "with_prices": with_prices,
                        "with_images": with_images,
                        "price_coverage": f"{(with_prices/len(directions)*100):.1f}%" if directions else "0%",
                        "image_coverage": f"{(with_images/len(directions)*100):.1f}%" if directions else "0%"
                    },
                    "cache_action": "updated" if directions != old_cache else "kept_existing"
                }
                
                logger.info(f"‚úÖ {country_name}: {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞ {execution_time:.1f}—Å")
                return result
            else:
                # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫–µ—à - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if old_cache:
                    logger.info(f"üîÑ –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {country_name}, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à: {len(old_cache)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à —Å –Ω–æ–≤—ã–º TTL
                    await cache_service.set(cache_key, old_cache, ttl=86400 * 30)
                    
                    return {
                        "success": True,
                        "directions_count": len(old_cache),
                        "execution_time_seconds": execution_time,
                        "quality_stats": {
                            "with_prices": len([d for d in old_cache if d.get("min_price")]),
                            "with_images": len([d for d in old_cache if d.get("image_link")]),
                            "price_coverage": f"{(len([d for d in old_cache if d.get('min_price')])/len(old_cache)*100):.1f}%",
                            "image_coverage": f"{(len([d for d in old_cache if d.get('image_link')])/len(old_cache)*100):.1f}%"
                        },
                        "cache_action": "kept_old_cache"
                    }
                else:
                    # –ù–µ—Ç –Ω–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
                    return {
                        "success": False,
                        "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞",
                        "directions_count": 0,
                        "execution_time_seconds": execution_time,
                        "cache_action": "no_data"
                    }
            
        except Exception as e:
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {country_name}: {e}")
            
            # –í–ê–ñ–ù–û: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
            if old_cache:
                try:
                    await cache_service.set(cache_key, old_cache, ttl=86400 * 30)
                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–µ—à –¥–ª—è {country_name} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                    
                    return {
                        "success": True,  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                        "directions_count": len(old_cache),
                        "execution_time_seconds": execution_time,
                        "error": str(e),
                        "cache_action": "restored_old_cache_after_error",
                        "quality_stats": {
                            "with_prices": len([d for d in old_cache if d.get("min_price")]),
                            "with_images": len([d for d in old_cache if d.get("image_link")]),
                        }
                    }
                except Exception as restore_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–µ—à –¥–ª—è {country_name}: {restore_error}")
            
            return {
                "success": False,
                "error": str(e),
                "directions_count": 0,
                "execution_time_seconds": execution_time,
                "cache_action": "failed"
            }

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    async def force_update_country(self, country_name: str) -> Dict[str, Any]:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
        """
        if country_name not in directions_service.COUNTRIES_MAPPING:
            return {
                "success": False,
                "error": f"–°—Ç—Ä–∞–Ω–∞ {country_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        country_info = directions_service.COUNTRIES_MAPPING[country_name]
        country_id = country_info.get("country_id")
        
        if not country_id:
            return {
                "success": False,
                "error": f"–ù–µ—Ç country_id –¥–ª—è {country_name}"
            }
        
        logger.info(f"üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {country_name} —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞")
        
        try:
            # –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            cache_key = f"directions_with_prices_country_{country_id}"
            await cache_service.delete(cache_key)
            logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫–µ—à –¥–ª—è {country_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            return await self._update_country_directions(country_name, country_info)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {country_name}: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    async def force_update_now(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å (–¥–ª—è API)"""
        logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        try:
            await self._run_update_cycle()
            return {
                "success": True,
                "message": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "stats": self.update_stats
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            }
    
    async def get_update_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è API)"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à–∞
            cached_stats = await cache_service.get("directions_cache_update_stats")
            
            if cached_stats:
                # –î–æ–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                status = {
                    "is_running": self.is_running,
                    "last_update": cached_stats.get("end_time"),
                    "next_update": None,
                    "update_stats": cached_stats
                }
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if self.last_update:
                    next_update = self.last_update + timedelta(seconds=self.update_interval)
                    status["next_update"] = next_update
                    status["time_until_next_update_hours"] = max(0, (next_update - datetime.now()).total_seconds() / 3600)
                
                return status
            else:
                return {
                    "is_running": self.is_running,
                    "last_update": self.last_update,
                    "next_update": None,
                    "update_stats": None,
                    "message": "–ï—â–µ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "error": str(e),
                "is_running": self.is_running
            }

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
directions_cache_update_service = DirectionsCacheUpdateService()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async def start_directions_cache_update_task():
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    await directions_cache_update_service.start_scheduler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def stop_directions_cache_update_task():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    await directions_cache_update_service.stop_scheduler()