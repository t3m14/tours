# app/tasks/random_tours_cache_update.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–ù–ì–õ–ò–ô–°–ö–ò–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò –¢–ò–ü–û–í –û–¢–ï–õ–ï–ô

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import traceback
import random

from app.services.random_tours_service import random_tours_service
from app.services.cache_service import cache_service
from app.models.tour import RandomTourRequest
from app.utils.logger import setup_logger
import os
logger = setup_logger(__name__)

class RandomToursCacheUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        self.update_interval = int(os.getenv("RANDOM_TOURS_UPDATE_INTERVAL_HOURS", "12")) * 3600  # 12 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.tours_per_type = int(os.getenv("RANDOM_TOURS_PER_TYPE", "8"))  # 8 —Ç—É—Ä–æ–≤ –Ω–∞ —Ç–∏–ø –æ—Ç–µ–ª—è
        self.generation_strategies = os.getenv("RANDOM_TOURS_STRATEGIES", "search,hot_tours,mock").split(",")
        self.countries_to_update = os.getenv("RANDOM_TOURS_COUNTRIES", "1,2,4,9,8").split(",")  # –¢–æ–ø —Å—Ç—Ä–∞–Ω—ã
        
        # –ê–ù–ì–õ–ò–ô–°–ö–ò–ï —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –Ω–∞ API TourVisor
        self.hotel_types_mapping = {
            "any": {
                "display_name": "any", 
                "api_param": None,  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                "cache_key": "any"
            },
            "active": {
                "display_name": "active",
                "api_param": "active",  # TourVisor API: active
                "cache_key": "active"
            },
            "relax": {
                "display_name": "relax",
                "api_param": "relax",  # TourVisor API: relax
                "cache_key": "relax"
            },
            "family": {
                "display_name": "family",
                "api_param": "family",  # TourVisor API: family
                "cache_key": "family"
            },
            "health": {
                "display_name": "health",
                "api_param": "health",  # TourVisor API: health
                "cache_key": "health"
            },
            "city": {
                "display_name": "city",
                "api_param": "city",  # TourVisor API: city
                "cache_key": "city"
            },
            "beach": {
                "display_name": "beach",
                "api_param": "beach",  # TourVisor API: beach
                "cache_key": "beach"
            },
            "deluxe": {
                "display_name": "deluxe",
                "api_param": "deluxe",  # TourVisor API: deluxe
                "cache_key": "deluxe"
            }
        }

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.last_update = None
        self.update_stats = {}
        self.current_hotel_type = None
        
        logger.info(f"üé≤ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: –∏–Ω—Ç–µ—Ä–≤–∞–ª {self.update_interval//3600}—á, "
                   f"{self.tours_per_type} —Ç—É—Ä–æ–≤ –Ω–∞ —Ç–∏–ø, —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π: {list(self.hotel_types_mapping.keys())}")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logger.info(f"üé≤ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval//3600}—á)")
        
        # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        auto_start = os.getenv("RANDOM_TOURS_AUTO_START", "true").lower() == "true"
        if auto_start:
            logger.info("üöÄ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á–µ–Ω - –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
            try:
                await self._run_update_cycle()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        
        while self.is_running:
            try:
                await asyncio.sleep(self.update_interval)
                
                if self.is_running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    await self._run_update_cycle()
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
                logger.error(traceback.format_exc())
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(3600)
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        self.is_running = False
    
    async def _run_update_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        start_time = datetime.now()
        logger.info(f"üé≤ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–õ–£–ß–ê–ô–ù–´–• –¢–£–†–û–í ({start_time.strftime('%Y-%m-%d %H:%M:%S')})")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            hotel_types = list(self.hotel_types_mapping.keys())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_stats = {
                "start_time": start_time,
                "total_hotel_types": len(hotel_types),
                "tours_per_type": self.tours_per_type,
                "processed_types": 0,
                "successful_types": 0,
                "failed_types": 0,
                "total_tours_generated": 0,
                "strategies_used": {},
                "hotel_types_details": {},
                "api_calls_made": 0,
                "real_api_tours": 0,
                "mock_tours": 0
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            for hotel_type_key in hotel_types:
                try:
                    hotel_type_info = self.hotel_types_mapping[hotel_type_key]
                    display_name = hotel_type_info["display_name"]
                    
                    logger.info(f"üè® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞: {display_name}")
                    self.current_hotel_type = display_name
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                    result = await self._update_tours_for_hotel_type(hotel_type_key, hotel_type_info)
                    
                    update_stats["processed_types"] += 1
                    update_stats["api_calls_made"] += result.get("api_calls_made", 0)
                    
                    if result["success"]:
                        update_stats["successful_types"] += 1
                        update_stats["total_tours_generated"] += result["tours_count"]
                        update_stats["real_api_tours"] += result.get("real_tours", 0)
                        update_stats["mock_tours"] += result.get("mock_tours", 0)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                        for strategy, count in result.get("strategies_used", {}).items():
                            update_stats["strategies_used"][strategy] = update_stats["strategies_used"].get(strategy, 0) + count
                    else:
                        update_stats["failed_types"] += 1
                    
                    update_stats["hotel_types_details"][display_name] = result
                    
                    logger.info(f"‚úÖ {display_name}: {result['tours_count']} —Ç—É—Ä–æ–≤ –∑–∞ {result['execution_time_seconds']:.1f}—Å "
                              f"(—Ä–µ–∞–ª—å–Ω—ã—Ö: {result.get('real_tours', 0)}, mock: {result.get('mock_tours', 0)})")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –æ—Ç–µ–ª–µ–π
                    await asyncio.sleep(5)
                    
                except Exception as e:
                    update_stats["processed_types"] += 1
                    update_stats["failed_types"] += 1
                    update_stats["hotel_types_details"][hotel_type_info["display_name"]] = {
                        "success": False,
                        "error": str(e),
                        "tours_count": 0,
                        "execution_time_seconds": 0,
                        "real_tours": 0,
                        "mock_tours": 0
                    }
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_info['display_name']}: {e}")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
            end_time = datetime.now()
            execution_time = end_time - start_time
            
            update_stats["end_time"] = end_time
            update_stats["execution_time_seconds"] = execution_time.total_seconds()
            update_stats["success_rate"] = (update_stats["successful_types"] / len(hotel_types) * 100) if hotel_types else 0
            update_stats["real_tours_percentage"] = (update_stats["real_api_tours"] / update_stats["total_tours_generated"] * 100) if update_stats["total_tours_generated"] > 0 else 0
            
            self.last_update = end_time
            self.update_stats = update_stats
            self.current_hotel_type = None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—ç—à
            await cache_service.set("random_tours_cache_update_stats", update_stats, ttl=48*3600)
            
            logger.info(f"üèÅ –¶–ò–ö–õ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–õ–£–ß–ê–ô–ù–´–• –¢–£–†–û–í –ó–ê–í–ï–†–®–ï–ù")
            logger.info(f"üìä –ò—Ç–æ–≥–æ: {update_stats['successful_types']}/{len(hotel_types)} —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π, "
                       f"{update_stats['total_tours_generated']} —Ç—É—Ä–æ–≤, "
                       f"–≤—Ä–µ–º—è: {execution_time.total_seconds():.1f} —Å–µ–∫, "
                       f"—É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {update_stats['success_rate']:.1f}%, "
                       f"—Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã: {update_stats['real_tours_percentage']:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _update_tours_for_hotel_type(self, hotel_type_key: str, hotel_type_info: Dict) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        start_time = datetime.now()
        
        try:
            display_name = hotel_type_info["display_name"]
            api_param = hotel_type_info["api_param"]
            cache_key_suffix = hotel_type_info["cache_key"]
            
            logger.debug(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.tours_per_type} —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞: {display_name} (API: {api_param})")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            cache_key = f"random_tours_{cache_key_suffix}"
            await cache_service.delete(cache_key)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ä—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            tours_result, api_calls_made = await self._generate_tours_with_api_filter(
                hotel_type_key, api_param, display_name
            )
            
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            if tours_result and len(tours_result) > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                strategies_used = {}
                real_tours = 0
                mock_tours = 0
                
                for tour in tours_result:
                    strategy = tour.get("generation_strategy", "unknown")
                    strategies_used[strategy] = strategies_used.get(strategy, 0) + 1
                    
                    if strategy in ["search", "hot_tours"]:
                        real_tours += 1
                    else:
                        mock_tours += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                await cache_service.set(cache_key, tours_result, ttl=self.update_interval + 3600)  # TTL = –∏–Ω—Ç–µ—Ä–≤–∞–ª + 1 —á–∞—Å
                
                result = {
                    "success": True,
                    "tours_count": len(tours_result),
                    "execution_time_seconds": execution_time,
                    "real_tours": real_tours,
                    "mock_tours": mock_tours,
                    "api_calls_made": api_calls_made,
                    "quality_stats": {
                        "real_tours": real_tours,
                        "mock_tours": mock_tours,
                        "real_tours_percentage": f"{(real_tours/len(tours_result)*100):.1f}%"
                    },
                    "strategies_used": strategies_used,
                    "hotel_type_api_param": api_param
                }
                
                logger.debug(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(tours_result)} —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}: "
                           f"{real_tours} —Ä–µ–∞–ª—å–Ω—ã—Ö, {mock_tours} mock, API –≤—ã–∑–æ–≤–æ–≤: {api_calls_made}")
                
                return result
            else:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä—ã",
                    "tours_count": 0,
                    "execution_time_seconds": execution_time,
                    "real_tours": 0,
                    "mock_tours": 0,
                    "api_calls_made": api_calls_made
                }
            
        except Exception as e:
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_info['display_name']}: {e}")
            
            return {
                "success": False,
                "error": str(e),
                "tours_count": 0,
                "execution_time_seconds": execution_time,
                "real_tours": 0,
                "mock_tours": 0,
                "api_calls_made": 0
            }
    
    async def _generate_tours_with_api_filter(self, hotel_type_key: str, api_param: Optional[str], display_name: str) -> tuple[List[Dict], int]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π
        
        Args:
            hotel_type_key: –ö–ª—é—á —Ç–∏–ø–∞ –æ—Ç–µ–ª—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            api_param: –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è API TourVisor (hoteltypes)
            display_name: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            
        Returns:
            tuple: (—Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –≤—ã–∑–æ–≤–æ–≤)
        """
        try:
            from app.core.tourvisor_client import tourvisor_client
            from datetime import datetime, timedelta
            
            tours_generated = []
            api_calls_made = 0
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ü–û–ü–†–û–ë–£–ï–ú –ü–û–ò–°–ö –ë–ï–ó –§–ò–õ–¨–¢–†–ê –°–ù–ê–ß–ê–õ–ê (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            if "search" in self.generation_strategies:
                logger.debug(f"üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è {display_name}")
                
                try:
                    # –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                    country_id = random.choice([int(c) for c in self.countries_to_update])
                    
                    # –î–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –∑–∞–≤—Ç—Ä–∞ + –Ω–µ–¥–µ–ª—è
                    tomorrow = datetime.now() + timedelta(days=1)
                    week_later = datetime.now() + timedelta(days=8)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                    search_params = {
                        "departure": random.choice([1, 2, 3, 4, 5]),  # –°–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
                        "country": country_id,
                        "datefrom": tomorrow.strftime("%d.%m.%Y"),
                        "dateto": week_later.strftime("%d.%m.%Y"),
                        "nightsfrom": 7,
                        "nightsto": 10,
                        "adults": 2,
                        "format": "json",  # –ò–ó–ú–ï–ù–ï–ù–û: JSON –≤–º–µ—Å—Ç–æ XML –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        "onpage": 20       # –£–ú–ï–ù–¨–®–ï–ù–û: –º–µ–Ω—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º—ã –ù–ï —Ç–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
                    if api_param and hotel_type_key != "any":
                        search_params["hoteltypes"] = api_param
                        logger.debug(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä hoteltypes={api_param}")
                    
                    logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è {display_name}: {search_params}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                    request_id = await tourvisor_client.search_tours(search_params)
                    api_calls_made += 1
                    
                    if request_id:
                        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ {request_id} –¥–ª—è {display_name}")
                        
                        # –£–í–ï–õ–ò–ß–ï–ù–ù–û–ï –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
                        max_wait_time = 120  # 2 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 60 —Å–µ–∫—É–Ω–¥
                        start_wait = datetime.now()
                        last_hotels_count = 0

                        while (datetime.now() - start_wait).total_seconds() < max_wait_time:
                            try:
                                status_result = await tourvisor_client.get_search_status(request_id)
                                api_calls_made += 1
                                
                                if status_result:
                                    status_data = status_result.get("data", {}).get("status", {})
                                    state = status_data.get("state", "")
                                    hotels_found = int(status_data.get("hotelsfound", 0))
                                    progress = int(status_data.get("progress", 0))
                                    
                                    logger.info(f"üìä –ü–æ–∏—Å–∫ {request_id} –¥–ª—è {display_name}: {state}, {progress}%, –æ—Ç–µ–ª–µ–π: {hotels_found}")
                                    
                                    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø:
                                    if state == "finished":
                                        if hotels_found > 0:
                                            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ {display_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å {hotels_found} –æ—Ç–µ–ª—è–º–∏")
                                            break
                                        else:
                                            logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ {display_name} –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                            break
                                            
                                    elif hotels_found >= 3 and progress >= 30:
                                        # –°–ù–ò–ñ–ï–ù –ø–æ—Ä–æ–≥: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 –æ—Ç–µ–ª—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å >= 30%
                                        logger.info(f"üìä –ü–æ–∏—Å–∫ {display_name}: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({hotels_found} –æ—Ç–µ–ª–µ–π –ø—Ä–∏ {progress}%)")
                                        break
                                        
                                    elif state == "error":
                                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è {display_name}")
                                        break
                                    
                                    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–µ —Ä–∞—Å—Ç–µ—Ç 30+ —Å–µ–∫—É–Ω–¥, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                                    if hotels_found == last_hotels_count and (datetime.now() - start_wait).total_seconds() > 30:
                                        if hotels_found > 0:
                                            logger.info(f"‚è∞ –ü–æ–∏—Å–∫ {display_name} –∑–∞—Å—Ç–æ–ø–æ—Ä–∏–ª—Å—è –Ω–∞ {hotels_found} –æ—Ç–µ–ª—è—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                                            break
                                    
                                    last_hotels_count = hotels_found
                                
                                await asyncio.sleep(5)  # –£–í–ï–õ–ò–ß–ï–ù–ê –ø–∞—É–∑–∞ –¥–æ 5 —Å–µ–∫—É–Ω–¥
                                
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {display_name}: {e}")
                                await asyncio.sleep(5)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                        try:
                            logger.info(f"üì• –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {request_id}")
                            search_results = await tourvisor_client.get_search_results(request_id)
                            api_calls_made += 1
                            
                            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê
                            logger.info(f"üîç –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê –¥–ª—è {display_name}:")
                            logger.info(f"üìä –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(search_results.keys())}")
                            logger.info(f"üìÑ –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤: {json.dumps(search_results, ensure_ascii=False)[:1000]}")
                            
                            if search_results:
                                tours_from_search = await self._extract_tours_from_search_results(
                                    search_results, self.tours_per_type, display_name
                                )
                                tours_generated.extend(tours_from_search)
                                logger.info(f"‚úÖ –ü–æ–∏—Å–∫ {display_name}: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(tours_from_search)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                                
                        except Exception as results_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {display_name}: {results_error}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è {display_name}: {e}")
                    logger.warning(f"üìÑ –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç—É—Ä–æ–≤)
            if len(tours_generated) < self.tours_per_type and "hot_tours" in self.generation_strategies:
                logger.debug(f"üî• –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}")
                
                try:
                    country_id = random.choice([int(c) for c in self.countries_to_update])
                    
                    hot_tours_data = await tourvisor_client.get_hot_tours(
                        city=1,  # –ú–æ—Å–∫–≤–∞
                        items=min(20, self.tours_per_type * 2),
                        countries=str(country_id)
                    )
                    api_calls_made += 1
                    
                    if hot_tours_data and "data" in hot_tours_data:
                        tours_from_hot = await self._extract_tours_from_hot_tours(
                            hot_tours_data, self.tours_per_type - len(tours_generated), display_name
                        )
                        tours_generated.extend(tours_from_hot)
                        logger.info(f"üî• –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã {display_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(tours_from_hot)} —Ç—É—Ä–æ–≤")
                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}: {e}")
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 3: Mock —Ç—É—Ä—ã (–µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
            if len(tours_generated) < self.tours_per_type and "mock" in self.generation_strategies:
                needed = self.tours_per_type - len(tours_generated)
                logger.debug(f"üé≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—è mock —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}: –Ω—É–∂–Ω–æ {needed}")
                
                mock_tours = await self._generate_mock_tours(needed, hotel_type_key, display_name)
                tours_generated.extend(mock_tours)
                logger.info(f"üé≠ Mock —Ç—É—Ä—ã {display_name}: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(mock_tours)} —Ç—É—Ä–æ–≤")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            tours_generated = tours_generated[:self.tours_per_type]
            
            logger.info(f"üìä –ò–¢–û–ì–û –¥–ª—è {display_name}: {len(tours_generated)} —Ç—É—Ä–æ–≤, API –≤—ã–∑–æ–≤–æ–≤: {api_calls_made}")
            return tours_generated, api_calls_made
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {display_name}: {e}")
            logger.error(f"üìÑ –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            return [], api_calls_made
    
    async def _extract_tours_from_search_results(self, search_results: Dict, limit: int, hotel_type: str) -> List[Dict]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            tours = []
            
            logger.info(f"üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¥–ª—è {hotel_type}")
            logger.debug(f"üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(search_results, ensure_ascii=False, indent=2)[:2000]}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê –û–¢–ï–õ–ï–ô
            hotels = []
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            search_paths = [
                ["data", "result", "hotel"],      # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                ["data", "hotel"],                # –ü—Ä—è–º–æ –≤ data
                ["hotel"],                        # –í –∫–æ—Ä–Ω–µ
                ["result", "hotel"],              # –ë–µ–∑ data
                ["data", "result", "hotels"],     # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                ["data", "hotels"],               # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤ data
                ["hotels"]                        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤ –∫–æ—Ä–Ω–µ
            ]
            
            for path in search_paths:
                try:
                    current = search_results
                    for key in path:
                        if isinstance(current, dict) and key in current:
                            current = current[key]
                        else:
                            break
                    else:
                        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ
                        if current:
                            hotels = current if isinstance(current, list) else [current]
                            logger.info(f"üè® –ù–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏ –ø–æ –ø—É—Ç–∏: {' -> '.join(path)} ({len(hotels)} –æ—Ç–µ–ª–µ–π)")
                            break
                except Exception as path_error:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—É—Ç–∏ {path}: {path_error}")
                    continue
            
            # –ú–µ—Ç–æ–¥ 2: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
            if not hotels:
                logger.warning(f"‚ö†Ô∏è –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏, –ø—Ä–æ–±—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫")
                hotels = self._recursive_find_hotels(search_results)
                if hotels:
                    logger.info(f"üè® –ù–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: {len(hotels)} –æ—Ç–µ–ª–µ–π")
            
            if not hotels:
                logger.error(f"‚ùå –û—Ç–µ–ª–∏ –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–ª—è {hotel_type}")
                logger.error(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {self._get_all_keys_recursive(search_results)}")
                return []
            
            logger.info(f"üè® –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—É—Ä—ã –∏–∑ –æ—Ç–µ–ª–µ–π
            for i, hotel in enumerate(hotels[:limit]):
                try:
                    if not isinstance(hotel, dict):
                        logger.warning(f"‚ö†Ô∏è –û—Ç–µ–ª—å {i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(hotel)}")
                        continue
                    
                    hotel_name = hotel.get("hotelname", hotel.get("name", f"Hotel_{i+1}"))
                    logger.debug(f"üè® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–µ–ª—å {i+1}: {hotel_name}")
                    
                    # –ò—â–µ–º —Ç—É—Ä—ã –≤ –æ—Ç–µ–ª–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                    hotel_tours = self._extract_tours_from_hotel(hotel)
                    
                    if hotel_tours:
                        logger.debug(f"üé´ –û—Ç–µ–ª—å {hotel_name}: –Ω–∞–π–¥–µ–Ω–æ {len(hotel_tours)} —Ç—É—Ä–æ–≤")
                        
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ç—É—Ä
                        for tour in hotel_tours:
                            try:
                                tour_data = self._build_tour_data(hotel, tour, hotel_type)
                                if tour_data:
                                    tours.append(tour_data)
                                    logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ç—É—Ä: {tour_data['hotel_name']} - {tour_data['price']} —Ä—É–±")
                                    break  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ç—É—Ä –∏–∑ –æ—Ç–µ–ª—è
                            except Exception as tour_build_error:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞: {tour_build_error}")
                                continue
                    else:
                        logger.debug(f"‚ö†Ô∏è –í –æ—Ç–µ–ª–µ {hotel_name} –Ω–µ—Ç —Ç—É—Ä–æ–≤")
                    
                    if len(tours) >= limit:
                        break
                        
                except Exception as hotel_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–µ–ª—è {i+1}: {hotel_error}")
                    continue
            
            logger.info(f"üéØ –ò–¢–û–ì–û –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(tours)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}")
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}: {e}")
            logger.error(f"üìÑ –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            return []
    
    def _recursive_find_hotels(self, data, depth=0, max_depth=5):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö"""
        if depth > max_depth:
            return []
        
        hotels = []
        
        if isinstance(data, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –æ—Ç–µ–ª–µ–º
            if self._looks_like_hotel(data):
                return [data]
            
            # –ò—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            for key, value in data.items():
                if key.lower() in ['hotel', 'hotels']:
                    if isinstance(value, list):
                        hotels.extend(value)
                    elif value:
                        hotels.append(value)
                else:
                    child_hotels = self._recursive_find_hotels(value, depth + 1, max_depth)
                    hotels.extend(child_hotels)
        
        elif isinstance(data, list):
            for item in data:
                child_hotels = self._recursive_find_hotels(item, depth + 1, max_depth)
                hotels.extend(child_hotels)
        
        return hotels
    
    def _looks_like_hotel(self, data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Ç–µ–ª—å"""
        if not isinstance(data, dict):
            return False
        
        hotel_indicators = ['hotelname', 'hotelcode', 'hotelstars', 'countryname', 'regionname']
        return any(key in data for key in hotel_indicators)
    
    def _get_all_keys_recursive(self, data, depth=0, max_depth=3):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if depth > max_depth:
            return set()
        
        keys = set()
        
        if isinstance(data, dict):
            keys.update(data.keys())
            for value in data.values():
                keys.update(self._get_all_keys_recursive(value, depth + 1, max_depth))
        elif isinstance(data, list) and data:
            for item in data[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                keys.update(self._get_all_keys_recursive(item, depth + 1, max_depth))
        
        return keys
    
    def _extract_tours_from_hotel(self, hotel):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç—É—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è"""
        hotel_tours = []
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ç—É—Ä–∞–º
        tour_paths = [
            ["tours", "tour"],
            ["tour"],
            ["tours"],
            ["packages"],
            ["offers"]
        ]
        
        for path in tour_paths:
            try:
                current = hotel
                for key in path:
                    if isinstance(current, dict) and key in current:
                        current = current[key]
                    else:
                        break
                else:
                    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
                    if current:
                        if isinstance(current, list):
                            hotel_tours.extend(current)
                        else:
                            hotel_tours.append(current)
                        break
            except Exception:
                continue
        
        return hotel_tours
    
    def _build_tour_data(self, hotel, tour, hotel_type, search_params=None):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç—É—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è –∏ —Ç—É—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã
            price = tour.get("price", 0)
            if not price or (isinstance(price, (str, int, float)) and float(price) <= 0):
                logger.debug(f"‚ö†Ô∏è –¢—É—Ä –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–Ω—ã: {price}")
                return None
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            def safe_get(obj, key, default="", convert_func=str):
                try:
                    value = obj.get(key, default)
                    return convert_func(value) if value not in [None, "", 0] else convert_func(default)
                except:
                    return convert_func(default)
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–¥—É
            def get_city_name_by_code(city_code):
                if not city_code:
                    return "–ú–æ—Å–∫–≤–∞"
                
                try:
                    city_code = int(city_code)
                except (ValueError, TypeError):
                    return "–ú–æ—Å–∫–≤–∞"
                city_map = {
                    1: "–∏–∑ –ú–æ—Å–∫–≤—ã", 2: "–∏–∑ –ü–µ—Ä–º–∏", 3: "–∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞", 4: "–∏–∑ –£—Ñ—ã",
                    5: "–∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞", 6: "–∏–∑ –ö–∞–∑–∞–Ω–∏", 7: "–∏–∑ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞",
                    8: "–∏–∑ –°–∞–º–∞—Ä—ã", 9: "–∏–∑ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É", 10: "–∏–∑ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞",
                    11: "–∏–∑ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞", 12: "–∏–∑ –í–æ—Ä–æ–Ω–µ–∂–∞", 13: "–∏–∑ –°–∞—Ä–∞—Ç–æ–≤–∞",
                    14: "–∏–∑ –¢–æ–ª—å—è—Ç—Ç–∏", 15: "–∏–∑ –ò–∂–µ–≤—Å–∫–∞"
                }
                return city_map.get(city_code, "–ú–æ—Å–∫–≤–∞")
            
            # –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï departure
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–∑ search_params -> –∏–∑ hotel -> –∏–∑ tour -> –º–∞–ø–ø–∏–Ω–≥ –ø–æ –∫–æ–¥—É -> fallback
            departure_city = None
            if search_params and search_params.get("departure"):
                departure_city = get_city_name_by_code(search_params["departure"])
            elif hotel.get("departurename"):
                departure_city = safe_get(hotel, "departurename")
            elif tour.get("departurename"):  
                departure_city = safe_get(tour, "departurename")
            elif hotel.get("departurecode"):
                departure_city = get_city_name_by_code(hotel.get("departurecode"))
            elif tour.get("departurecode"):
                departure_city = get_city_name_by_code(tour.get("departurecode"))
            else:
                departure_city = "–ú–æ—Å–∫–≤–∞"  # Fallback

           # –°–ª–æ–≤–∞—Ä—å —Å–∫–ª–æ–Ω–µ–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
            declensions = {
                "–ú–æ—Å–∫–≤–∞": "–∏–∑ –ú–æ—Å–∫–≤—ã",
                "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "–∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞", 
                "–ü–µ—Ä–º—å": "–∏–∑ –ü–µ—Ä–º–∏",
                "–°–∞—Ä–∞—Ç–æ–≤": "–∏–∑ –°–∞—Ä–∞—Ç–æ–≤–∞",
                "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞",
                "–ö–∞–∑–∞–Ω—å": "–∏–∑ –ö–∞–∑–∞–Ω–∏",
                "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "–∏–∑ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞",
                "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "–∏–∑ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞",
                "–ß–µ–ª—è–±–∏–Ω—Å–∫": "–∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞",
                "–°–∞–º–∞—Ä–∞": "–∏–∑ –°–∞–º–∞—Ä—ã",
                "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "–∏–∑ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É",
                "–£—Ñ–∞": "–∏–∑ –£—Ñ—ã",
                "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "–∏–∑ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞",
                "–í–æ—Ä–æ–Ω–µ–∂": "–∏–∑ –í–æ—Ä–æ–Ω–µ–∂–∞",
                "–í–æ–ª–≥–æ–≥—Ä–∞–¥": "–∏–∑ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞"
            }
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –≥–æ—Ä–æ–¥ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–¥–µ–∂—É
            if departure_city in declensions:
                departure_city = declensions[departure_city]
            elif not departure_city.startswith("–∏–∑ "):
                departure_city = f"–∏–∑ {departure_city}"

            
            # –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï seadistance
            # seadistance –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è, –Ω–µ —Ç—É—Ä–∞
            seadistance = (
                safe_get(hotel, "seadistance", 0, int) or 
                safe_get(tour, "seadistance", 0, int) or
                random.choice([50, 100, 150, 200, 300, 500])  # –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            )
            
            tour_data = {
                "hotel_name": safe_get(hotel, "hotelname"),
                "hotel_stars": safe_get(hotel, "hotelstars", 0, int),
                "hotel_rating": safe_get(hotel, "hotelrating", 0, float),
                "country_name": safe_get(hotel, "countryname"),
                "region_name": safe_get(hotel, "regionname"),
                "price": safe_get(tour, "price", 0, lambda x: int(float(x))),
                "nights": safe_get(tour, "nights", 7, int),
                "operator_name": safe_get(tour, "operatorname"),
                "fly_date": safe_get(tour, "flydate"),
                "meal": safe_get(tour, "mealrussian", safe_get(tour, "meal")),
                "placement": safe_get(tour, "placement"),
                "tour_name": safe_get(tour, "tourname"),
                "currency": safe_get(tour, "currency", "RUB"),
                "adults": safe_get(tour, "adults", 2, int),
                "children": safe_get(tour, "child", 0, int),
                "generation_strategy": "search",
                "hotel_type": hotel_type,
                "picture_link": safe_get(hotel, "picturelink"),
                "search_source": "api_search_with_filter",
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–û–õ–Ø:
                "departure": departure_city,  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
                "seadistance": seadistance,   # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–æ—Ä—è –∏–∑ –æ—Ç–µ–ª—è
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "departurename": departure_city,  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
                "departurecode": str(search_params.get("departure", 1)) if search_params else "1",
                "departurenamefrom": f"–∏–∑ {departure_city}",
                "countrycode": str(safe_get(hotel, "countrycode", search_params.get("country", 1) if search_params else 1)),
                "countryname": safe_get(hotel, "countryname"),
                "operatorcode": safe_get(tour, "operatorcode", ""),
                "hotelcode": safe_get(hotel, "hotelcode", ""),
                "hotelregioncode": safe_get(hotel, "regioncode", ""),
                "hotelregionname": safe_get(hotel, "regionname"),
                "hotelpicture": safe_get(hotel, "picturelink"),
                "fulldesclink": safe_get(hotel, "fulldesclink"),
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not tour_data["hotel_name"] or tour_data["price"] <= 0:
                return None
            
            return tour_data
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞: {e}")
            return None
    async def _extract_tours_from_hot_tours(self, hot_tours_data: Dict, limit: int, hotel_type: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –∏–∑ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤"""
        try:
            tours = []
            tours_data = hot_tours_data.get("data", [])
            
            for tour_item in tours_data[:limit]:
                try:
                    tour_data = {
                        "hotel_name": tour_item.get("hotelname", ""),
                        "hotel_stars": int(tour_item.get("stars", 0)),
                        "hotel_rating": float(tour_item.get("rating", 0)),
                        "country_name": tour_item.get("countryname", ""),
                        "region_name": tour_item.get("regionname", ""),
                        "price": int(tour_item.get("price", 0)),
                        "nights": int(tour_item.get("nights", 7)),
                        "operator_name": tour_item.get("operatorname", ""),
                        "fly_date": tour_item.get("dateto", ""),
                        "meal": tour_item.get("meal", ""),
                        "placement": tour_item.get("placement", ""),
                        "tour_name": tour_item.get("tourname", ""),
                        "currency": "RUB",
                        "adults": 2,
                        "children": 0,
                        "generation_strategy": "hot_tours",
                        "hotel_type": hotel_type,
                        "picture_link": tour_item.get("picture", ""),
                        "search_source": "hot_tours"
                    }
                    
                    if tour_data["price"] > 0 and tour_data["hotel_name"]:
                        tours.append(tour_data)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ä—è—â–µ–≥–æ —Ç—É—Ä–∞: {e}")
                    continue
            
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}: {e}")
            return []
    
    async def _generate_mock_tours(self, count: int, hotel_type_key: str, hotel_type_display: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–µ–ª—è"""
        try:
            tours = []
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock —Ç—É—Ä–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏
            mock_data_by_type = {
                "any": {
                    "hotels": ["Sunset Resort", "Ocean View Hotel", "Paradise Beach", "Golden Sands"],
                    "price_range": (25000, 80000),
                    "regions": ["–•—É—Ä–≥–∞–¥–∞", "–ê–Ω—Ç–∞–ª—å—è", "–ü—Ö—É–∫–µ—Ç", "–î—É–±–∞–π"]
                },
                "active": {
                    "hotels": ["Adventure Resort", "Active Sports Hotel", "Mountain View Resort", "Extreme Hotel"],
                    "price_range": (30000, 90000),
                    "regions": ["–ê–Ω—Ç–∞–ª—å—è", "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞", "–ë—É–∫–æ–≤–µ–ª—å", "–ê–ª—å–ø—ã"]
                },
                "relax": {
                    "hotels": ["Spa Resort", "Wellness Hotel", "Zen Garden Resort", "Tranquil Waters"],
                    "price_range": (40000, 120000),
                    "regions": ["–ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã", "–ë–∞–¥–µ–Ω-–ë–∞–¥–µ–Ω", "–ú–∞—Ä–∏–µ–Ω–±–∞–¥", "–¢–µ—Ä–º–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"]
                },
                "family": {
                    "hotels": ["Family Resort", "Kids Club Hotel", "Happy Family Resort", "Children Paradise"],
                    "price_range": (35000, 95000),
                    "regions": ["–ê–Ω—Ç–∞–ª—å—è", "–ö—Ä–∏—Ç", "–ö–∏–ø—Ä", "–ë–æ–ª–≥–∞—Ä–∏—è"]
                },
                "health": {
                    "hotels": ["Health Resort", "Medical Spa", "Healing Waters Resort", "Wellness Center"],
                    "price_range": (50000, 150000),
                    "regions": ["–ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã", "–ñ–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫", "–ï—Å—Å–µ–Ω—Ç—É–∫–∏", "–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫"]
                },
                "city": {
                    "hotels": ["City Hotel", "Metropolitan Resort", "Urban Oasis", "Downtown Hotel"],
                    "price_range": (20000, 70000),
                    "regions": ["–°—Ç–∞–º–±—É–ª", "–î—É–±–∞–π", "–ë–∞–Ω–≥–∫–æ–∫", "–°–∏–Ω–≥–∞–ø—É—Ä"]
                },
                "beach": {
                    "hotels": ["Beach Resort", "Seaside Hotel", "Ocean Paradise", "Tropical Beach"],
                    "price_range": (30000, 100000),
                    "regions": ["–•—É—Ä–≥–∞–¥–∞", "–ü—Ö—É–∫–µ—Ç", "–ú–∞–ª—å–¥–∏–≤—ã", "–ë–∞–ª–∏"]
                },
                "deluxe": {
                    "hotels": ["Luxury Resort", "Premium Hotel", "Elite Resort", "VIP Paradise"],
                    "price_range": (80000, 250000),
                    "regions": ["–ú–∞–ª—å–¥–∏–≤—ã", "–°–µ–π—à–µ–ª—ã", "–°–µ–Ω—Ç-–ë–∞—Ä—Ç", "–ú–æ–Ω–∞–∫–æ"]
                }
            }

            mock_config = mock_data_by_type.get(hotel_type_key, mock_data_by_type["any"])
            
            for i in range(count):
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
                hotel_name = random.choice(mock_config["hotels"])
                price = random.randint(mock_config["price_range"][0], mock_config["price_range"][1])
                region = random.choice(mock_config["regions"])
                nights = random.choice([7, 10, 14])
                stars = random.choice([3, 4, 5])
                
                tour_data = {
                    "hotel_name": f"{hotel_name} {i+1}",
                    "hotel_stars": stars,
                    "hotel_rating": round(random.uniform(3.0, 5.0), 1),
                    "country_name": "–†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã",
                    "region_name": region,
                    "price": price,
                    "nights": nights,
                    "operator_name": random.choice(["Sunmar", "Coral Travel", "Pegas", "TUI"]),
                    "fly_date": (datetime.now() + timedelta(days=random.randint(7, 30))).strftime("%d.%m.%Y"),
                    "meal": random.choice(["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", "–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω", "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ"]),
                    "placement": "DBL",
                    "tour_name": f"–¢—É—Ä –≤ {region}",
                    "currency": "RUB",
                    "adults": 2,
                    "children": 0,
                    "generation_strategy": "mock",
                    "hotel_type": hotel_type_display,
                    "picture_link": f"/static/mockup_images/hotel_{hotel_type_key}_{i+1}.jpg",
                    "search_source": "mock_generation",
                    "mock_type": hotel_type_key
                }
                
                tours.append(tour_data)
            
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_display}: {e}")
            return []
    
    # API –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    async def force_update_now(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å (–¥–ª—è API)"""
        logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        try:
            await self._run_update_cycle()
            return {
                "success": True,
                "message": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "stats": self.update_stats
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"
            }
    
    async def get_update_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è API)"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à–∞
            cached_stats = await cache_service.get("random_tours_cache_update_stats")
            
            if cached_stats:
                # –î–æ–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                status = {
                    "is_running": self.is_running,
                    "last_update": cached_stats.get("end_time"),
                    "next_update": None,
                    "current_hotel_type": self.current_hotel_type,
                    "update_stats": cached_stats,
                    "hotel_types_supported": list(self.hotel_types_mapping.keys()),
                    "api_integration": {
                        "uses_hoteltypes_filter": True,
                        "supported_api_params": [info["api_param"] for info in self.hotel_types_mapping.values() if info["api_param"]]
                    }
                }
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if self.last_update:
                    next_update = self.last_update + timedelta(seconds=self.update_interval)
                    status["next_update"] = next_update
                    status["time_until_next_update_hours"] = max(0, (next_update - datetime.now()).total_seconds() / 3600)
                
                return status
            else:
                return {
                    "is_running": self.is_running,
                    "last_update": self.last_update,
                    "next_update": None,
                    "current_hotel_type": self.current_hotel_type,
                    "update_stats": None,
                    "message": "–ï—â–µ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
                    "hotel_types_supported": list(self.hotel_types_mapping.keys())
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "error": str(e),
                "is_running": self.is_running
            }
    
    async def clear_all_cache(self) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        try:
            logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
            
            hotel_types = list(self.hotel_types_mapping.keys())
            cleared_count = 0
            
            for hotel_type_key in hotel_types:
                cache_key_suffix = self.hotel_types_mapping[hotel_type_key]["cache_key"]
                cache_key = f"random_tours_{cache_key_suffix}"
                try:
                    await cache_service.delete(cache_key)
                    cleared_count += 1
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á {cache_key}: {e}")
            
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –æ–±—â–∏–π –∫—ç—à —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
            general_keys = ["random_tours", "random_tours_stats", "random_tours_cache_update_stats"]
            for key in general_keys:
                try:
                    await cache_service.delete(key)
                    cleared_count += 1
                except:
                    pass
            
            return {
                "success": True,
                "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∫–ª—é—á–µ–π –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
                "cleared_keys": cleared_count,
                "cleared_hotel_types": hotel_types
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def get_cache_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        try:
            hotel_types = list(self.hotel_types_mapping.keys())
            cached_types = 0
            total_tours = 0
            
            cache_details = {}
            
            for hotel_type_key in hotel_types:
                hotel_type_info = self.hotel_types_mapping[hotel_type_key]
                display_name = hotel_type_info["display_name"]
                cache_key_suffix = hotel_type_info["cache_key"]
                cache_key = f"random_tours_{cache_key_suffix}"
                
                try:
                    cached_tours = await cache_service.get(cache_key)
                    if cached_tours:
                        cached_types += 1
                        total_tours += len(cached_tours)
                        
                        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
                        real_tours = len([t for t in cached_tours if t.get("generation_strategy") in ["search", "hot_tours"]])
                        
                        cache_details[display_name] = {
                            "cached": True,
                            "tours_count": len(cached_tours),
                            "real_tours": real_tours,
                            "quality": f"{(real_tours/len(cached_tours)*100):.1f}%" if cached_tours else "0%",
                            "api_param": hotel_type_info["api_param"],
                            "cache_key": cache_key
                        }
                    else:
                        cache_details[display_name] = {
                            "cached": False,
                            "tours_count": 0,
                            "api_param": hotel_type_info["api_param"],
                            "cache_key": cache_key
                        }
                except Exception as e:
                    cache_details[display_name] = {
                        "cached": False,
                        "error": str(e),
                        "api_param": hotel_type_info["api_param"]
                    }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
            coverage = (cached_types / len(hotel_types)) * 100
            
            if coverage >= 80:
                health_status = "good"
            elif coverage >= 50:
                health_status = "warning"
            else:
                health_status = "poor"
            
            return {
                "health_status": health_status,
                "coverage_percentage": f"{coverage:.1f}%",
                "cached_hotel_types": cached_types,
                "total_hotel_types": len(hotel_types),
                "total_tours_cached": total_tours,
                "cache_details": cache_details,
                "api_integration": {
                    "hoteltypes_filter_enabled": True,
                    "supported_api_filters": [info["api_param"] for info in self.hotel_types_mapping.values() if info["api_param"]]
                },
                "recommendations": [
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /api/v1/random-tours/cache/force-update" if coverage < 80 else None,
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: GET /api/v1/random-tours/cache/status" if not self.is_running else None
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "health_status": "error",
                "error": str(e)
            }
    
    def get_supported_hotel_types(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π"""
        return {
            "hotel_types": {
                key: {
                    "display_name": info["display_name"],
                    "api_param": info["api_param"],
                    "cache_key": info["cache_key"]
                }
                for key, info in self.hotel_types_mapping.items()
            },
            "api_integration": {
                "tourvisor_hoteltypes_field": "hoteltypes",
                "supported_values": [info["api_param"] for info in self.hotel_types_mapping.values() if info["api_param"]],
                "documentation": "https://tourvisor.ru/xml/ - –ø–æ–ª–µ hoteltypes –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
            }
        }
    
    async def debug_search_extraction(self, hotel_type_key: str) -> Dict[str, Any]:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤"""
        try:
            from app.core.tourvisor_client import tourvisor_client
            from datetime import datetime, timedelta
            
            logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_key}")
            
            hotel_type_info = self.hotel_types_mapping[hotel_type_key]
            api_param = hotel_type_info["api_param"]
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
            tomorrow = datetime.now() + timedelta(days=1)
            week_later = datetime.now() + timedelta(days=8)
            
            search_params = {
                "departure": 1,
                "country": 4,  # –¢—É—Ä—Ü–∏—è - –¥–æ–ª–∂–Ω–∞ –¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                "datefrom": tomorrow.strftime("%d.%m.%Y"),
                "dateto": week_later.strftime("%d.%m.%Y"),
                "nightsfrom": 7,
                "nightsto": 10,
                "adults": 2,
                "format": "json",  # JSON –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                "onpage": 10
            }
            
            if api_param:
                search_params["hoteltypes"] = api_param
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
            request_id = await tourvisor_client.search_tours(search_params)
            logger.info(f"üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω: {request_id}")
            
            # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(15)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            search_results = await tourvisor_client.get_search_results(request_id)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_analysis = {
                "request_id": request_id,
                "search_params": search_params,
                "top_level_keys": list(search_results.keys()),
                "has_data": "data" in search_results,
                "data_type": type(search_results.get("data")).__name__ if "data" in search_results else None,
                "all_keys_recursive": list(self._get_all_keys_recursive(search_results))
            }
            
            if "data" in search_results:
                data = search_results["data"]
                if isinstance(data, dict):
                    structure_analysis["data_keys"] = list(data.keys())
                    
                    if "result" in data:
                        result = data["result"]
                        structure_analysis["result_type"] = type(result).__name__
                        if isinstance(result, dict):
                            structure_analysis["result_keys"] = list(result.keys())
                            if "hotel" in result:
                                hotels = result["hotel"]
                                structure_analysis["hotels_count"] = len(hotels) if isinstance(hotels, list) else (1 if hotels else 0)
                                structure_analysis["hotels_type"] = type(hotels).__name__
                                
                                # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è
                                if hotels:
                                    first_hotel = hotels[0] if isinstance(hotels, list) else hotels
                                    structure_analysis["first_hotel_keys"] = list(first_hotel.keys()) if isinstance(first_hotel, dict) else "not_dict"
                                    structure_analysis["first_hotel_sample"] = str(first_hotel)[:500] if isinstance(first_hotel, dict) else str(first_hotel)
            
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç—É—Ä—ã
            extracted_tours = await self._extract_tours_from_search_results(search_results, 5, hotel_type_key)
            
            return {
                "success": True,
                "hotel_type": hotel_type_key,
                "api_param": api_param,
                "structure_analysis": structure_analysis,
                "extracted_tours_count": len(extracted_tours),
                "extracted_tours": extracted_tours[:2] if extracted_tours else [],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ç—É—Ä–∞
                "raw_results_sample": json.dumps(search_results, ensure_ascii=False, indent=2)[:2000]
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "traceback": traceback.format_exc()
            }
    

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
random_tours_cache_update_service = RandomToursCacheUpdateService()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def start_random_tours_cache_update_task():
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –≤ —Ñ–æ–Ω–µ"""
    logger.info("üé≤ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
    await random_tours_cache_update_service.start_scheduler()

async def stop_random_tours_cache_update_task():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    await random_tours_cache_update_service.stop_scheduler()