import asyncio
from typing import List

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.config import settings
from app.models.tour import HotTourInfo
from app.services.tour_service import tour_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class RandomToursService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
    
    def __init__(self):
        self.countries = settings.POPULAR_COUNTRIES.copy()
        self.cities = settings.DEPARTURE_CITIES.copy()
        self.target_count = settings.RANDOM_TOURS_COUNT
    
    async def update_random_tours(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
        logger.info("üîÑ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥)
            logger.info("üî• –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã...")
            hot_tours = await self._try_get_hot_tours()
            
            if hot_tours:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(hot_tours)} –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤")
                # –ö—ç—à–∏—Ä—É–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã
                await cache_service.set(
                    "random_tours_from_search",
                    [tour.dict() for tour in hot_tours],
                    ttl=settings.POPULAR_TOURS_CACHE_TTL
                )
            else:
                logger.info("‚ÑπÔ∏è –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                logger.info("üîç –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
                random_tours = await tour_service._generate_random_tours_via_search(self.target_count)
                
                if random_tours:
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(random_tours)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
                    
                    # Fallback: —Å–æ–∑–¥–∞–µ–º mock-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                    logger.info("üé≠ –°–æ–∑–¥–∞–µ–º fallback mock-–¥–∞–Ω–Ω—ã–µ...")
                    await self._create_fallback_mock_data()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º mock-–¥–∞–Ω–Ω—ã–µ
            await self._create_fallback_mock_data()
    
    async def _try_get_hot_tours(self) -> List[HotTourInfo]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        all_hot_tours = []
        
        for city in self.cities:
            try:
                logger.info(f"üî• –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
                
                hot_tours_data = await tourvisor_client.get_hot_tours(
                    city=city,
                    items=20
                )
                
                hot_count = hot_tours_data.get("hotcount", 0)
                tours_list = hot_tours_data.get("hottours", [])
                
                logger.info(f"üî• –ì–æ—Ä–æ–¥ {city}: –Ω–∞–π–¥–µ–Ω–æ {hot_count} –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤")
                
                if tours_list:
                    for tour_data in tours_list:
                        try:
                            hot_tour = HotTourInfo(**tour_data)
                            all_hot_tours.append(hot_tour)
                        except Exception as tour_error:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ç—É—Ä–∞: {tour_error}")
                            continue
                
                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—É—Ä–æ–≤
                if len(all_hot_tours) >= self.target_count:
                    break
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
                continue
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤
        return all_hot_tours[:self.target_count]
    
    async def _create_fallback_mock_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            logger.info("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-–¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            try:
                countries_data = await tourvisor_client.get_references("country")
                departures_data = await tourvisor_client.get_references("departure")
                
                countries_list = countries_data.get("lists", {}).get("countries", {}).get("country", [])
                departures_list = departures_data.get("lists", {}).get("departures", {}).get("departure", [])
                
                if not countries_list:
                    countries_list = countries_data.get("country", [])
                if not departures_list:
                    departures_list = departures_data.get("departure", [])
                    
            except Exception as ref_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {ref_error}")
                countries_list = []
                departures_list = []
            
            mock_tours = []
            popular_countries = ["–ï–≥–∏–ø–µ—Ç", "–¢—É—Ä—Ü–∏—è", "–¢–∞–∏–ª–∞–Ω–¥", "–û–ê–≠", "–ì—Ä–µ—Ü–∏—è", "–ö–∏–ø—Ä"]
            
            for i, country_name in enumerate(popular_countries[:self.target_count]):
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
                country_code = None
                for country in countries_list:
                    if isinstance(country, dict) and country.get("name") == country_name:
                        country_code = country.get("id")
                        break
                
                city_data = {}
                if departures_list and i < len(departures_list):
                    city_data = departures_list[i] if isinstance(departures_list[i], dict) else {}
                
                import random
                base_price = 40000 + (i * 15000) + random.randint(-8000, 20000)
                
                mock_tour_data = {
                    "countrycode": str(country_code or (i + 1)),
                    "countryname": country_name,
                    "departurecode": str(city_data.get("id", i + 1)),
                    "departurename": city_data.get("name", f"–ì–æ—Ä–æ–¥ {i+1}"),
                    "departurenamefrom": city_data.get("namefrom", f"–ì–æ—Ä–æ–¥–∞ {i+1}"),
                    "operatorcode": str(10 + i),
                    "operatorname": f"TourOperator {i+1}",
                    "hotelcode": str(200 + i),
                    "hotelname": f"RESORT {country_name.upper()} {i+1}",
                    "hotelstars": 3 + (i % 3),
                    "hotelregioncode": str(100 + i),
                    "hotelregionname": f"–ö—É—Ä–æ—Ä—Ç {country_name}",
                    "hotelpicture": f"https://via.placeholder.com/250x150/{'4a90e2' if i % 2 == 0 else 'e74c3c'}/ffffff?text=Resort+{i+1}",
                    "fulldesclink": f"https://example.com/hotel/{200+i}",
                    "flydate": f"{15 + i}.07.2025",
                    "nights": 7 + (i % 7),
                    "meal": ["All Inclusive", "Ultra All Inclusive", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω"][i % 3],
                    "price": float(base_price),
                    "priceold": float(base_price + random.randint(5000, 12000)),
                    "currency": "RUB"
                }
                
                try:
                    hot_tour = HotTourInfo(**mock_tour_data)
                    mock_tours.append(hot_tour)
                except Exception as mock_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mock —Ç—É—Ä–∞ {i}: {mock_error}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mock-–¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            if mock_tours:
                await cache_service.set(
                    "random_tours_from_search",
                    [tour.dict() for tour in mock_tours],
                    ttl=settings.POPULAR_TOURS_CACHE_TTL
                )
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {len(mock_tours)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-—Ç—É—Ä–æ–≤")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ mock —Ç—É—Ä–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def update_random_tours():
    """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    service = RandomToursService()
    
    try:
        # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await service.update_random_tours()
        
        while True:
            try:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (24 —á–∞—Å–∞)
                logger.info("üò¥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–æ–≤ (24 —á–∞—Å–∞)")
                await asyncio.sleep(86400)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã
                await service.update_random_tours()
                
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                logger.info("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º")
                await asyncio.sleep(3600)
                
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã mock –¥–∞–Ω–Ω—ã–µ
        try:
            await service._create_fallback_mock_data()
        except:
            logger.error("üíÄ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ mock –¥–∞–Ω–Ω—ã–µ")