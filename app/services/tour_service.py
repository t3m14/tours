import asyncio
import json
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import random

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.models.tour import (
    TourSearchRequest, SearchResponse, SearchResult, SearchStatus,
    HotelInfo, TourInfo, RandomTourRequest, DirectionInfo, HotTourInfo,
    TourActualizationRequest, DetailedTourInfo
)
from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class TourService:
    def __init__(self):
        self.cache = cache_service
        
    async def search_tours(self, search_request: TourSearchRequest) -> SearchResponse:
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è TourVisor API
            search_params = search_request.dict(exclude_none=True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if not search_params.get("datefrom"):
                tomorrow = datetime.now() + timedelta(days=1)
                search_params["datefrom"] = tomorrow.strftime("%d.%m.%Y")
            
            if not search_params.get("dateto"):
                week_later = datetime.now() + timedelta(days=8)
                search_params["dateto"] = week_later.strftime("%d.%m.%Y")
            
            request_id = await tourvisor_client.search_tours(search_params)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            await self.cache.set(
                f"search_params:{request_id}",
                search_params,
                ttl=7200  # 2 —á–∞—Å–∞
            )
            
            return SearchResponse(request_id=request_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
            raise
    
    async def get_search_status(self, request_id: str) -> SearchStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            result = await tourvisor_client.get_search_status(request_id)
            status_data = result.get("data", {}).get("status", {})
            
            return SearchStatus(
                state=status_data.get("state", "searching"),
                hotelsfound=int(status_data.get("hotelsfound", 0)),
                toursfound=int(status_data.get("toursfound", 0)),
                minprice=float(status_data.get("minprice", 0)) if status_data.get("minprice") else None,
                progress=int(status_data.get("progress", 0)),
                timepassed=int(status_data.get("timepassed", 0))
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞: {e}")
            raise
    
    async def get_search_results(self, request_id: str, page: int = 1, onpage: int = 25) -> SearchResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            result = await tourvisor_client.get_search_results(request_id, page, onpage)
            data = result.get("data", {})
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            status_data = data.get("status", {})
            status = SearchStatus(
                state=status_data.get("state", "searching"),
                hotelsfound=int(status_data.get("hotelsfound", 0)),
                toursfound=int(status_data.get("toursfound", 0)),
                minprice=float(status_data.get("minprice", 0)) if status_data.get("minprice") else None,
                progress=int(status_data.get("progress", 0)),
                timepassed=int(status_data.get("timepassed", 0))
            )
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            hotels = []
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            for hotel_data in hotel_list:
                tours = []
                tour_list = hotel_data.get("tours", {}).get("tour", [])
                
                if not isinstance(tour_list, list):
                    tour_list = [tour_list] if tour_list else []
                
                for tour_data in tour_list:
                    tour = TourInfo(**tour_data)
                    tours.append(tour)
                
                hotel = HotelInfo(
                    **{k: v for k, v in hotel_data.items() if k != "tours"},
                    tours=tours
                )
                hotels.append(hotel)
            
            return SearchResult(status=status, result=hotels)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            raise
    
    async def continue_search(self, request_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            return await tourvisor_client.continue_search(request_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            raise
    
    async def get_random_tours(self, request: RandomTourRequest) -> List[HotTourInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
        cache_key = "random_tours_from_search"
        
        logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, count={request.count}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        try:
            cached_tours = await self.cache.get(cache_key)
            logger.info(f"üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞: –Ω–∞–π–¥–µ–Ω–æ {len(cached_tours) if cached_tours else 0} —Ç—É—Ä–æ–≤")
            
            if cached_tours:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
                tours_list = []
                for tour_data in cached_tours[:request.count]:
                    try:
                        tour = HotTourInfo(**tour_data)
                        tours_list.append(tour)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Ç—É—Ä–∞ –∏–∑ –∫—ç—à–∞: {e}")
                        continue
                
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(tours_list)} —Ç—É—Ä–æ–≤ –∏–∑ –∫—ç—à–∞")
                return tours_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º: {e}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        logger.info("üîÑ –ö—ç—à –ø—É—Å—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        return await self._generate_random_tours_via_search(request.count)
    
    async def _generate_random_tours_via_search(self, count: int) -> List[HotTourInfo]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
        logger.info(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ì–ï–ù–ï–†–ê–¶–ò–Æ {count} –¢–£–†–û–í –ß–ï–†–ï–ó –ü–û–ò–°–ö")
        
        try:
            random_tours = []
            countries = settings.POPULAR_COUNTRIES.copy()
            cities = settings.DEPARTURE_CITIES.copy()
            
            logger.info(f"üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: {countries}")
            logger.info(f"üèôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {cities}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            search_variants = self._create_search_variants(countries, cities, count)
            logger.info(f"üîç –°–æ–∑–¥–∞–Ω–æ {len(search_variants)} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            
            for i, search_params in enumerate(search_variants):
                if len(random_tours) >= count:
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ ({count})")
                    break
                
                try:
                    logger.info(f"üì° –ü–æ–∏—Å–∫ {i+1}/{len(search_variants)}: {search_params['country']} –∏–∑ –≥–æ—Ä–æ–¥–∞ {search_params['departure']}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                    request_id = await tourvisor_client.search_tours(search_params)
                    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
                    tour_found = await self._wait_and_get_tour_from_search(request_id, search_params)
                    
                    if tour_found:
                        random_tours.append(tour_found)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—É—Ä {len(random_tours)}: {tour_found.hotelname} –≤ {tour_found.countryname}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}: {e}")
                    continue
            
            logger.info(f"üèÅ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê. –ü–æ–ª—É—á–µ–Ω–æ —Ç—É—Ä–æ–≤: {len(random_tours)}")
            
            if random_tours:
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    await self.cache.set(
                        "random_tours_from_search",
                        [tour.dict() for tour in random_tours],
                        ttl=settings.POPULAR_TOURS_CACHE_TTL
                    )
                    logger.info(f"üíæ –¢—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                except Exception as cache_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {cache_error}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
            
            return random_tours
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤: {e}")
            return []
    
    def _create_search_variants(self, countries: List[int], cities: List[int], count: int) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        variants = []
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞—Ç—ã
        base_dates = [
            (7, 14),   # —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –Ω–∞ –Ω–µ–¥–µ–ª—é
            (14, 21),  # —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é  
            (21, 28),  # —á–µ—Ä–µ–∑ 3 –Ω–µ–¥–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
        ]
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ—á–µ–π
        nights_variants = [
            (7, 10),   # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–ø—É—Å–∫
            (10, 14),  # –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫
            (3, 7),    # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–ø—É—Å–∫
        ]
        
        for i in range(count * 2):  # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ–º –Ω—É–∂–Ω–æ
            country = random.choice(countries)
            city = random.choice(cities)
            date_variant = random.choice(base_dates)
            nights_variant = random.choice(nights_variants)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã
            start_offset, end_offset = date_variant
            start_date = datetime.now() + timedelta(days=start_offset)
            end_date = datetime.now() + timedelta(days=end_offset)
            
            variant = {
                "departure": city,
                "country": country,
                "datefrom": start_date.strftime("%d.%m.%Y"),
                "dateto": end_date.strftime("%d.%m.%Y"),
                "nightsfrom": nights_variant[0],
                "nightsto": nights_variant[1],
                "adults": random.choice([2, 2, 2, 4]),  # —á–∞—â–µ 2 –≤–∑—Ä–æ—Å–ª—ã—Ö
                "child": random.choice([0, 0, 0, 1, 2]),  # —á–∞—â–µ –±–µ–∑ –¥–µ—Ç–µ–π
                "stars": random.choice([3, 4, 5]),  # —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–µ–ª–∏
            }
            
            variants.append(variant)
        
        return variants
    
    async def _wait_and_get_tour_from_search(self, request_id: str, search_params: Dict[str, Any]) -> Optional[HotTourInfo]:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞"""
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 30 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—â–µ
            max_attempts = 30
            for attempt in range(max_attempts):
                await asyncio.sleep(1)
                
                try:
                    status_result = await tourvisor_client.get_search_status(request_id)
                    status_data = status_result.get("data", {}).get("status", {})
                    state = status_data.get("state", "searching")
                    progress = status_data.get("progress", 0)
                    hotels_found = status_data.get("hotelsfound", 0)
                    
                    logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}: —Å—Ç–∞—Ç—É—Å = {state}, –ø—Ä–æ–≥—Ä–µ—Å—Å = {progress}%, –æ—Ç–µ–ª–µ–π = {hotels_found}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–µ–ª–∏ –∏–ª–∏ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                    if state == "finished" or (progress >= 50 and hotels_found > 0):
                        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –≥–æ—Ç–æ–≤: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state}, –ø—Ä–æ–≥—Ä–µ—Å—Å={progress}%, –æ—Ç–µ–ª–µ–π={hotels_found}")
                        break
                        
                except Exception as status_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {attempt+1}: {status_error}")
                    continue
            else:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ {request_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                try:
                    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                    results = await tourvisor_client.get_search_results(request_id, 1, 5)
                    data = results.get("data", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
                    status_data = data.get("status", {})
                    hotels_found = status_data.get("hotelsfound", 0)
                    
                    if hotels_found > 0:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {hotels_found} –æ—Ç–µ–ª–µ–π")
                    else:
                        logger.warning("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ")
                        return None
                        
                except Exception as partial_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {partial_error}")
                    return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            try:
                results = await tourvisor_client.get_search_results(request_id, 1, 10)
                data = results.get("data", {})
                result_data = data.get("result", {})
                hotel_list = result_data.get("hotel", [])
                
                if not isinstance(hotel_list, list):
                    hotel_list = [hotel_list] if hotel_list else []
                
                if not hotel_list:
                    logger.debug(f"üì≠ –ù–µ—Ç –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                    return None
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–µ–ª—å
                random_hotel = random.choice(hotel_list)
                tours_data = random_hotel.get("tours", {}).get("tour", [])
                
                if not isinstance(tours_data, list):
                    tours_data = [tours_data] if tours_data else []
                
                if not tours_data:
                    logger.debug(f"üì≠ –ù–µ—Ç —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ")
                    return None
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—É—Ä
                random_tour_data = random.choice(tours_data)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç HotTourInfo
                hot_tour_data = self._convert_search_result_to_hot_tour(
                    random_hotel, random_tour_data, search_params
                )
                
                return HotTourInfo(**hot_tour_data)
                
            except Exception as results_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_error}")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞ –∏–∑ –ø–æ–∏—Å–∫–∞: {e}")
            return None
    
    def _convert_search_result_to_hot_tour(self, hotel_data: Dict, tour_data: Dict, search_params: Dict) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç HotTourInfo"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
        country_name = self._get_country_name(search_params["country"])
        city_name = self._get_city_name(search_params["departure"])
        
        return {
            "countrycode": str(search_params["country"]),
            "countryname": country_name,
            "departurecode": str(search_params["departure"]),
            "departurename": city_name,
            "departurenamefrom": self._get_city_name_from(search_params["departure"]),
            "operatorcode": tour_data.get("operatorcode", ""),
            "operatorname": tour_data.get("operatorname", ""),
            "hotelcode": hotel_data.get("hotelcode", ""),
            "hotelname": hotel_data.get("hotelname", ""),
            "hotelstars": hotel_data.get("hotelstars", 3),
            "hotelregioncode": hotel_data.get("regioncode", ""),
            "hotelregionname": hotel_data.get("regionname", ""),
            "hotelpicture": hotel_data.get("picturelink", ""),
            "fulldesclink": hotel_data.get("fulldesclink", ""),
            "flydate": tour_data.get("flydate", ""),
            "nights": tour_data.get("nights", 7),
            "meal": tour_data.get("mealrussian", tour_data.get("meal", "")),
            "price": float(tour_data.get("price", 0)),
            "priceold": None,  # –í –æ–±—ã—á–Ω–æ–º –ø–æ–∏—Å–∫–µ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã
            "currency": tour_data.get("currency", "RUB")
        }
    
    def _get_country_name(self, country_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É"""
        country_map = {
            1: "–ï–≥–∏–ø–µ—Ç",
            4: "–¢—É—Ä—Ü–∏—è", 
            22: "–¢–∞–∏–ª–∞–Ω–¥",
            8: "–ì—Ä–µ—Ü–∏—è",
            15: "–û–ê–≠",
            35: "–ú–∞–ª—å–¥–∏–≤—ã"
        }
        return country_map.get(country_code, f"–°—Ç—Ä–∞–Ω–∞ {country_code}")
    
    def _get_city_name(self, city_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–¥—É"""
        city_map = {
            1: "–ú–æ—Å–∫–≤–∞",
            2: "–ü–µ—Ä–º—å", 
            3: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            4: "–£—Ñ–∞",
            5: "–°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        }
        return city_map.get(city_code, f"–ì–æ—Ä–æ–¥ {city_code}")
    
    def _get_city_name_from(self, city_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ"""
        city_map = {
            1: "–ú–æ—Å–∫–≤—ã",
            2: "–ü–µ—Ä–º–∏",
            3: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞", 
            4: "–£—Ñ—ã",
            5: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞"
        }
        return city_map.get(city_code, f"–ì–æ—Ä–æ–¥–∞ {city_code}")

    async def get_directions_with_prices(self) -> List[DirectionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
        cache_key = "directions_with_prices_search"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_directions = await self.cache.get(cache_key)
        if cached_directions:
            return [DirectionInfo(**direction) for direction in cached_directions]
        
        return await self._generate_directions_via_search()
    
    async def _generate_directions_via_search(self) -> List[DirectionInfo]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ü–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
        cache_key = "directions_with_prices_search"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
        try:
            directions = []
            
            # –ë–µ—Ä–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
            popular_countries = settings.POPULAR_COUNTRIES[:6]  # –ü–µ—Ä–≤—ã–µ 6 —Å—Ç—Ä–∞–Ω
            
            for country_code in popular_countries:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                    country_name = self._get_country_name(country_code)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    search_params = {
                        "departure": 1,  # –ú–æ—Å–∫–≤–∞
                        "country": country_code,
                        "datefrom": (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y"),
                        "dateto": (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y"),
                        "nightsfrom": 7,
                        "nightsto": 10,
                        "adults": 2,
                        "child": 0
                    }
                    
                    request_id = await tourvisor_client.search_tours(search_params)
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                    min_price = await self._get_min_price_from_search(request_id)
                    
                    direction = DirectionInfo(
                        name=country_name,
                        image_link=f"https://via.placeholder.com/300x200/4a90e2/ffffff?text={country_name}",
                        min_price=min_price
                    )
                    directions.append(direction)
                    
                    logger.info(f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {country_name}: –º–∏–Ω. —Ü–µ–Ω–∞ {min_price}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country_code}: {e}")
                    continue
            
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 6 —á–∞—Å–æ–≤
            if directions:
                await self.cache.set(
                    cache_key, 
                    [direction.dict() for direction in directions], 
                    ttl=21600
                )
            
            return directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def _get_min_price_from_search(self, request_id: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
        try:
            # –ñ–¥–µ–º –¥–æ 15 —Å–µ–∫—É–Ω–¥
            for attempt in range(15):
                await asyncio.sleep(1)
                
                try:
                    status_result = await tourvisor_client.get_search_status(request_id)
                    status_data = status_result.get("data", {}).get("status", {})
                    
                    state = status_data.get("state", "searching")
                    min_price = status_data.get("minprice")
                    progress = status_data.get("progress", 0)
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if min_price or state == "finished" or progress >= 50:
                        if min_price:
                            return float(min_price)
                        
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        results = await tourvisor_client.get_search_results(request_id, 1, 5)
                        price = self._extract_min_price_from_results(results)
                        if price < 500000:  # –†–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞
                            return price
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ü–µ–Ω—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            return 50000.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: {e}")
            return 50000.0
    
    def _extract_min_price_from_results(self, results: Dict[str, Any]) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            data = results.get("data", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = data.get("status", {})
            min_price_from_status = status.get("minprice")
            if min_price_from_status:
                return float(min_price_from_status)
            
            # –ò—â–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            prices = []
            for hotel in hotel_list:
                hotel_price = hotel.get("price")
                if hotel_price:
                    prices.append(float(hotel_price))
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã —Ç—É—Ä–æ–≤
                tours = hotel.get("tours", {}).get("tour", [])
                if not isinstance(tours, list):
                    tours = [tours] if tours else []
                
                for tour in tours:
                    tour_price = tour.get("price")
                    if tour_price:
                        prices.append(float(tour_price))
            
            return min(prices) if prices else 50000.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return 50000.0  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞

    async def actualize_tour(self, request: TourActualizationRequest) -> DetailedTourInfo:
        """–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
            basic_info = await tourvisor_client.actualize_tour(
                request.tour_id,
                request.request_check
            )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–µ–π—Å–∞–º–∏
            detailed_info = await tourvisor_client.get_detailed_actualization(
                request.tour_id
            )
            
            return DetailedTourInfo(
                tour=basic_info.get("tour", {}),
                flights=detailed_info.get("flights", []),
                tourinfo=detailed_info.get("tourinfo", {})
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞: {e}")
            raise
    
    async def search_tour_by_id(self, tour_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ ID"""
        try:
            return await self.actualize_tour(
                TourActualizationRequest(tour_id=tour_id, request_check=2)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–∞ –ø–æ ID: {e}")
            return None
    
    async def search_tours_by_hotel_name(self, hotel_name: str, country_code: int) -> List[HotelInfo]:
        """–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π —Å—Ç—Ä–∞–Ω—ã
            hotels_data = await tourvisor_client.get_references(
                "hotel",
                hotcountry=country_code
            )
            
            hotels = hotels_data.get("hotel", [])
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            # –ò—â–µ–º –æ—Ç–µ–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            matching_hotels = [
                hotel for hotel in hotels
                if hotel_name.lower() in hotel.get("name", "").lower()
            ]
            
            if not matching_hotels:
                return []
            
            # –î–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
            results = []
            for hotel in matching_hotels[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                hotel_code = hotel.get("id")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤ —ç—Ç–æ–º –æ—Ç–µ–ª–µ
                search_request = TourSearchRequest(
                    departure=1,  # –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    country=country_code,
                    hotels=str(hotel_code)
                )
                
                search_response = await self.search_tours(search_request)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                for _ in range(15):  # –ú–∞–∫—Å–∏–º—É–º 15 –ø–æ–ø—ã—Ç–æ–∫
                    await asyncio.sleep(2)
                    status = await self.get_search_status(search_response.request_id)
                    if status.state == "finished" or status.progress >= 50:
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                search_results = await self.get_search_results(search_response.request_id)
                if search_results.result:
                    results.extend(search_results.result)
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è: {e}")
            return []

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
tour_service = TourService()