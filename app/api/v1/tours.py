from fastapi import APIRouter, HTTPException, Query
from typing import List, Optional, Dict, Any
import asyncio
import random
from datetime import datetime, timedelta

from app.models.tour import (
    TourSearchRequest, SearchResponse, SearchResult, SearchStatus,
    RandomTourRequest, HotTourInfo, DirectionInfo, TourActualizationRequest,
    DetailedTourInfo, HotelInfo
)
from app.services.tour_service import tour_service
from app.services.random_tours_service import random_tours_service
from app.services.photo_service import photo_service
from app.services.price_service import price_service
from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger
from app.services.specific_tour_service import specific_tour_service
from app.models.tour import FoundTourInfo, SpecificTourSearchRequest, TourSearchError

logger = setup_logger(__name__)
router = APIRouter()

# ========== –û–°–ù–û–í–ù–´–ï ENDPOINTS –ü–û–ò–°–ö–ê –¢–£–†–û–í ==========

@router.post("/search", response_model=SearchResponse)
async def search_tours(search_request: TourSearchRequest):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    try:
        return await tour_service.search_tours(search_request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/status", response_model=SearchStatus)
async def get_search_status(request_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_status(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/results", response_model=SearchResult)
async def get_search_results(
    request_id: str,
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    onpage: int = Query(25, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_results(request_id, page, onpage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search/{request_id}/continue")
async def continue_search(request_id: str):
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        return await tour_service.continue_search(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ù–î–û–ú–ù–´–ï –¢–£–†–´ –° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô ==========

@router.get("/random", response_model=List[HotTourInfo])
async def get_random_tours_get(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"),
    hotel_types: Optional[str] = Query(
        None, 
        description="–¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: active,relax,family,health,city,beach,deluxe"
    )
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ (GET –º–µ—Ç–æ–¥)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ (1-20)
    - hotel_types: —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - /api/v1/tours/random?count=8
    - /api/v1/tours/random?count=6&hotel_types=beach,relax
    - /api/v1/tours/random?count=10&hotel_types=deluxe
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        hotel_types_list = None
        if hotel_types:
            hotel_types_list = [ht.strip() for ht in hotel_types.split(",") if ht.strip()]
        
        request = RandomTourRequest(count=count, hotel_types=hotel_types_list)
        logger.info(f"üéØ GET –∑–∞–ø—Ä–æ—Å {request.count} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random", response_model=List[HotTourInfo])
async def get_random_tours_post(request: RandomTourRequest = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ (POST –º–µ—Ç–æ–¥)
    
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    {
        "count": 8,
        "hotel_types": ["beach", "relax", "deluxe"]
    }
    """
    try:
        if request is None:
            request = RandomTourRequest()
        
        logger.info(f"üéØ POST –∑–∞–ø—Ä–æ—Å {request.count} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/generate", response_model=List[HotTourInfo])
async def generate_random_tours(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"),
    hotel_types: Optional[str] = Query(
        None,
        description="–¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: active,relax,family,health,city,beach,deluxe"
    )
):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    
    –≠—Ç–æ—Ç endpoint –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ç—É—Ä—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        hotel_types_list = None
        if hotel_types:
            hotel_types_list = [ht.strip() for ht in hotel_types.split(",") if ht.strip()]
        
        request = RandomTourRequest(count=count, hotel_types=hotel_types_list)
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {request.count} —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service._generate_fully_random_tours(request)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random/clear-cache")
async def clear_random_tours_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        cleared_count = await random_tours_service.clear_random_tours_cache()
        
        return {
            "success": True,
            "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
            "cleared_cache_keys": cleared_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ò–õ–¨–¢–†–ê–• ==========

@router.get("/random/hotel-types")
async def get_available_hotel_types():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    return {
        "available_hotel_types": [
            {"code": "active", "name": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "description": "–û—Ç–µ–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"},
            {"code": "relax", "name": "–°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö", "description": "–û—Ç–µ–ª–∏ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"},
            {"code": "family", "name": "–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö", "description": "–°–µ–º–µ–π–Ω—ã–µ –æ—Ç–µ–ª–∏"},
            {"code": "health", "name": "–ó–¥–æ—Ä–æ–≤—å–µ", "description": "SPA –∏ wellness –æ—Ç–µ–ª–∏"},
            {"code": "city", "name": "–ì–æ—Ä–æ–¥—Å–∫–æ–π", "description": "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –æ—Ç–µ–ª–∏"},
            {"code": "beach", "name": "–ü–ª—è–∂–Ω—ã–π", "description": "–ü–ª—è–∂–Ω—ã–µ –æ—Ç–µ–ª–∏"},
            {"code": "deluxe", "name": "–õ—é–∫—Å (VIP)", "description": "–†–æ—Å–∫–æ—à–Ω—ã–µ –æ—Ç–µ–ª–∏"}
        ],
        "usage_examples": [
            "GET /api/v1/tours/random?hotel_types=beach,relax",
            "GET /api/v1/tours/random?count=10&hotel_types=deluxe",
            "POST /api/v1/tours/random —Å body: {\"count\": 8, \"hotel_types\": [\"family\", \"beach\"]}"
        ]
    }

@router.get("/random/stats")
async def get_random_tours_stats():
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
        cache_keys = await random_tours_service.cache.get_keys_pattern("random_tours_count_*")
        
        cache_info = {}
        for key in cache_keys:
            try:
                cached_data = await random_tours_service.cache.get(key)
                if cached_data:
                    cache_info[key] = {
                        "tours_count": len(cached_data),
                        "sample_countries": list(set([tour.get("countryname", "Unknown") for tour in cached_data[:5]])),
                        "sample_cities": list(set([tour.get("departurename", "Unknown") for tour in cached_data[:5]]))
                    }
            except:
                cache_info[key] = {"error": "Cannot read cache"}
        
        return {
            "system_info": {
                "total_countries_available": len(random_tours_service.all_countries),
                "total_cities_available": len(random_tours_service.all_cities),
                "cache_ttl_seconds": 3600,
                "max_tours_per_request": 20
            },
            "cache_status": {
                "cached_variants": len(cache_keys),
                "cache_details": cache_info
            },
            "supported_hotel_types": ["active", "relax", "family", "health", "city", "beach", "deluxe"],
            "features": {
                "fully_random_countries": True,
                "fully_random_cities": True,
                "hotel_type_filtering": True,
                "random_dates": True,
                "random_duration": True,
                "random_tourists_count": True
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            "error": str(e),
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        }
# ========== –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ==========

@router.get("/destinations")
async def get_destinations():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ 15 —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω (–ï–≥–∏–ø–µ—Ç, –¢—É—Ä—Ü–∏—è, –¢–∞–∏–ª–∞–Ω–¥) —Å:
    - –ù–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞/–∫—É—Ä–æ—Ä—Ç–∞
    - Country ID  
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤
    - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –ª—é–±–æ–≥–æ –æ—Ç–µ–ª—è –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
    
    –ö—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞.
    """
    try:
        from app.services.destinations_service import destinations_service
        
        logger.info("üèñÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        result = await city_directions_service.get_all_city_directions(
            country_id=country_id,
            limit_per_country=limit_per_country
        )
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {result.total_countries} —Å—Ç—Ä–∞–Ω, {result.total_cities} –≥–æ—Ä–æ–¥–æ–≤")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    
@router.get("/directions/popular")
async def get_popular_directions(
    limit: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    """
    try:
        logger.info(f"üåü –ü–æ–ª—É—á–µ–Ω–∏–µ {limit} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        result = await directions_service.get_directions_subset(limit=limit)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/directions/collect-all")
async def collect_all_directions(
    force_rebuild: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä –¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
):
    """
    –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
    
    –≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ–ª–≥–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)
    """
    try:
        logger.info(f"üåç –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (force_rebuild={force_rebuild})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä
        result = await directions_service.collect_all_directions(force_rebuild=force_rebuild)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        status = await directions_service.get_directions_status()
        
        return {
            "destinations": destinations,
            "total": len(destinations)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/destinations/refresh")
async def refresh_destinations():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    try:
        from app.services.destinations_service import destinations_service
        
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        destinations = await destinations_service.refresh()
        
        return {
            "message": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "destinations": destinations,
            "total": len(destinations)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))
@router.get("/destinations/status")
async def get_destinations_status():
    """
    –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        from tourvisor_middleware.travel_agency_backend.app.services.destinations_service import tourist_destinations_service
        
        status = await tourist_destinations_service.get_cache_status()
        
        return {
            "system": "tourist_destinations",
            "timestamp": datetime.now().isoformat(),
            "cache_status": status,
            "popular_countries": {
                1: "–ï–≥–∏–ø–µ—Ç",
                4: "–¢—É—Ä—Ü–∏—è", 
                22: "–¢–∞–∏–ª–∞–Ω–¥"
            },
            "endpoints": {
                "get_destinations": "/api/v1/tours/destinations",
                "refresh_destinations": "/api/v1/tours/destinations/refresh",
                "check_status": "/api/v1/tours/destinations/status"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç endpoint –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π endpoints
@router.get("/directions/debug-api")
async def debug_tourvisor_api():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API TourVisor –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API —Å—Ç—Ä–∞–Ω
        countries_data = await tourvisor_client.get_references("country")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API –∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        regions_data = await tourvisor_client.get_references("region", regcountry=1)  # –ï–≥–∏–ø–µ—Ç
        
        return {
            "countries_response": {
                "keys": list(countries_data.keys()) if countries_data else [],
                "sample_data": str(countries_data)[:500] if countries_data else "No data",
                "type": type(countries_data).__name__
            },
            "regions_response": {
                "keys": list(regions_data.keys()) if regions_data else [],
                "sample_data": str(regions_data)[:500] if regions_data else "No data", 
                "type": type(regions_data).__name__
            }
        }
        
    except Exception as e:
        return {"error": str(e)}

# ========== –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –¢–£–†–û–í ==========

@router.post("/actualize", response_model=DetailedTourInfo)
async def actualize_tour(request: TourActualizationRequest):
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–π—Å–æ–≤
    """
    try:
        return await tour_service.actualize_tour(request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/tour/{tour_id}", response_model=DetailedTourInfo)
async def get_tour_by_id(tour_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ –ø–æ –µ–≥–æ ID
    """
    try:
        result = await tour_service.search_tour_by_id(tour_id)
        if not result:
            raise HTTPException(status_code=404, detail="–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return result
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search-by-hotel", response_model=List[HotelInfo])
async def search_tours_by_hotel(
    hotel_name: str = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"),
    country_code: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")
):
    """
    –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è
    """
    try:
        return await tour_service.search_tours_by_hotel_name(hotel_name, country_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –æ—Ç–µ–ª—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –°–¢–ê–¢–£–° ==========

@router.get("/test-random-search")
async def test_random_search():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ç—É—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        request = RandomTourRequest(count=1)
        result = await random_tours_service._generate_fully_random_tours(request)
        
        if result:
            tour = result[0]
            return {
                "success": True,
                "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "test_tour": {
                    "hotel_name": tour.hotelname,
                    "country": tour.countryname,
                    "departure_city": tour.departurename,
                    "nights": tour.nights,
                    "price": tour.price,
                    "stars": tour.hotelstars
                }
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/test-connection")
async def test_tourvisor_connection():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API
    """
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        result = await tourvisor_client.get_references("departure")
        
        if result:
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TourVisor API —É—Å–ø–µ—à–Ω–æ",
                "data_keys": list(result.keys()),
                "sample_data": str(result)[:200] + "..." if len(str(result)) > 200 else str(result)
            }
        else:
            return {
                "success": False,
                "message": "TourVisor API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TourVisor API: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        }

@router.get("/status")
async def get_system_status():
    """
    –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ç—É—Ä–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        status = {
            "timestamp": datetime.now().isoformat(),
            "components": {},
            "overall_health": "unknown"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TourVisor API
        try:
            test_result = await tourvisor_client.get_references("departure")
            status["components"]["tourvisor_api"] = {
                "status": "healthy" if test_result else "degraded",
                "response_time": "< 1s"
            }
        except Exception as e:
            status["components"]["tourvisor_api"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        try:
            test_key = "health_check_test"
            await tour_service.cache.set(test_key, "test", ttl=60)
            test_value = await tour_service.cache.get(test_key)
            await tour_service.cache.delete(test_key)
            
            status["components"]["cache"] = {
                "status": "healthy" if test_value == "test" else "degraded"
            }
        except Exception as e:
            status["components"]["cache"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        all_statuses = [comp["status"] for comp in status["components"].values()]
        if all(s == "healthy" for s in all_statuses):
            status["overall_health"] = "healthy"
        elif any(s == "unhealthy" for s in all_statuses):
            status["overall_health"] = "unhealthy"
        else:
            status["overall_health"] = "degraded"
        
        return status
        
    except Exception as e:
        return {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "unhealthy",
            "error": str(e) 
        }
@router.post("/random/clear-hotel-type-cache")
async def clear_hotel_type_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç—É—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π
    """
    try:
        cleared_count = await random_tours_service.clear_hotel_type_cache()
        
        return {
            "success": True,
            "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ —Ç—É—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π",
            "cleared_cache_keys": cleared_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))





# ========== –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –¢–£–†–ê ==========

@router.get("/find-tour")
async def find_specific_tour(
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    departure: int = Query(..., description="–ö–æ–¥ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞"),
    country: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"),
    
    # –§–∏–ª—å—Ç—Ä—ã –æ—Ç–µ–ª—è
    hotel_stars: Optional[int] = Query(None, ge=1, le=5, description="–ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è"),
    hotel_name: Optional[str] = Query(None, min_length=3, description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è (–ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ)"),
    hotel_id: Optional[str] = Query(None, description="ID –æ—Ç–µ–ª—è"),
    region_code: Optional[int] = Query(None, description="–ö–æ–¥ –∫—É—Ä–æ—Ä—Ç–∞"),
    
    # –§–∏–ª—å—Ç—Ä—ã —Ç—É—Ä–∞
    nights: Optional[int] = Query(None, ge=1, le=30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π"),
    adults: int = Query(2, ge=1, le=8, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö"),
    children: int = Query(0, ge=0, le=4, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π"),
    meal_type: Optional[int] = Query(None, description="–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è (–∫–æ–¥)"),
    
    # –§–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã
    max_price: Optional[int] = Query(None, gt=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    min_price: Optional[int] = Query(None, gt=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–∞—Ç
    date_from: Optional[str] = Query(None, description="–î–∞—Ç–∞ –æ—Ç (–¥–¥.–º–º.–≥–≥–≥–≥)"),
    date_to: Optional[str] = Query(None, description="–î–∞—Ç–∞ –¥–æ (–¥–¥.–º–º.–≥–≥–≥–≥)"),
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    rating: Optional[float] = Query(None, ge=1.0, le=5.0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è"),
    hotel_type: Optional[str] = Query(None, description="–¢–∏–ø –æ—Ç–µ–ª—è: beach,city,family,deluxe,etc"),
):
    """
    –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –û–î–ò–ù —Ç—É—Ä, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –∏–ª–∏ –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    
    –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
    - /find-tour?departure=1&country=4&hotel_stars=4&meal_type=2
    - /find-tour?departure=1&country=1&hotel_name=hilton&nights=7
    - /find-tour?departure=2&country=22&max_price=100000&hotel_stars=5
    """
    try:
        logger.info(f"üîé –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞: —Å—Ç—Ä–∞–Ω–∞ {country}, –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ {departure}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        search_request = SpecificTourSearchRequest(
            departure=departure,
            country=country,
            hotel_stars=hotel_stars,
            hotel_name=hotel_name,
            hotel_id=hotel_id,
            region_code=region_code,
            nights=nights,
            adults=adults,
            children=children,
            meal_type=meal_type,
            max_price=max_price,
            min_price=min_price,
            date_from=date_from,
            date_to=date_to,
            rating=rating,
            hotel_type=hotel_type
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        found_tour = await specific_tour_service.find_specific_tour(search_request)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—É—Ä: {found_tour.hotel_name} - {found_tour.price} —Ä—É–±.")
        return found_tour
    except HTTPException:
        raise
    except ValueError as e:
        logger.warning(f"‚ùå –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        search_request = SpecificTourSearchRequest(
            departure=departure,
            country=country,
            hotel_stars=hotel_stars,
            hotel_name=hotel_name,
            hotel_id=hotel_id,
            region_code=region_code,
            nights=nights,
            adults=adults,
            children=children,
            meal_type=meal_type,
            max_price=max_price,
            min_price=min_price,
            date_from=date_from,
            date_to=date_to,
            rating=rating,
            hotel_type=hotel_type
        )
        
        suggestions = specific_tour_service.get_search_suggestions(search_request)
        
        raise HTTPException(
            status_code=404,
            detail=TourSearchError(
                error="–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                message="–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                suggestions=suggestions
            ).dict()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/find-tour/by-hotel", response_model=FoundTourInfo)
async def find_tour_by_hotel(
    hotel_name: str = Query(..., min_length=3, description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"),
    departure: int = Query(..., description="–ö–æ–¥ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞"),
    country: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"),
    nights: Optional[int] = Query(7, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π"),
    adults: int = Query(2, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö"),
):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è
    
    –ü—Ä–∏–º–µ—Ä: /find-tour/by-hotel?hotel_name=hilton&departure=1&country=4&nights=7
    """
    try:
        found_tour = await specific_tour_service.find_tour_by_hotel_name(
            hotel_name=hotel_name,
            departure=departure,
            country=country,
            nights=nights,
            adults=adults
        )
        return found_tour
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–µ–ª—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/find-tour/by-criteria", response_model=FoundTourInfo)
async def find_tour_by_criteria(
    departure: int = Query(..., description="–ö–æ–¥ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞"),
    country: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"),
    hotel_stars: int = Query(..., ge=1, le=5, description="–ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è"),
    meal_type: int = Query(..., description="–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è"),
    max_price: Optional[int] = Query(None, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    nights: int = Query(7, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π"),
    adults: int = Query(2, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö"),
):
    """
    –ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä–∞)
    
    –ü—Ä–∏–º–µ—Ä: /find-tour/by-criteria?departure=1&country=4&hotel_stars=4&meal_type=2
    """
    try:
        found_tour = await specific_tour_service.find_tour_by_criteria(
            departure=departure,
            country=country,
            hotel_stars=hotel_stars,
            meal_type=meal_type,
            max_price=max_price,
            nights=nights,
            adults=adults
        )
        return found_tour
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/find-tour", response_model=FoundTourInfo)
async def find_tour_post(search_request: SpecificTourSearchRequest):
    """
    –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞ —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–ª–æ–º
    
    –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:
    {
        "departure": 1,
        "country": 4,
        "hotel_stars": 4,
        "meal_type": 2,
        "nights": 7,
        "adults": 2,
        "max_price": 80000
    }
    """
    try:
        found_tour = await specific_tour_service.find_specific_tour(search_request)
        return found_tour
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ POST –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï ENDPOINTS ==========

@router.get("/find-tour/meal-types")
async def get_meal_types():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è —Å –∫–æ–¥–∞–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
        meal_data = await tourvisor_client.get_references("meal")
        
        return {
            "meal_types": meal_data.get("meal", []),
            "usage_info": {
                "description": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ meal_type",
                "example": "meal_type=2 –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞"
            }
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/find-tour/hotel-types")
async def get_hotel_types():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π
    """
    return {
        "hotel_types": [
            {"code": "active", "name": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö"},
            {"code": "relax", "name": "–°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö"},
            {"code": "family", "name": "–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö"},
            {"code": "health", "name": "–ó–¥–æ—Ä–æ–≤—å–µ/SPA"},
            {"code": "city", "name": "–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ—Ç–µ–ª—å"},
            {"code": "beach", "name": "–ü–ª—è–∂–Ω—ã–π –æ—Ç–µ–ª—å"},
            {"code": "deluxe", "name": "–õ—é–∫—Å/VIP –æ—Ç–µ–ª—å"}
        ],
        "usage_info": {
            "description": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ hotel_type",
            "example": "hotel_type=beach –¥–ª—è –ø–ª—è–∂–Ω—ã—Ö –æ—Ç–µ–ª–µ–π"
        }
    }

@router.get("/find-tour/examples")
async def get_search_examples():
    """
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞
    """
    return {
        "examples": {
            "by_criteria": {
                "description": "–ü–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä)",
                "url": "/api/v1/tours/find-tour/by-criteria?departure=1&country=4&hotel_stars=4&meal_type=2",
                "parameters": {
                    "departure": "1 (–ú–æ—Å–∫–≤–∞)",
                    "country": "4 (–¢—É—Ä—Ü–∏—è)",
                    "hotel_stars": "4 (4 –∑–≤–µ–∑–¥—ã)",
                    "meal_type": "2 (–∑–∞–≤—Ç—Ä–∞–∫)"
                }
            },
            "by_hotel_name": {
                "description": "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è",
                "url": "/api/v1/tours/find-tour/by-hotel?hotel_name=hilton&departure=1&country=4",
                "parameters": {
                    "hotel_name": "hilton",
                    "departure": "1 (–ú–æ—Å–∫–≤–∞)",
                    "country": "4 (–¢—É—Ä—Ü–∏—è)"
                }
            },
            "detailed_search": {
                "description": "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                "url": "/api/v1/tours/find-tour?departure=1&country=22&hotel_stars=5&nights=10&max_price=150000&hotel_type=beach&rating=4.0",
                "parameters": {
                    "departure": "1 (–ú–æ—Å–∫–≤–∞)",
                    "country": "22 (–¢–∞–∏–ª–∞–Ω–¥)",
                    "hotel_stars": "5 –∑–≤–µ–∑–¥",
                    "nights": "10 –Ω–æ—á–µ–π",
                    "max_price": "–¥–æ 150,000 —Ä—É–±",
                    "hotel_type": "beach (–ø–ª—è–∂–Ω—ã–π)",
                    "rating": "—Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 4.0"
                }
            },
            "post_request": {
                "description": "POST –∑–∞–ø—Ä–æ—Å —Å JSON —Ç–µ–ª–æ–º",
                "url": "/api/v1/tours/find-tour (POST)",
                "body": {
                    "departure": 1,
                    "country": 4,
                    "hotel_stars": 4,
                    "meal_type": 2,
                    "nights": 7,
                    "adults": 2,
                    "max_price": 80000
                }
            }
        },
        "common_codes": {
            "departure_cities": {
                "1": "–ú–æ—Å–∫–≤–∞",
                "2": "–ü–µ—Ä–º—å", 
                "3": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                "5": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            },
            "countries": {
                "1": "–ï–≥–∏–ø–µ—Ç",
                "4": "–¢—É—Ä—Ü–∏—è",
                "8": "–ì—Ä–µ—Ü–∏—è",
                "15": "–û–ê–≠",
                "22": "–¢–∞–∏–ª–∞–Ω–¥",
                "35": "–ú–∞–ª—å–¥–∏–≤—ã"
            },
            "meal_types": {
                "1": "–ë–µ–∑ –ø–∏—Ç–∞–Ω–∏—è",
                "2": "–ó–∞–≤—Ç—Ä–∞–∫",
                "3": "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", 
                "4": "–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω",
                "5": "–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ",
                "7": "All Inclusive"
            }
        },
        "tips": [
            "–ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, API –≤–µ—Ä–Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤",
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã hotel_name –∏ hotel_id –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ",
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–µ–ª—é –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /find-tour/by-hotel",
            "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 30 –º–∏–Ω—É—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        ]
    }

@router.get("/find-tour/test")
async def test_find_tour():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        test_request = SpecificTourSearchRequest(
            departure=1,  # –ú–æ—Å–∫–≤–∞
            country=4,    # –¢—É—Ä—Ü–∏—è
            hotel_stars=4,
            nights=7,
            adults=2
        )
        
        found_tour = await specific_tour_service.find_specific_tour(test_request)
        
        return {
            "success": True,
            "message": "–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "test_result": {
                "hotel_name": found_tour.hotel_name,
                "hotel_stars": found_tour.hotel_stars,
                "price": found_tour.price,
                "nights": found_tour.nights,
                "operator": found_tour.operator_name,
                "region": found_tour.region_name
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
        }

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def _build_tour_search_params(
    departure: int,
    country: int,
    hotel_stars: Optional[int] = None,
    hotel_name: Optional[str] = None,
    hotel_id: Optional[str] = None,
    region_code: Optional[int] = None,
    nights: Optional[int] = None,
    adults: int = 2,
    children: int = 0,
    meal_type: Optional[int] = None,
    max_price: Optional[int] = None,
    min_price: Optional[int] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None,
    rating: Optional[float] = None,
    hotel_type: Optional[str] = None,
) -> Dict[str, Any]:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è TourVisor API"""
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "departure": departure,
        "country": country,
        "adults": adults,
        "child": children,
    }
    
    # –î–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏)
    if not date_from:
        start_date = datetime.now() + timedelta(days=7)
        params["datefrom"] = start_date.strftime("%d.%m.%Y")
    else:
        params["datefrom"] = date_from
    
    if not date_to:
        end_date = datetime.now() + timedelta(days=21)
        params["dateto"] = end_date.strftime("%d.%m.%Y")
    else:
        params["dateto"] = date_to
    
    # –ù–æ—á–∏
    if nights:
        params["nightsfrom"] = nights
        params["nightsto"] = nights
    else:
        params["nightsfrom"] = 7
        params["nightsto"] = 10
    
    # –§–∏–ª—å—Ç—Ä—ã –æ—Ç–µ–ª—è
    if hotel_id:
        params["hotels"] = hotel_id
    
    if hotel_stars:
        params["stars"] = hotel_stars
        params["starsbetter"] = 1  # –í–∫–ª—é—á–∞—Ç—å –ª—É—á—à–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    if region_code:
        params["regions"] = str(region_code)
    
    if rating:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–æ—Ä–º–∞—Ç TourVisor
        if rating >= 4.5:
            params["rating"] = 5  # >= 4.5
        elif rating >= 4.0:
            params["rating"] = 4  # >= 4.0
        elif rating >= 3.5:
            params["rating"] = 3  # >= 3.5
        elif rating >= 3.0:
            params["rating"] = 2  # >= 3.0
    
    if hotel_type:
        params["hoteltypes"] = hotel_type
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–∏—Ç–∞–Ω–∏—è
    if meal_type:
        params["meal"] = meal_type
        params["mealbetter"] = 1
    
    # –§–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã
    if min_price:
        params["pricefrom"] = min_price
    if max_price:
        params["priceto"] = max_price
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params["format"] = "xml"
    params["pricetype"] = 0  # –¶–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
    
    return params

async def _execute_specific_tour_search(search_params: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞"""
    try:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –µ–≥–æ ID
        hotel_name = search_params.pop("hotel_name", None)
        if hotel_name and "hotels" not in search_params:
            hotel_id = await _find_hotel_id_by_name(hotel_name, search_params["country"])
            if hotel_id:
                search_params["hotels"] = hotel_id
                logger.info(f"üè® –ù–∞–π–¥–µ–Ω ID –æ—Ç–µ–ª—è '{hotel_name}': {hotel_id}")
            else:
                logger.warning(f"üè® –û—Ç–µ–ª—å '{hotel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        request_id = await tourvisor_client.search_tours(search_params)
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        for attempt in range(10):
            await asyncio.sleep(1)
            
            status = await tourvisor_client.get_search_status(request_id)
            status_data = status.get("data", {}).get("status", {})
            
            if status_data.get("state") == "finished" or status_data.get("hotelsfound", 0) > 0:
                break
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await tourvisor_client.get_search_results(request_id, 1, 5)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—É—Ä
        tour = await _extract_best_tour_from_results(results, search_params)
        return tour
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
        return None

async def _execute_fallback_tour_search(original_params: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """Fallback –ø–æ–∏—Å–∫ —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
    try:
        logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º fallback –ø–æ–∏—Å–∫ —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        fallback_params = original_params.copy()
        
        # –û—Å–ª–∞–±–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        fallback_strategies = [
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –£–±–∏—Ä–∞–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
            lambda p: {**p, "nightsfrom": max(1, p.get("nightsfrom", 7) - 3), "nightsto": p.get("nightsto", 10) + 3},
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏
            lambda p: {k: v for k, v in p.items() if k not in ["stars", "starsbetter"]},
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –†–∞—Å—à–∏—Ä—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            lambda p: {**{k: v for k, v in p.items() if k not in ["pricefrom", "priceto"]}, 
                      "priceto": p.get("priceto", 200000) * 1.5 if p.get("priceto") else None},
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ç–µ–ª—è
            lambda p: {k: v for k, v in p.items() if k not in ["hoteltypes"]},
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            lambda p: _expand_date_range(p),
        ]
        
        for i, strategy in enumerate(fallback_strategies):
            try:
                logger.info(f"üîÑ Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {i+1}")
                
                modified_params = strategy(fallback_params)
                
                if modified_params:
                    tour = await _execute_specific_tour_search(modified_params)
                    if tour:
                        logger.info(f"‚úÖ Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {i+1} —É—Å–ø–µ—à–Ω–∞")
                        tour["is_fallback"] = True
                        tour["fallback_strategy"] = i + 1
                        return tour
                
            except Exception as e:
                logger.debug(f"Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                continue
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø–æ–∏—Å–∫–∞: {e}")
        return None

def _expand_date_range(params: Dict[str, Any]) -> Dict[str, Any]:
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    try:
        expanded_params = params.copy()
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ ¬±7 –¥–Ω–µ–π
        if "datefrom" in params:
            date_from = datetime.strptime(params["datefrom"], "%d.%m.%Y")
            new_date_from = date_from - timedelta(days=7)
            expanded_params["datefrom"] = new_date_from.strftime("%d.%m.%Y")
        
        if "dateto" in params:
            date_to = datetime.strptime(params["dateto"], "%d.%m.%Y")
            new_date_to = date_to + timedelta(days=7)
            expanded_params["dateto"] = new_date_to.strftime("%d.%m.%Y")
        
        return expanded_params
        
    except Exception:
        return params

async def _find_hotel_id_by_name(hotel_name: str, country_code: int) -> Optional[str]:
    """–ü–æ–∏—Å–∫ ID –æ—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        # –ò—â–µ–º –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –æ—Ç–µ–ª–µ–π
        hotels_data = await tourvisor_client.get_references(
            "hotel",
            hotcountry=country_code
        )
        
        hotels = hotels_data.get("hotel", [])
        if not isinstance(hotels, list):
            hotels = [hotels] if hotels else []
        
        # –ò—â–µ–º –æ—Ç–µ–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫)
        hotel_name_lower = hotel_name.lower()
        
        for hotel in hotels:
            hotel_api_name = hotel.get("name", "").lower()
            if hotel_name_lower in hotel_api_name or hotel_api_name in hotel_name_lower:
                return hotel.get("id")
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ID –æ—Ç–µ–ª—è: {e}")
        return None

async def _extract_best_tour_from_results(results: Dict[str, Any], search_params: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ç—É—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        data = results.get("data", {})
        result_data = data.get("result", {})
        hotel_list = result_data.get("hotel", [])
        
        if not isinstance(hotel_list, list):
            hotel_list = [hotel_list] if hotel_list else []
        
        if not hotel_list:
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã
        all_tours = []
        
        for hotel in hotel_list:
            tours_data = hotel.get("tours", {}).get("tour", [])
            
            if not isinstance(tours_data, list):
                tours_data = [tours_data] if tours_data else []
            
            for tour_data in tours_data:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–µ
                combined_tour = {
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ
                    "hotel_id": hotel.get("hotelcode"),
                    "hotel_name": hotel.get("hotelname"),
                    "hotel_stars": hotel.get("hotelstars"),
                    "hotel_rating": hotel.get("hotelrating"),
                    "hotel_description": hotel.get("hoteldescription"),
                    "hotel_picture": hotel.get("picturelink"),
                    "hotel_review_link": hotel.get("reviewlink"),
                    "country_name": hotel.get("countryname"),
                    "region_name": hotel.get("regionname"),
                    "sea_distance": hotel.get("seadistance"),
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ
                    "tour_id": tour_data.get("tourid"),
                    "operator_name": tour_data.get("operatorname"),
                    "fly_date": tour_data.get("flydate"),
                    "nights": tour_data.get("nights"),
                    "price": tour_data.get("price"),
                    "fuel_charge": tour_data.get("fuelcharge"),
                    "meal": tour_data.get("mealrussian", tour_data.get("meal")),
                    "room_type": tour_data.get("room"),
                    "adults": tour_data.get("adults"),
                    "children": tour_data.get("child"),
                    "currency": tour_data.get("currency"),
                    "tour_link": tour_data.get("tourlink"),
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    "is_regular": tour_data.get("regular") == 1,
                    "is_promo": tour_data.get("promo") == 1,
                    "is_on_request": tour_data.get("onrequest") == 1,
                    "flight_status": tour_data.get("flightstatus"),
                    "hotel_status": tour_data.get("hotelstatus"),
                }
                
                all_tours.append(combined_tour)
        
        if not all_tours:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_tours = _sort_tours_by_relevance(all_tours, search_params)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ç—É—Ä
        best_tour = sorted_tours[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        best_tour["search_results_count"] = len(all_tours)
        best_tour["hotels_found"] = len(hotel_list)
        
        return best_tour
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–∞: {e}")
        return None

def _sort_tours_by_relevance(tours: List[Dict[str, Any]], search_params: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç—É—Ä–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
    
    def calculate_relevance_score(tour: Dict[str, Any]) -> float:
        score = 0.0
        
        # –û—á–∫–∏ –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏
        if "stars" in search_params and tour.get("hotel_stars"):
            requested_stars = search_params["stars"]
            hotel_stars = tour["hotel_stars"]
            if hotel_stars == requested_stars:
                score += 100
            elif hotel_stars > requested_stars:
                score += 80  # –õ—É—á—à–µ —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            else:
                score += max(0, 50 - (requested_stars - hotel_stars) * 10)
        
        # –û—á–∫–∏ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
        if "nightsfrom" in search_params and tour.get("nights"):
            requested_nights = search_params["nightsfrom"]
            tour_nights = tour["nights"]
            if tour_nights == requested_nights:
                score += 80
            else:
                score += max(0, 40 - abs(tour_nights - requested_nights) * 5)
        
        # –û—á–∫–∏ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è
        if tour.get("hotel_rating"):
            rating = float(tour["hotel_rating"])
            score += rating * 10  # –î–æ 50 –æ—á–∫–æ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥
        
        # –û—á–∫–∏ –∑–∞ —Ü–µ–Ω—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã)
        if tour.get("price"):
            price = float(tour["price"])
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—É (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ = –±–æ–ª—å—à–µ –æ—á–∫–æ–≤)
            if 30000 <= price <= 150000:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                score += 30
            elif price < 30000:
                score += 20  # –û—á–µ–Ω—å –¥–µ—à–µ–≤–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            else:
                score += max(0, 30 - (price - 150000) / 10000)  # –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ
        
        # –û—á–∫–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å (–Ω–µ "–ø–æ–¥ –∑–∞–ø—Ä–æ—Å")
        if not tour.get("is_on_request", False):
            score += 20
        
        # –û—á–∫–∏ –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if tour.get("hotel_picture"):
            score += 10
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–µ–π—Å—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–ø–ª–∞—Ç—ã)
        if tour.get("is_regular", False):
            score -= 10
        
        return score
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    tours_with_scores = [(tour, calculate_relevance_score(tour)) for tour in tours]
    tours_with_scores.sort(key=lambda x: x[1], reverse=True)
    
    return [tour for tour, score in tours_with_scores]

def _generate_find_tour_cache_key(search_params: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    import hashlib
    import json
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    sorted_params = json.dumps(search_params, sort_keys=True, default=str)
    params_hash = hashlib.md5(sorted_params.encode()).hexdigest()
    
    return f"find_tour:{params_hash}"

async def _get_search_suggestions(search_params: Dict[str, Any]) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
    suggestions = []
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ—Å–ª–∞–±–ª–µ–Ω–∏—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    if "stars" in search_params:
        suggestions.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–µ–ª–∏ {search_params['stars']-1}* –∏–ª–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏")
    
    if "priceto" in search_params:
        suggestions.append(f"–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–æ {int(search_params['priceto'] * 1.3):,} —Ä—É–±.")
    
    if "nightsfrom" in search_params:
        nights = search_params["nightsfrom"]
        suggestions.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ {nights-2}-{nights+2} –Ω–æ—á–µ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ {nights}")
    
    if "hotels" in search_params:
        suggestions.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–µ–ª—è")
    
    # –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions.extend([
        "–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ ¬±7 –¥–Ω–µ–π",
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞",
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å–µ–¥–Ω–∏–µ –∫—É—Ä–æ—Ä—Ç—ã"
    ])
    
    return suggestions[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π