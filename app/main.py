from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import asyncio

from app.config import settings
from app.api.v1 import tours, hotels, references, applications, sitemap
from app.api.websockets import websocket_manager
from app.tasks.cache_warmup import warm_up_cache
from app.tasks.random_tours_update import update_random_tours
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    logger.info("üîß –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–±—ã—Å—Ç—Ä–∞—è)
    random_tours_task = asyncio.create_task(update_random_tours())
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ (–º–µ–¥–ª–µ–Ω–Ω–∞—è, –∑–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
    async def delayed_cache_warmup():
        await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        await warm_up_cache()
    
    cache_warmup_task = asyncio.create_task(delayed_cache_warmup())
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)")
    
    yield
    
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    random_tours_task.cancel()
    cache_warmup_task.cancel()
    
    try:
        await random_tours_task
    except asyncio.CancelledError:
        logger.info("‚ùå –ó–∞–¥–∞—á–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    try:
        await cache_warmup_task
    except asyncio.CancelledError:
        logger.info("‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

app = FastAPI(
    title="Travel Agency Backend",
    description="Backend –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π TourVisor API",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# API routes
app.include_router(tours.router, prefix="/api/v1/tours", tags=["tours"])
app.include_router(hotels.router, prefix="/api/v1/hotels", tags=["hotels"])
app.include_router(references.router, prefix="/api/v1/references", tags=["references"])
app.include_router(applications.router, prefix="/api/v1/applications", tags=["applications"])
app.include_router(sitemap.router, prefix="/sitemap", tags=["sitemap"])

# WebSocket endpoint
@app.websocket("/ws/tours/{request_id}")
async def websocket_tours(websocket: WebSocket, request_id: str):
    await websocket_manager.connect(websocket, request_id)

@app.get("/")
async def root():
    return {
        "message": "Travel Agency Backend API", 
        "version": "1.0.0",
        "status": "running",
        "features": [
            "tour_search",
            "random_tours", 
            "hotel_info",
            "references",
            "applications",
            "websocket_support",
            "sitemap_generation"
        ]
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        from app.services.cache_service import cache_service
        cache_working = await cache_service.exists("health_check")
        await cache_service.set("health_check", "ok", ttl=60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TourVisor API (–ª–µ–≥–∫–∏–π –∑–∞–ø—Ä–æ—Å)
        from app.core.tourvisor_client import tourvisor_client
        api_working = False
        try:
            references = await tourvisor_client.get_references("departure")
            api_working = bool(references)
        except:
            api_working = False
        
        return {
            "status": "healthy",
            "timestamp": asyncio.get_event_loop().time(),
            "components": {
                "cache": "ok" if cache_working else "error",
                "tourvisor_api": "ok" if api_working else "error"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return {
            "status": "unhealthy",
            "error": str(e)
        }

@app.get("/status")
async def get_system_status():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from app.services.cache_service import cache_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫—ç—à–∏
        caches_status = {}
        cache_keys = [
            "random_tours_from_search",
            "reference:departure", 
            "reference:country",
            "hot_tours:city_1"
        ]
        
        for key in cache_keys:
            exists = await cache_service.exists(key)
            caches_status[key] = "present" if exists else "missing"
        
        return {
            "system": "travel_agency_backend",
            "version": "1.0.0",
            "uptime_info": "running",
            "cache_status": caches_status,
            "endpoints": {
                "tours": "/api/v1/tours/",
                "hotels": "/api/v1/hotels/",
                "references": "/api/v1/references/",
                "applications": "/api/v1/applications/",
                "sitemap": "/sitemap",
                "websocket": "/ws/tours/{request_id}"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {"error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )