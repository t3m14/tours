# app/services/city_directions_service.py

import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime

from app.services.cache_service import cache_service
from app.services.photo_service import photo_service
from app.services.price_service import price_service
from app.core.tourvisor_client import tourvisor_client
from app.models.tour import DirectionInfo
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class CityDirectionsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º/–∫—É—Ä–æ—Ä—Ç–∞–º"""
    
    def __init__(self):
        self.cache = cache_service
        self.photo_service = photo_service
        self.price_service = price_service
        
        # –ö–ª—é—á–∏ –∫—ç—à–∞
        self.CITIES_CACHE_KEY = "city_directions_all"
        self.CACHE_TTL = 7200  # 2 —á–∞—Å–∞
        
    async def get_city_directions(self, country_code: Optional[int] = None, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º/–∫—É—Ä–æ—Ä—Ç–∞–º
        
        Args:
            country_code: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        logger.info(f"üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º (—Å—Ç—Ä–∞–Ω–∞: {country_code}, –ª–∏–º–∏—Ç: {limit})")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = f"{self.CITIES_CACHE_KEY}_{country_code or 'all'}_{limit or 'all'}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = await self.cache.get(cache_key)
            if cached_data:
                logger.info(f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached_data)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞")
                return cached_data
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            directions = await self._generate_city_directions(country_code, limit)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if directions:
                await self.cache.set(cache_key, directions, ttl=self.CACHE_TTL)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫—ç—à")
            
            return directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º: {e}")
            return await self._get_fallback_city_directions(country_code, limit)
    
    async def _generate_city_directions(self, country_code: Optional[int] = None, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        logger.info("üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
            if country_code:
                countries_to_process = [{"id": country_code, "name": self._get_country_name(country_code)}]
            else:
                countries_data = await tourvisor_client.get_references("country")
                countries_list = countries_data.get("country", [])
                
                if not isinstance(countries_list, list):
                    countries_list = [countries_list] if countries_list else []
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã
                countries_to_process = []
                for country in countries_list:
                    country_id = country.get("id")
                    country_name = country.get("name")
                    
                    if country_id and country_name:
                        try:
                            countries_to_process.append({
                                "id": int(country_id),
                                "name": country_name
                            })
                        except (ValueError, TypeError):
                            continue
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
                popular_countries = [1, 4, 22, 8, 15, 35]  # –ï–≥–∏–ø–µ—Ç, –¢—É—Ä—Ü–∏—è, –¢–∞–∏–ª–∞–Ω–¥ –∏ —Ç.–¥.
                countries_to_process.sort(key=lambda x: 0 if x["id"] in popular_countries else 1)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è
                if limit:
                    max_countries = min(limit // 3, 10)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 3 –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω—É
                    countries_to_process = countries_to_process[:max_countries]
            
            logger.info(f"üåç –ù–∞–π–¥–µ–Ω–æ {len(countries_to_process)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω")
            
            all_directions = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É
            for country in countries_to_process:
                try:
                    country_directions = await self._get_cities_for_country(country["id"], country["name"])
                    all_directions.extend(country_directions)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    if limit and len(all_directions) >= limit:
                        all_directions = all_directions[:limit]
                        break
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country['name']}: {e}")
                    continue
            
            logger.info(f"üèÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            return all_directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def _get_cities_for_country(self, country_id: int, country_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤/–∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
        try:
            logger.debug(f"üèôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è {country_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω—ã
            regions_data = await tourvisor_client.get_references("region", regcountry=country_id)
            regions_list = regions_data.get("region", [])
            
            if not isinstance(regions_list, list):
                regions_list = [regions_list] if regions_list else []
            
            if not regions_list:
                logger.debug(f"‚ö†Ô∏è –ù–µ—Ç –∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è {country_name}")
                return []
            
            city_directions = []
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä–æ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω—É
            max_regions = min(len(regions_list), 5)
            selected_regions = regions_list[:max_regions]
            
            for region in selected_regions:
                try:
                    region_id = region.get("id")
                    region_name = region.get("name")
                    
                    if not region_id or not region_name:
                        continue
                    
                    logger.debug(f"üèñÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä–æ—Ä—Ç {region_name}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ —Ü–µ–Ω—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    photo_task = self.photo_service.get_country_hotel_photo_fast(country_id, country_name)
                    price_task = self.price_service.get_country_min_price(country_id, country_name)
                    
                    try:
                        hotel_photo, min_price = await asyncio.wait_for(
                            asyncio.gather(photo_task, price_task, return_exceptions=True),
                            timeout=10.0
                        )
                    except asyncio.TimeoutError:
                        logger.debug(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {region_name}")
                        hotel_photo = None
                        min_price = 50000.0
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    if isinstance(hotel_photo, Exception):
                        hotel_photo = None
                    if isinstance(min_price, Exception):
                        min_price = self.price_service.get_default_prices().get(country_id, 50000.0)
                    
                    # Fallback –¥–ª—è —Ñ–æ—Ç–æ
                    if not hotel_photo:
                        hotel_photo = self.photo_service.get_fallback_image(country_id, region_name)
                    
                    direction = {
                        "id": f"{country_id}_{region_id}",
                        "name": region_name,
                        "country_name": country_name,
                        "country_code": country_id,
                        "region_code": region_id,
                        "image_link": hotel_photo,
                        "min_price": float(min_price),
                        "type": "region"
                    }
                    
                    city_directions.append(direction)
                    logger.debug(f"‚úÖ {region_name}: —Ü–µ–Ω–∞ {min_price}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫—É—Ä–æ—Ä—Ç–∞–º–∏
                    await asyncio.sleep(0.2)
                    
                except Exception as e:
                    logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä–æ—Ä—Ç–∞ {region.get('name', 'Unknown')}: {e}")
                    continue
            
            logger.debug(f"üèôÔ∏è {country_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(city_directions)} –∫—É—Ä–æ—Ä—Ç–æ–≤")
            return city_directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è {country_name}: {e}")
            return []
    
    async def _get_fallback_city_directions(self, country_code: Optional[int] = None, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """Fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        logger.info("üé≠ –°–æ–∑–¥–∞–µ–º fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º")
        
        fallback_data = [
            # –ï–≥–∏–ø–µ—Ç
            {"country_id": 1, "country_name": "–ï–≥–∏–ø–µ—Ç", "cities": [
                {"id": "1_5", "name": "–•—É—Ä–≥–∞–¥–∞", "region_code": 5, "price": 45000},
                {"id": "1_6", "name": "–®–∞—Ä–º-—ç–ª—å-–®–µ–π—Ö", "region_code": 6, "price": 50000},
                {"id": "1_25", "name": "–ú–∞—Ä—Å–∞ –ê–ª–∞–º", "region_code": 25, "price": 55000}
            ]},
            # –¢—É—Ä—Ü–∏—è
            {"country_id": 4, "country_name": "–¢—É—Ä—Ü–∏—è", "cities": [
                {"id": "4_8", "name": "–ê–Ω—Ç–∞–ª—å—è", "region_code": 8, "price": 35000},
                {"id": "4_9", "name": "–ö–µ–º–µ—Ä", "region_code": 9, "price": 38000},
                {"id": "4_10", "name": "–ë–µ–ª–µ–∫", "region_code": 10, "price": 45000},
                {"id": "4_11", "name": "–°–∏–¥–µ", "region_code": 11, "price": 40000}
            ]},
            # –¢–∞–∏–ª–∞–Ω–¥
            {"country_id": 22, "country_name": "–¢–∞–∏–ª–∞–Ω–¥", "cities": [
                {"id": "22_45", "name": "–ü—Ö—É–∫–µ—Ç", "region_code": 45, "price": 95000},
                {"id": "22_46", "name": "–ü–∞—Ç—Ç–∞–π—è", "region_code": 46, "price": 85000},
                {"id": "22_47", "name": "–°–∞–º—É–∏", "region_code": 47, "price": 110000}
            ]},
            # –ì—Ä–µ—Ü–∏—è
            {"country_id": 8, "country_name": "–ì—Ä–µ—Ü–∏—è", "cities": [
                {"id": "8_15", "name": "–ö—Ä–∏—Ç", "region_code": 15, "price": 55000},
                {"id": "8_16", "name": "–†–æ–¥–æ—Å", "region_code": 16, "price": 52000},
                {"id": "8_17", "name": "–•–∞–ª–∫–∏–¥–∏–∫–∏", "region_code": 17, "price": 58000}
            ]},
            # –û–ê–≠
            {"country_id": 15, "country_name": "–û–ê–≠", "cities": [
                {"id": "15_30", "name": "–î—É–±–∞–π", "region_code": 30, "price": 75000},
                {"id": "15_31", "name": "–ê–±—É-–î–∞–±–∏", "region_code": 31, "price": 80000},
                {"id": "15_32", "name": "–®–∞—Ä–¥–∂–∞", "region_code": 32, "price": 65000}
            ]}
        ]
        
        all_directions = []
        
        for country_data in fallback_data:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if country_code and country_data["country_id"] != country_code:
                continue
            
            for city in country_data["cities"]:
                direction = {
                    "id": city["id"],
                    "name": city["name"],
                    "country_name": country_data["country_name"],
                    "country_code": country_data["country_id"],
                    "region_code": city["region_code"],
                    "image_link": self.photo_service.get_fallback_image(
                        country_data["country_id"], 
                        city["name"]
                    ),
                    "min_price": float(city["price"]),
                    "type": "region"
                }
                all_directions.append(direction)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
        if limit:
            all_directions = all_directions[:limit]
        
        logger.info(f"üé≠ –°–æ–∑–¥–∞–Ω–æ {len(all_directions)} fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return all_directions
    
    def _get_country_name(self, country_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É"""
        country_map = {
            1: "–ï–≥–∏–ø–µ—Ç", 4: "–¢—É—Ä—Ü–∏—è", 8: "–ì—Ä–µ—Ü–∏—è", 9: "–ö–∏–ø—Ä", 11: "–ë–æ–ª–≥–∞—Ä–∏—è",
            15: "–û–ê–≠", 16: "–¢—É–Ω–∏—Å", 17: "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è", 19: "–ò—Å–ø–∞–Ω–∏—è", 20: "–ò—Ç–∞–ª–∏—è",
            22: "–¢–∞–∏–ª–∞–Ω–¥", 23: "–ò–Ω–¥–∏—è", 24: "–®—Ä–∏-–õ–∞–Ω–∫–∞", 25: "–í—å–µ—Ç–Ω–∞–º", 26: "–ö–∏—Ç–∞–π",
            27: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", 28: "–ú–∞–ª–∞–π–∑–∏—è", 29: "–°–∏–Ω–≥–∞–ø—É—Ä", 30: "–§–∏–ª–∏–ø–ø–∏–Ω—ã",
            31: "–ú–∞–≤—Ä–∏–∫–∏–π", 32: "–°–µ–π—à–µ–ª—ã", 33: "–¢–∞–Ω–∑–∞–Ω–∏—è", 34: "–ö–µ–Ω–∏—è", 35: "–ú–∞–ª—å–¥–∏–≤—ã"
        }
        return country_map.get(country_code, f"–°—Ç—Ä–∞–Ω–∞ {country_code}")
    
    async def clear_cities_cache(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        try:
            cache_keys = await self.cache.get_keys_pattern("city_directions_*")
            
            cleared_count = 0
            for key in cache_keys:
                if await self.cache.delete(key):
                    cleared_count += 1
            
            logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {cleared_count} –∫–ª—é—á–µ–π –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º")
            return cleared_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            return 0
    
    async def get_cities_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        try:
            cache_keys = await self.cache.get_keys_pattern("city_directions_*")
            
            cache_info = {}
            for key in cache_keys:
                try:
                    cached_data = await self.cache.get(key)
                    if cached_data:
                        cache_info[key] = {
                            "count": len(cached_data),
                            "countries": list(set([item.get("country_name", "Unknown") for item in cached_data])),
                            "sample_regions": [item.get("name", "Unknown") for item in cached_data[:3]]
                        }
                except:
                    cache_info[key] = {"error": "Cannot read cache"}
            
            return {
                "cache_status": {
                    "cached_variants": len(cache_keys),
                    "cache_details": cache_info
                },
                "endpoints": {
                    "get_all_cities": "/api/v1/tours/directions/cities",
                    "get_cities_by_country": "/api/v1/tours/directions/cities?country_code=1",
                    "get_limited_cities": "/api/v1/tours/directions/cities?limit=10",
                    "clear_cache": "/api/v1/tours/directions/cities/clear-cache"
                },
                "features": {
                    "country_filtering": True,
                    "limit_support": True,
                    "photo_integration": True,
                    "price_calculation": True,
                    "fallback_data": True
                }
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "recommendation": "Check TourVisor API connection"
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
city_directions_service = CityDirectionsService()