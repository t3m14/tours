import smtplib
import asyncio
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import Optional
from concurrent.futures import ThreadPoolExecutor

from app.config import settings
from app.models.application import Application
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class EmailService:
    def __init__(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Gmail –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.smtp_host = os.getenv("SMTP_HOST", "smtp.gmail.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.smtp_username = os.getenv("SMTP_USERNAME", "advice.notifications@gmail.com")
        self.smtp_password = os.getenv("SMTP_PASSWORD", "tven oyop yxgf tltf")
        self.email_from = os.getenv("EMAIL_FROM", "advice.notifications@gmail.com")
        self.email_to = os.getenv("EMAIL_TO", "temi4174@mail.ru")
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        self.smtp_password = self.smtp_password.strip().strip("'\"").replace(" ", "")
        self.smtp_username = self.smtp_username.strip().strip("'\"")
        self.email_from = self.email_from.strip().strip("'\"")
        
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"üîß EMAIL SERVICE INIT:")
        logger.info(f"  SMTP_HOST: {self.smtp_host}")
        logger.info(f"  SMTP_PORT: {self.smtp_port}")
        logger.info(f"  SMTP_USERNAME: {self.smtp_username}")
        logger.info(f"  SMTP_PASSWORD: {'*' * len(self.smtp_password)} (len={len(self.smtp_password)})")
        logger.info(f"  EMAIL_FROM: {self.email_from}")
        logger.info(f"  EMAIL_TO: {self.email_to}")

    def _create_application_email(self, application: Application) -> MIMEMultipart:
        """–°–æ–∑–¥–∞–Ω–∏–µ email —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ"""
        msg = MIMEMultipart()
        msg['From'] = self.email_from
        msg['To'] = self.email_to
        msg['Subject'] = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {application.type} - {application.name}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        body = f"""
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞

–¢–∏–ø –∑–∞—è–≤–∫–∏: {application.type}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {application.created_at.strftime('%d.%m.%Y %H:%M:%S')}

=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï ===
–ò–º—è: {application.name}
–¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}
Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ë–ª–∏–∂–∞–π—à–∏–π –æ—Ñ–∏—Å: {application.nearest_office or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: {application.communication_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
{application.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
ID –∑–∞—è–≤–∫–∏: {application.id}
–°—Ç–∞—Ç—É—Å: {application.status}

---
–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
"""
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        return msg
    
    def _send_email_sync(self, msg: MIMEMultipart) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email"""
        try:
            logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:")
            logger.info(f"  Host: {self.smtp_host}:{self.smtp_port}")
            logger.info(f"  Login: {self.smtp_username}")
            logger.info(f"  Password length: {len(self.smtp_password)}")
            logger.info(f"  From: {self.email_from}")
            logger.info(f"  To: {self.email_to}")
            
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                
                text = msg.as_string()
                server.sendmail(self.email_from, self.email_to, text)
            
            logger.info("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            logger.error(f"üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏: host={self.smtp_host}, port={self.smtp_port}")
            logger.error(f"üîç Username: {self.smtp_username}")
            logger.error(f"üîç Password: {self.smtp_password[:4]}...{self.smtp_password[-4:]} (len={len(self.smtp_password)})")
            return False
    
    async def send_application_email(self, application: Application) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∑–∞—è–≤–∫–æ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            msg = self._create_application_email(application)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ thread pool —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor, 
                self._send_email_sync, 
                msg
            )
            
            if result:
                logger.info(f"‚úÖ Email —Å –∑–∞—è–≤–∫–æ–π {application.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –∑–∞—è–≤–∫–æ–π {application.id}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —Å –∑–∞—è–≤–∫–æ–π {application.id}: {e}")
            return False
    
    def _send_notification_sync(self, subject: str, body: str, to_email: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email_from
            msg['To'] = to_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                
                text = msg.as_string()
                server.sendmail(self.email_from, to_email, text)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{subject}': {e}")
            return False
    
    async def send_notification_email(self, subject: str, body: str, to_email: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            target_email = to_email or self.email_to
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ thread pool
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._send_notification_sync,
                subject,
                body,
                target_email
            )
            
            if result:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{subject}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{subject}'")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{subject}': {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
email_service = EmailService()