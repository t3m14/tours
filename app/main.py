# app/main.py

from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import asyncio

from app.config import settings
from app.api.v1 import tours, hotels, references, applications, sitemap
from app.api.websockets import websocket_manager
from app.tasks.cache_warmup import warm_up_cache
from app.tasks.random_tours_update import update_random_tours
from app.tasks.mass_directions_update import periodic_directions_update, initial_directions_collection
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    logger.info("üîß –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    try:
        # 1. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        logger.info("üåç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        asyncio.create_task(initial_directions_collection())
        
        # 2. –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
        logger.info("üé≤ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤...")
        asyncio.create_task(update_random_tours())
        
        # 3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞)
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        asyncio.create_task(periodic_directions_update())
        
        # 4. –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        async def delayed_cache_warmup():
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç –∑–∞–¥–µ—Ä–∂–∫–∞
            await warm_up_cache()
        
        logger.info("üî• –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)...")
        asyncio.create_task(delayed_cache_warmup())
        
        logger.info("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    yield
    
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

app = FastAPI(
    title="Travel Agency Backend",
    description="Backend –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π TourVisor API –∏ –º–∞—Å—Å–æ–≤—ã–º —Å–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
    version="2.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# API routes
app.include_router(tours.router, prefix="/api/v1/tours", tags=["tours"])
app.include_router(hotels.router, prefix="/api/v1/hotels", tags=["hotels"])
app.include_router(references.router, prefix="/api/v1/references", tags=["references"])
app.include_router(applications.router, prefix="/api/v1/applications", tags=["applications"])
app.include_router(sitemap.router, prefix="/sitemap", tags=["sitemap"])

# WebSocket endpoint
@app.websocket("/ws/tours/{request_id}")
async def websocket_tours(websocket: WebSocket, request_id: str):
    await websocket_manager.connect(websocket, request_id)

@app.get("/")
async def root():
    return {
        "message": "Travel Agency Backend API", 
        "version": "2.0.0",
        "features": [
            "–ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω",
            "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –¥–Ω–µ–π)",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            "Real-time –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket",
            "–°–ª—É—á–∞–π–Ω—ã–µ —Ç—É—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
            "–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ —Å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
        ]
    }

@app.get("/health")
async def health_check():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from app.services.mass_directions_collector import mass_directions_collector
        from app.services.cache_service import cache_service
        
        health_status = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "components": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        try:
            await cache_service.set("health_check", "test", ttl=60)
            test_value = await cache_service.get("health_check")
            await cache_service.delete("health_check")
            
            health_status["components"]["cache"] = {
                "status": "healthy" if test_value == "test" else "degraded"
            }
        except Exception as e:
            health_status["components"]["cache"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        try:
            directions_status = await mass_directions_collector.get_collection_status()
            master_cache = directions_status.get("master_cache", {})
            
            health_status["components"]["directions"] = {
                "status": "healthy" if master_cache.get("exists") else "needs_initialization",
                "directions_count": master_cache.get("directions_count", 0),
                "last_collection": master_cache.get("last_collection")
            }
        except Exception as e:
            health_status["components"]["directions"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        component_statuses = [comp["status"] for comp in health_status["components"].values()]
        if all(s in ["healthy", "needs_initialization"] for s in component_statuses):
            health_status["status"] = "healthy"
        elif any(s == "unhealthy" for s in component_statuses):
            health_status["status"] = "unhealthy"
        else:
            health_status["status"] = "degraded"
        
        return health_status
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/system-info")
async def get_system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∏ –µ—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
    return {
        "application": {
            "name": "Travel Agency Backend",
            "version": "2.0.0",
            "description": "Backend –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —Å –º–∞—Å—Å–æ–≤—ã–º —Å–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
        },
        "features": {
            "mass_directions_collection": {
                "description": "–ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω",
                "cache_duration": "30 –¥–Ω–µ–π",
                "automatic_updates": True,
                "real_photos": True,
                "price_calculation": True
            },
            "random_tours": {
                "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
                "hotel_type_filtering": True,
                "multiple_strategies": ["hot_tours", "search", "mock"]
            },
            "real_time_search": {
                "description": "Real-time –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket",
                "progress_tracking": True,
                "continue_search": True
            },
            "applications_system": {
                "description": "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫",
                "email_notifications": True,
                "storage_duration": "30 –¥–Ω–µ–π"
            }
        },
        "endpoints": {
            "directions": {
                "get": "/api/v1/tours/directions",
                "collect_all": "/api/v1/tours/directions/collect-all",
                "status": "/api/v1/tours/directions/status",
                "refresh": "/api/v1/tours/directions/refresh"
            },
            "random_tours": {
                "get": "/api/v1/tours/random",
                "post": "/api/v1/tours/random",
                "generate": "/api/v1/tours/random/generate"
            },
            "search": {
                "start": "/api/v1/tours/search",
                "status": "/api/v1/tours/search/{id}/status",
                "results": "/api/v1/tours/search/{id}/results",
                "websocket": "/ws/tours/{id}"
            }
        },
        "background_tasks": {
            "directions_update": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            "random_tours_update": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤", 
            "cache_warmup": "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞"
        }
    }

if __name__ == "__main__":
    import uvicorn
    from datetime import datetime
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )