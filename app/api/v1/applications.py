import uuid
from datetime import datetime
from typing import List
from fastapi import APIRouter, HTTPException, BackgroundTasks

from app.models.application import ApplicationRequest, ApplicationResponse, Application, ApplicationRequestRaw
from app.services.email_service import email_service
from app.services.cache_service import cache_service
from app.utils.logger import setup_logger
from app.config import settings
from pytz import timezone
from datetime import timedelta
logger = setup_logger(__name__)
router = APIRouter()

@router.post("/submit", response_model=ApplicationResponse)
async def submit_application(
    application_request: ApplicationRequest,
    background_tasks: BackgroundTasks
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –∏–ª–∏ email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        application_id = str(uuid.uuid4())
        application = Application(
            id=application_id,
            type=application_request.type,
            name=application_request.name,
            phone=application_request.phone,
            email=application_request.email,
            nearest_office=application_request.nearest_office,
            communication_time=application_request.communication_time,
            description=application_request.description,
            body=application_request.body,
            emailTo=application_request.emailTo,  # –ù–û–í–û–ï –ü–û–õ–ï!
            created_at=datetime.now(tz=timezone('Asia/Yekaterinburg')),
            status="new"
        )
        
        # üéØ –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_email = (
            application_request.emailTo or           # –°–Ω–∞—á–∞–ª–∞ –∏–∑ –∑–∞—è–≤–∫–∏
            settings.EMAIL_TO or                     # –ü–æ—Ç–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            "alexandratur@yandex.ru"                 # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        )
        
        logger.info(f"üìß –ó–∞—è–≤–∫–∞ {application_id} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞: {recipient_email}")
        logger.info(f"üìß emailTo –∏–∑ –∑–∞—è–≤–∫–∏: {application_request.emailTo}")
        logger.info(f"üìß EMAIL_TO –∏–∑ settings: {settings.EMAIL_TO}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        if application.body:
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω HTML body –¥–ª—è –∑–∞—è–≤–∫–∏ {application_id}, –¥–ª–∏–Ω–∞: {len(application.body)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Redis
        await cache_service.set(
            f"application:{application_id}",
            application.model_dump(),
            ttl=2592000  # 30 –¥–Ω–µ–π
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
        all_applications = await cache_service.get("all_applications") or []
        all_applications.append(application_id)
        await cache_service.set("all_applications", all_applications, ttl=2592000)
        
        # üéØ –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º recipient_email –≤ email_service!
        background_tasks.add_task(
            email_service.send_application_email, 
            application, 
            recipient_email  # ‚Üê –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {application_id} –æ—Ç {application.name}")
        
        return ApplicationResponse(
            success=True,
            message=f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {recipient_email}. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            application_id=application_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def get_application(application_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –ø–æ ID
    """
    try:
        application_data = await cache_service.get(f"application:{application_id}")
        
        if not application_data:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return Application(**application_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {application_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")


@router.post("/submit/raw", response_model=ApplicationResponse)
async def submit_raw_application(
    application_request: ApplicationRequestRaw,
    background_tasks: BackgroundTasks
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—ã—Ä–æ–≥–æ HTML –Ω–∞ email
    """
    try:
        # üéØ –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_email = (
            application_request.emailTo or           # –°–Ω–∞—á–∞–ª–∞ –∏–∑ –∑–∞—è–≤–∫–∏
            settings.EMAIL_TO or                     # –ü–æ—Ç–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫  
            "alexandratur@yandex.ru"                 # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        )
        
        logger.info(f"=== –ù–ê–ß–ê–õ–û –û–¢–õ–ê–î–ö–ò EMAIL –û–¢–ü–†–ê–í–ö–ò ===")
        logger.info(f"üìß emailTo –∏–∑ –∑–∞—è–≤–∫–∏: '{application_request.emailTo}'")
        logger.info(f"üìß EMAIL_TO –∏–∑ settings: '{settings.EMAIL_TO}'")
        logger.info(f"üìß –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å: '{recipient_email}'")
        
        if not recipient_email:
            logger.error("‚ùå EMAIL_TO –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            raise HTTPException(
                status_code=500,
                detail="Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            )
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTML
        original_html = application_request.body
        fixed_html = email_service._fix_html_tags(original_html)
        
        logger.info(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π HTML ({len(original_html)} —Å–∏–º–≤–æ–ª–æ–≤)")
        logger.info(f"üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML ({len(fixed_html)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # üéØ –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º recipient_email!
        try:
            result = await email_service.send_notification_email(
                "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞",
                fixed_html,
                recipient_email  # ‚Üê –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
            )
            
            logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–ü–†–ê–í–ö–ò: {result}")
            
            if result:
                logger.info("‚úÖ EMAIL –û–¢–ü–†–ê–í–õ–ï–ù –£–°–ü–ï–®–ù–û!")
                return ApplicationResponse(
                    success=True,
                    message=f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {recipient_email}",
                    application_id=None
                )
            else:
                logger.error("‚ùå EMAIL –ù–ï –û–¢–ü–†–ê–í–õ–ï–ù")
                raise HTTPException(
                    status_code=500,
                    detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
                )
                
        except Exception as email_error:
            logger.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–ò –û–¢–ü–†–ê–í–ö–ï EMAIL: {email_error}")
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ email: {str(email_error)}"
            )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê –í –≠–ù–î–ü–û–ô–ù–¢–ï: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        )

@router.get("/", response_model=List[Application])
async def get_all_applications(limit: int = 50, offset: int = 0):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
    """
    try:
        all_application_ids = await cache_service.get("all_applications") or []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        paginated_ids = all_application_ids[offset:offset + limit]
        
        applications = []
        for app_id in paginated_ids:
            app_data = await cache_service.get(f"application:{app_id}")
            if app_data:
                applications.append(Application(**app_data))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        applications.sort(key=lambda x: x.created_at, reverse=True)
        
        return applications
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

@router.patch("/{application_id}/status")
async def update_application_status(application_id: str, status: str):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
    """
    try:
        application_data = await cache_service.get(f"application:{application_id}")
        
        if not application_data:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        application_data["status"] = status
        
        await cache_service.set(
            f"application:{application_id}",
            application_data,
            ttl=2592000
        )
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {application_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")
        
        return {"success": True, "message": f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {application_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")