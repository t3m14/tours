import asyncio
from typing import Dict, Any
from datetime import datetime, timedelta

from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class PriceService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ —Ç—É—Ä–æ–≤"""
    
    @staticmethod
    def get_default_prices() -> Dict[int, float]:
        """–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
        return {
            1: 85000.0,    # –ï–≥–∏–ø–µ—Ç
            4: 75000.0,    # –¢—É—Ä—Ü–∏—è
            22: 180000.0,  # –¢–∞–∏–ª–∞–Ω–¥
            8: 95000.0,    # –ì—Ä–µ—Ü–∏—è
            15: 120000.0,  # –û–ê–≠
            35: 250000.0   # –ú–∞–ª—å–¥–∏–≤—ã
        }
    
    async def get_country_min_price(self, country_code: int, country_name: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {country_name}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
            price_search_variants = [
                {  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é
                    "nightsfrom": 7, "nightsto": 10,
                    "adults": 2, "child": 0
                },
                {  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç—É—Ä
                    "nightsfrom": 3, "nightsto": 7,
                    "adults": 2, "child": 0
                },
                {  # –î–ª–∏–Ω–Ω—ã–π —Ç—É—Ä
                    "nightsfrom": 10, "nightsto": 14,
                    "adults": 2, "child": 0
                }
            ]
            
            best_price = None
            
            for variant in price_search_variants:
                try:
                    search_params = {
                        "departure": 1,  # –ú–æ—Å–∫–≤–∞
                        "country": country_code,
                        "datefrom": (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y"),
                        "dateto": (datetime.now() + timedelta(days=21)).strftime("%d.%m.%Y"),
                        **variant
                    }
                    
                    request_id = await tourvisor_client.search_tours(search_params)
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
                    for attempt in range(5):
                        await asyncio.sleep(1)
                        
                        status_result = await tourvisor_client.get_search_status(request_id)
                        status_data = status_result.get("data", {}).get("status", {})
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Å—Ç–∞—Ç—É—Å–µ
                        min_price_from_status = status_data.get("minprice")
                        if min_price_from_status and float(min_price_from_status) > 0:
                            price = float(min_price_from_status)
                            if best_price is None or price < best_price:
                                best_price = price
                            logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ {price} –¥–ª—è {country_name} (–≤–∞—Ä–∏–∞–Ω—Ç {variant})")
                            break
                        
                        if status_data.get("state") == "finished":
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
                            results = await tourvisor_client.get_search_results(request_id, 1, 5)
                            extracted_price = self._extract_min_price_from_results(results)
                            if extracted_price > 0:
                                if best_price is None or extracted_price < best_price:
                                    best_price = extracted_price
                                logger.info(f"üí∞ –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Ü–µ–Ω–∞ {extracted_price} –¥–ª—è {country_name}")
                            break
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–∏–µ–º–ª–µ–º—É—é —Ü–µ–Ω—É, –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    if best_price and best_price > 0:
                        break
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    await asyncio.sleep(0.3)
                    
                except Exception as variant_error:
                    logger.debug(f"üí∞ –û—à–∏–±–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ü–µ–Ω—ã {variant}: {variant_error}")
                    continue
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ü–µ–Ω—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
            if best_price and best_price > 0:
                logger.info(f"üí∞‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {country_name}: {best_price}")
                return best_price
            
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ü–µ–Ω—É
            default_prices = self.get_default_prices()
            fallback_price = default_prices.get(country_code, 80000.0)
            logger.warning(f"üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {country_name}: {fallback_price}")
            return fallback_price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {country_name}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ü–µ–Ω—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            default_prices = self.get_default_prices()
            return default_prices.get(country_code, 80000.0)
    
    def _extract_min_price_from_results(self, results: Dict[str, Any]) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            data = results.get("data", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = data.get("status", {})
            min_price_from_status = status.get("minprice")
            if min_price_from_status:
                return float(min_price_from_status)
            
            # –ò—â–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            prices = []
            for hotel in hotel_list:
                hotel_price = hotel.get("price")
                if hotel_price:
                    prices.append(float(hotel_price))
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã —Ç—É—Ä–æ–≤
                tours = hotel.get("tours", {}).get("tour", [])
                if not isinstance(tours, list):
                    tours = [tours] if tours else []
                
                for tour in tours:
                    tour_price = tour.get("price")
                    if tour_price:
                        prices.append(float(tour_price))
            
            return min(prices) if prices else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return 0.0

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Ü–µ–Ω
price_service = PriceService()