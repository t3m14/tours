# app/main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import asyncio
from datetime import datetime

from app.config import settings
from app.api.v1 import tours, hotels, references, applications, sitemap
from app.api.websockets import websocket_manager
from app.tasks.cache_warmup import warm_up_cache
from app.tasks.random_tours_update import update_random_tours
from app.tasks.mass_directions_update import periodic_directions_update, initial_directions_collection
# –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
from app.tasks.directions_cache_update import start_directions_cache_update_task, stop_directions_cache_update_task
# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
from app.tasks.random_tours_cache_update import start_random_tours_cache_update_task, stop_random_tours_cache_update_task
from app.utils.logger import setup_logger
from fastapi.staticfiles import StaticFiles
import os


logger = setup_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á
directions_cache_task = None
random_tours_cache_task = None
random_tours_task = None
mass_directions_task = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    logger.info("üîß –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    global directions_cache_task, random_tours_cache_task, random_tours_task, mass_directions_task
    
    try:
        # 1. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        logger.info("üåç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        asyncio.create_task(initial_directions_collection())
        
        # 2. –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        logger.info("üé≤ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)...")
        random_tours_task = asyncio.create_task(update_random_tours())
        
        # 3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞)
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        mass_directions_task = asyncio.create_task(periodic_directions_update())
        
        # 4. –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        logger.info("üìÖ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        try:
            directions_cache_task = asyncio.create_task(start_directions_cache_update_task())
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        
        # 5. –ù–û–í–û–ï: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
        logger.info("üé≤ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤...")
        try:
            random_tours_cache_task = asyncio.create_task(start_random_tours_cache_update_task())
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        
        # 6. –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        async def delayed_cache_warmup():
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç –∑–∞–¥–µ—Ä–∂–∫–∞
            await warm_up_cache()
        
        logger.info("üî• –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)...")
        asyncio.create_task(delayed_cache_warmup())
        
        logger.info("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    yield
    
    # Shutdown - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if directions_cache_task:
        try:
            logger.info("üìÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            await stop_directions_cache_update_task()
            directions_cache_task.cancel()
            try:
                await directions_cache_task
            except asyncio.CancelledError:
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
    
    # –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    if random_tours_cache_task:
        try:
            logger.info("üé≤ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤...")
            await stop_random_tours_cache_update_task()
            random_tours_cache_task.cancel()
            try:
                await random_tours_cache_task
            except asyncio.CancelledError:
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
    for task_name, task in [
        ("random_tours", random_tours_task),
        ("mass_directions", mass_directions_task)
    ]:
        if task and not task.done():
            try:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ {task_name}...")
                task.cancel()
                await task
            except asyncio.CancelledError:
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ {task_name}: {e}")
    
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

app = FastAPI(
    title="Travel Agency Backend",
    description="Backend –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —Å –ø–æ–ª–Ω—ã–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
    version="2.2.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# API routes
app.include_router(tours.router, prefix="/api/v1/tours", tags=["tours"])
app.include_router(hotels.router, prefix="/api/v1/hotels", tags=["hotels"])
app.include_router(references.router, prefix="/api/v1/references", tags=["references"])
app.include_router(applications.router, prefix="/api/v1/applications", tags=["applications"])
app.include_router(sitemap.router, prefix="/sitemap", tags=["sitemap"])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
from app.api.v1.directions import router as directions_router
app.include_router(
    directions_router, 
    prefix="/api/v1/directions", 
    tags=["Directions - –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"]
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
from app.api.v1.directions_cache import router as directions_cache_router
app.include_router(
    directions_cache_router,
    prefix="/api/v1",
    tags=["Directions Cache Management"]
)

# –ù–û–í–û–ï: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
from app.api.v1.random_tours_cache import router as random_tours_cache_router
app.include_router(
    random_tours_cache_router,
    prefix="/api/v1",
    tags=["Random Tours Cache Management"]
)

# WebSocket endpoint
@app.websocket("/ws/tours/{request_id}")
async def websocket_tours(websocket: WebSocket, request_id: str):
    await websocket_manager.connect(websocket, request_id)

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º @app.get –≤–º–µ—Å—Ç–æ @router.get
@app.get("/")
async def root():
    return {
        "message": "Travel Agency Backend API", 
        "version": "2.2.0",
        "features": [
            "–ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ —Å hoteltypes —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
            "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –¥–Ω–µ–π)",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            "Real-time –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket",
            "–°–ª—É—á–∞–π–Ω—ã–µ —Ç—É—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ TourVisor API",
            "–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ —Å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
            "API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ –∫—ç—à–∞"
        ],
        "cache_management": {
            "directions": {
                "auto_update": "–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞",
                "status": "/api/v1/directions/cache/status",
                "force_update": "/api/v1/directions/cache/force-update",
                "health_check": "/api/v1/directions/cache/health"
            },
            "random_tours": {
                "auto_update": "–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤", 
                "status": "/api/v1/random-tours/cache/status",
                "force_update": "/api/v1/random-tours/cache/force-update",
                "health_check": "/api/v1/random-tours/cache/health",
                "hotel_types": "/api/v1/random-tours/cache/hotel-types",
                "api_integration": "TourVisor hoteltypes —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"
            }
        }
    }

@app.get("/health")
async def health_check():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å –æ–±–µ–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        from app.services.mass_directions_collector import mass_directions_collector
        from app.services.cache_service import cache_service
        from app.tasks.directions_cache_update import directions_cache_update_service
        # –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
        from app.tasks.random_tours_cache_update import random_tours_cache_update_service
        
        health_status = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "components": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        try:
            await cache_service.set("health_check", "test", ttl=60)
            test_value = await cache_service.get("health_check")
            await cache_service.delete("health_check")
            
            health_status["components"]["cache"] = {
                "status": "healthy" if test_value == "test" else "degraded"
            }
        except Exception as e:
            health_status["components"]["cache"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        try:
            directions_status = await mass_directions_collector.get_collection_status()
            master_cache = directions_status.get("master_cache", {})
            
            health_status["components"]["directions"] = {
                "status": "healthy" if master_cache.get("exists") else "needs_initialization",
                "directions_count": master_cache.get("directions_count", 0),
                "last_collection": master_cache.get("last_collection")
            }
        except Exception as e:
            health_status["components"]["directions"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        try:
            directions_cache_status = await directions_cache_update_service.get_update_status()
            
            health_status["components"]["directions_cache_auto_update"] = {
                "status": "running" if directions_cache_status.get("is_running") else "stopped",
                "last_update": directions_cache_status.get("last_update"),
                "scheduler_running": directions_cache_status.get("is_running", False)
            }
        except Exception as e:
            health_status["components"]["directions_cache_auto_update"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
        try:
            random_tours_cache_status = await random_tours_cache_update_service.get_update_status()
            
            health_status["components"]["random_tours_cache_auto_update"] = {
                "status": "running" if random_tours_cache_status.get("is_running") else "stopped",
                "last_update": random_tours_cache_status.get("last_update"),
                "current_hotel_type": random_tours_cache_status.get("current_hotel_type"),
                "scheduler_running": random_tours_cache_status.get("is_running", False),
                "supported_hotel_types": len(random_tours_cache_status.get("hotel_types_supported", []))
            }
        except Exception as e:
            health_status["components"]["random_tours_cache_auto_update"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        component_statuses = [comp["status"] for comp in health_status["components"].values()]
        if all(s in ["healthy", "needs_initialization", "running"] for s in component_statuses):
            health_status["status"] = "healthy"
        elif any(s == "unhealthy" for s in component_statuses):
            health_status["status"] = "unhealthy"
        else:
            health_status["status"] = "degraded"
        
        return health_status
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/system-info")
async def get_system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∏ –µ—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
    return {
        "application": {
            "name": "Travel Agency Backend",
            "version": "2.2.0",
            "description": "Backend –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —Å –ø–æ–ª–Ω—ã–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"
        },
        "features": {
            "mass_directions_collection": {
                "description": "–ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω",
                "cache_duration": "30 –¥–Ω–µ–π",
                "automatic_updates": True,
                "real_photos": True,
                "price_calculation": True
            },
            "auto_directions_cache": {
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞",
                "interval": "24 —á–∞—Å–∞",
                "batch_processing": True,
                "quality_control": True,
                "retry_mechanism": True,
                "api_management": True,
                "monitoring": True
            },
            "auto_random_tours_cache": {
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —Å hoteltypes —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
                "interval": "12 —á–∞—Å–æ–≤",
                "hotel_types": ["–ª—é–±–æ–π", "–∞–∫—Ç–∏–≤–Ω—ã–π", "—Ä–µ–ª–∞–∫—Å", "—Å–µ–º–µ–π–Ω—ã–π", "–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π", "–≥–æ—Ä–æ–¥—Å–∫–æ–π", "–ø–ª—è–∂–Ω—ã–π", "–¥–µ–ª—é–∫—Å"],
                "api_integration": "TourVisor hoteltypes –ø–æ–ª–µ",
                "tours_per_type": 8,
                "generation_strategies": ["search", "hot_tours", "mock"],
                "quality_tracking": True,
                "api_management": True
            },
            "real_time_search": {
                "description": "Real-time –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket",
                "progress_tracking": True,
                "continue_search": True
            },
            "applications_system": {
                "description": "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫",
                "email_notifications": True,
                "storage_duration": "30 –¥–Ω–µ–π"
            }
        },
        "endpoints": {
            "directions": {
                "get": "/api/v1/tours/directions",
                "collect_all": "/api/v1/tours/directions/collect-all",
                "status": "/api/v1/tours/directions/status",
                "refresh": "/api/v1/tours/directions/refresh",
                "new_service": {
                    "by_country": "/api/v1/directions/country/{country_id}",
                    "flat_format": "/api/v1/directions/country/{country_id}/flat",
                    "quick_mode": "/api/v1/directions/country/{country_id}/quick",
                    "countries_list": "/api/v1/directions/countries/list"
                }
            },
            "cache_management": {
                "directions": {
                    "status": "/api/v1/directions/cache/status",
                    "detailed_stats": "/api/v1/directions/cache/stats",
                    "health_check": "/api/v1/directions/cache/health",
                    "force_update": "/api/v1/directions/cache/force-update",
                    "scheduler": {
                        "start": "/api/v1/directions/cache/scheduler/start",
                        "stop": "/api/v1/directions/cache/scheduler/stop"
                    }
                },
                "random_tours": {
                    "status": "/api/v1/random-tours/cache/status",
                    "detailed_stats": "/api/v1/random-tours/cache/stats", 
                    "health_check": "/api/v1/random-tours/cache/health",
                    "force_update": "/api/v1/random-tours/cache/force-update",
                    "clear_cache": "/api/v1/random-tours/cache/clear",
                    "hotel_types": "/api/v1/random-tours/cache/hotel-types",
                    "generate_specific": "/api/v1/random-tours/cache/generate/{hotel_type}",
                    "preview": "/api/v1/random-tours/cache/preview/{hotel_type}",
                    "compare_strategies": "/api/v1/random-tours/cache/compare-strategies/{hotel_type}",
                    "scheduler": {
                        "start": "/api/v1/random-tours/cache/scheduler/start",
                        "stop": "/api/v1/random-tours/cache/scheduler/stop"
                    }
                }
            },
            "random_tours": {
                "get": "/api/v1/tours/random",
                "post": "/api/v1/tours/random",
                "generate": "/api/v1/tours/random/generate"
            },
            "search": {
                "start": "/api/v1/tours/search",
                "status": "/api/v1/tours/search/{id}/status",
                "results": "/api/v1/tours/search/{id}/results",
                "websocket": "/ws/tours/{id}"
            }
        },
        "background_tasks": {
            "directions_auto_cache": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞",
            "random_tours_auto_cache": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ —Å hoteltypes API",
            "directions_update": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", 
            "random_tours_update": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)", 
            "cache_warmup": "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞"
        },
        "configuration": {
            "directions_cache": {
                "update_interval": "24 —á–∞—Å–∞ (CACHE_UPDATE_INTERVAL_HOURS)",
                "batch_size": "3 —Å—Ç—Ä–∞–Ω—ã (CACHE_UPDATE_BATCH_SIZE)",
                "search_timeout": "120 —Å–µ–∫—É–Ω–¥ (CACHE_SEARCH_TIMEOUT)",
                "auto_start": "–í–∫–ª—é—á–µ–Ω (CACHE_AUTO_START)"
            },
            "random_tours_cache": {
                "update_interval": "12 —á–∞—Å–æ–≤ (RANDOM_TOURS_UPDATE_INTERVAL_HOURS)",
                "tours_per_type": "8 —Ç—É—Ä–æ–≤ (RANDOM_TOURS_PER_TYPE)",
                "strategies": "search,hot_tours,mock (RANDOM_TOURS_STRATEGIES)",
                "countries": "1,2,4,9,8 (RANDOM_TOURS_COUNTRIES)",
                "hotel_types": "8 —Ç–∏–ø–æ–≤ —Å hoteltypes API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
                "auto_start": "–í–∫–ª—é—á–µ–Ω (RANDOM_TOURS_AUTO_START)"
            }
        }
    }

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
static_path = os.path.join(os.path.dirname(__file__), "services", "mockup_images")
if os.path.exists(static_path):
    app.mount("/static/mockup_images", StaticFiles(directory=static_path), name="mockup_images")
    logger.info(f"üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã mockup_images –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: {static_path}")
else:
    logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {static_path}")
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(static_path, exist_ok=True)
    logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫: {static_path}")

if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )