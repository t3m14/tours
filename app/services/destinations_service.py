# app/services/destinations_service.py (–≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–µ–ª—è—Ö)

import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from app.services.cache_service import cache_service
from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class DestinationsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤"""
    
    def __init__(self):
        self.cache = cache_service
        self.CACHE_KEY = "destinations_search_based"
        self.CACHE_TTL = 86400  # 24 —á–∞—Å–∞
    
    async def get_destinations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        logger.info("üèñÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached = await self.cache.get(self.CACHE_KEY)
        if cached:
            logger.info(f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞")
            return cached
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        destinations = await self._collect_destinations_via_search()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if destinations:
            await self.cache.set(self.CACHE_KEY, destinations, ttl=self.CACHE_TTL)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(destinations)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫—ç—à")
        
        return destinations
    
    async def _collect_destinations_via_search(self) -> List[Dict[str, Any]]:
        """–°–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤"""
        destinations = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–æ—Ä—Ç—ã –∏–∑ API
        countries_regions = await self._get_countries_with_regions()
        
        if not countries_regions:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É—Ä–æ—Ä—Ç–æ–≤ –∏–∑ API")
            return []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 15)
        tasks = []
        for country_id, country_name, region_id, region_name in countries_regions[:15]:
            task = asyncio.create_task(
                self._search_destination(country_id, country_name, region_id, region_name)
            )
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        logger.info(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º {len(tasks)} –ø–æ–∏—Å–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict) and result:  # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                destinations.append(result)
                photo_type = "—Ä–µ–∞–ª—å–Ω–æ–µ" if not "placeholder" in result['image_link'] else "fallback"
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {result['name']} - {result['min_price']} —Ä—É–±, —Ñ–æ—Ç–æ: {photo_type}")
            elif isinstance(result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result}")
        
        logger.info(f"üéØ –°–æ–±—Ä–∞–Ω–æ {len(destinations)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return destinations
    
    async def _get_countries_with_regions(self) -> List[tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –∫—É—Ä–æ—Ä—Ç–∞–º–∏"""
        countries_regions = []
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        countries = {1: "–ï–≥–∏–ø–µ—Ç", 4: "–¢—É—Ä—Ü–∏—è", 22: "–¢–∞–∏–ª–∞–Ω–¥"}
        
        for country_id, country_name in countries.items():
            try:
                logger.info(f"üåç –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–æ—Ä—Ç—ã –¥–ª—è {country_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–æ—Ä—Ç—ã
                regions_data = await tourvisor_client.get_references("region", regcountry=country_id)
                
                if not regions_data or not isinstance(regions_data, dict):
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
                regions = None
                if "lists" in regions_data and isinstance(regions_data["lists"], dict):
                    if "regions" in regions_data["lists"] and isinstance(regions_data["lists"]["regions"], dict):
                        if "region" in regions_data["lists"]["regions"]:
                            regions = regions_data["lists"]["regions"]["region"]
                
                if not regions and "region" in regions_data:
                    regions = regions_data["region"]
                
                if not regions:
                    continue
                
                if not isinstance(regions, list):
                    regions = [regions]
                
                logger.info(f"üìç {country_name}: –Ω–∞–π–¥–µ–Ω–æ {len(regions)} –∫—É—Ä–æ—Ä—Ç–æ–≤")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä–æ—Ä—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
                for region in regions[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∫—É—Ä–æ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω—É
                    region_id = region.get("id")
                    region_name = region.get("name")
                    
                    if region_id and region_name:
                        countries_regions.append((country_id, country_name, region_id, region_name))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä–æ—Ä—Ç–æ–≤ {country_name}: {e}")
                continue
        
        logger.info(f"üìç –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(countries_regions)} –∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return countries_regions
    
    async def _search_destination(self, country_id: int, country_name: str, region_id: int, region_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ search API"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –¥–ª—è {region_name} ({country_name})")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            search_params = {
                "departure": 1,  # –ú–æ—Å–∫–≤–∞
                "country": country_id,
                "region": region_id,
                "datefrom": (datetime.now() + timedelta(days=30)).strftime("%d.%m.%Y"),
                "dateto": (datetime.now() + timedelta(days=90)).strftime("%d.%m.%Y"),
                "nightsfrom": 7,
                "nightsto": 10,
                "adults": 2,
                "child": 0,
                "stars": 3
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
            request_id = await tourvisor_client.search_tours(search_params)
            if not request_id:
                return None
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            hotels_found = 0
            for attempt in range(8):
                await asyncio.sleep(1)
                
                status_result = await tourvisor_client.get_search_status(request_id)
                if not status_result:
                    continue
                
                status_data = self._extract_status(status_result)
                if not status_data:
                    continue
                
                state = status_data.get("state", "")
                hotels_found = int(status_data.get("hotelsfound", 0))
                
                if hotels_found > 0 and state in ["completed", "continue"]:
                    break
            
            if hotels_found == 0:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            results = await tourvisor_client.get_search_results(request_id, 1, 5)
            if not results:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            min_price = self._extract_min_price(results)
            if min_price is None:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ
            image_link = await self._get_hotel_photo_via_details(results, region_name)
            
            # Fallback –¥–ª—è —Ñ–æ—Ç–æ
            if not image_link:
                colors = {1: "FFD700", 4: "FF6B6B", 22: "4ECDC4"}
                color = colors.get(country_id, "6C7CE7")
                image_link = f"https://via.placeholder.com/400x300/{color}/FFFFFF?text={region_name.replace(' ', '+')}"
            
            return {
                "name": region_name,
                "country_id": country_id,
                "country_name": country_name,
                "image_link": image_link,
                "min_price": min_price
            }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {region_name}: {e}")
            return None
    
    async def _get_hotel_photo_via_details(self, search_results: Dict, region_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ"""
        try:
            logger.info(f"üì∏ –ù–û–í–´–ô –ü–û–î–•–û–î: –ò—â–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {region_name}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            hotels = self._find_hotels_in_results(search_results)
            if not hotels:
                logger.warning(f"üì∏ –ù–µ—Ç –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –¥–ª—è {region_name}")
                return None
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 3 –æ—Ç–µ–ª—è—Ö
            for i, hotel in enumerate(hotels[:3]):
                try:
                    hotel_code = hotel.get("hotelcode")
                    hotel_name = hotel.get("hotelname", "Unknown")
                    
                    if not hotel_code:
                        logger.debug(f"üì∏ –û—Ç–µ–ª—å {i+1} ({hotel_name}): –Ω–µ—Ç hotel_code")
                        continue
                    
                    logger.info(f"üì∏ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è {hotel_name} (–∫–æ–¥: {hotel_code})")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ
                    hotel_details = await tourvisor_client.get_hotel_info(hotel_code)
                    
                    if not hotel_details:
                        logger.debug(f"üì∏ –ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –æ—Ç–µ–ª—è {hotel_name}")
                        continue
                    
                    logger.info(f"üì∏ –î–ï–¢–ê–õ–ò –û–¢–ï–õ–Ø: –û—Ç–≤–µ—Ç –¥–ª—è {hotel_name}: {type(hotel_details)}")
                    if isinstance(hotel_details, dict):
                        logger.info(f"üì∏ –î–ï–¢–ê–õ–ò –û–¢–ï–õ–Ø: –ö–ª—é—á–∏: {list(hotel_details.keys())}")
                        logger.info(f"üì∏ –î–ï–¢–ê–õ–ò –û–¢–ï–õ–Ø: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (300 —Å–∏–º–≤–æ–ª–æ–≤): {str(hotel_details)[:300]}...")
                    
                    # –ò—â–µ–º —Ñ–æ—Ç–æ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    photo_url = self._extract_photo_from_hotel_details(hotel_details, hotel_name)
                    if photo_url:
                        logger.info(f"üì∏ ‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –¥–µ—Ç–∞–ª—è—Ö –æ—Ç–µ–ª—è {hotel_name}: {photo_url}")
                        return photo_url
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.3)
                    
                except Exception as hotel_error:
                    logger.debug(f"üì∏ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è {hotel.get('hotelname', 'Unknown')}: {hotel_error}")
                    continue
            
            logger.warning(f"üì∏ ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –¥–µ—Ç–∞–ª—è—Ö –æ—Ç–µ–ª–µ–π –¥–ª—è {region_name}")
            return None
            
        except Exception as e:
            logger.error(f"üì∏ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏ –¥–ª—è {region_name}: {e}")
            return None
    
    def _extract_photo_from_hotel_details(self, hotel_details: Dict, hotel_name: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        try:
            if not isinstance(hotel_details, dict):
                return None
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å —Ñ–æ—Ç–æ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            photo_fields = [
                "picture", "photo", "image", "hotelpicture", "hotelphoto", "img", "pic",
                "photo_url", "image_url", "main_photo", "main_image", "thumbnail",
                "cover_photo", "hero_image", "primary_image", "gallery", "photos", "images"
            ]
            
            logger.debug(f"üì∏ –ü–û–ò–°–ö –§–û–¢–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è {hotel_name}")
            
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –∫–æ—Ä–Ω–µ
            for field in photo_fields:
                photo_url = hotel_details.get(field)
                logger.debug(f"üì∏ –ü–æ–ª–µ '{field}': {photo_url}")
                
                if photo_url and isinstance(photo_url, str) and photo_url.startswith("http"):
                    logger.info(f"üì∏ ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–µ '{field}': {photo_url[:50]}...")
                    return photo_url
            
            # –ü–æ–∏—Å–∫ –≤ –ø–æ–¥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
            for key, value in hotel_details.items():
                if isinstance(value, dict):
                    logger.debug(f"üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç—Ä—É–∫—Ç—É—Ä—É '{key}'")
                    for field in photo_fields:
                        photo_url = value.get(field)
                        if photo_url and isinstance(photo_url, str) and photo_url.startswith("http"):
                            logger.info(f"üì∏ ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ {key}.{field}: {photo_url[:50]}...")
                            return photo_url
                
                elif isinstance(value, list) and value:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                    first_item = value[0]
                    if isinstance(first_item, dict):
                        for field in photo_fields:
                            photo_url = first_item.get(field)
                            if photo_url and isinstance(photo_url, str) and photo_url.startswith("http"):
                                logger.info(f"üì∏ ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ {key}[0].{field}: {photo_url[:50]}...")
                                return photo_url
            
            return None
            
        except Exception as e:
            logger.debug(f"üì∏ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return None
    
    def _extract_status(self, status_result: Dict) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        try:
            if isinstance(status_result, dict):
                if "data" in status_result and isinstance(status_result["data"], dict):
                    if "status" in status_result["data"]:
                        return status_result["data"]["status"]
                
                if "status" in status_result:
                    return status_result["status"]
                    
                for value in status_result.values():
                    if isinstance(value, dict) and "state" in value:
                        return value
            
            return None
        except:
            return None
    
    def _extract_min_price(self, results: Dict) -> Optional[float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            min_price = None
            
            # –ò—â–µ–º –æ—Ç–µ–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            hotels = self._find_hotels_in_results(results)
            
            for hotel in hotels:
                # –ò—â–µ–º —Ç—É—Ä—ã –≤ –æ—Ç–µ–ª–µ
                tours = self._find_tours_in_hotel(hotel)
                
                for tour in tours:
                    price = tour.get("price")
                    if price:
                        try:
                            price_float = float(price)
                            if min_price is None or price_float < min_price:
                                min_price = price_float
                        except:
                            pass
            
            return min_price
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return None
    
    def _find_hotels_in_results(self, results: Dict) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        hotels = []
        
        try:
            if isinstance(results, dict):
                # data.result.hotel
                if "data" in results and isinstance(results["data"], dict):
                    if "result" in results["data"] and isinstance(results["data"]["result"], dict):
                        if "hotel" in results["data"]["result"]:
                            hotel_data = results["data"]["result"]["hotel"]
                            if isinstance(hotel_data, list):
                                hotels.extend(hotel_data)
                            elif hotel_data:
                                hotels.append(hotel_data)
                
                # –ø—Ä—è–º–æ hotel
                if "hotel" in results:
                    hotel_data = results["hotel"]
                    if isinstance(hotel_data, list):
                        hotels.extend(hotel_data)
                    elif hotel_data:
                        hotels.append(hotel_data)
        except:
            pass
        
        return hotels
    
    def _find_tours_in_hotel(self, hotel: Dict) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ"""
        tours = []
        
        try:
            if "tours" in hotel and isinstance(hotel["tours"], dict):
                if "tour" in hotel["tours"]:
                    tour_data = hotel["tours"]["tour"]
                    if isinstance(tour_data, list):
                        tours.extend(tour_data)
                    elif tour_data:
                        tours.append(tour_data)
            
            if "tour" in hotel:
                tour_data = hotel["tour"]
                if isinstance(tour_data, list):
                    tours.extend(tour_data)
                elif tour_data:
                    tours.append(tour_data)
        except:
            pass
        
        return tours
    
    async def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        await self.cache.delete(self.CACHE_KEY)
        logger.info("üóëÔ∏è –ö—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")
    
    async def refresh(self) -> List[Dict[str, Any]]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        await self.clear_cache()
        return await self.get_destinations()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
destinations_service = DestinationsService()