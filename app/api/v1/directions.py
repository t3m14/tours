# app/api/v1/directions.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

from fastapi import APIRouter, HTTPException, Query
from typing import List, Dict, Any, Optional
from app.services.directions_service import directions_service
from app.services.cache_service import cache_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

@router.get("/countries/list")
async def get_supported_countries():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω —Å –∏—Ö ID
    """
    countries = []
    for name, info in directions_service.COUNTRIES_MAPPING.items():
        if info["country_id"] is not None:  # –¢–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ ID
            countries.append({
                "country_name": name,
                "country_id": info["country_id"]
            })
    
    return {
        "countries": countries,
        "total": len(countries)
    }

@router.get("/country/{country_id}")
async def get_directions_by_country_id(country_id: int) -> Dict[str, Any]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    3. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è country_id
        if country_id <= 0:
            raise HTTPException(status_code=400, detail="country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        logger.info(f"üéØ API –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            available_countries = [
                {"name": name, "id": info["country_id"]} 
                for name, info in directions_service.COUNTRIES_MAPPING.items() 
                if info["country_id"] is not None
            ]
            raise HTTPException(
                status_code=404, 
                detail={
                    "message": f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "available_countries": available_countries
                }
            )
        
        directions = await directions_service.get_directions_by_country(country_name)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with_prices = len([d for d in directions if d.get("min_price")])
        with_images = len([d for d in directions if d.get("image_link")])
        
        return {
            "country_name": country_name,
            "country_id": country_id,
            "total_directions": len(directions),
            "statistics": {
                "with_prices": with_prices,
                "with_images": with_images,
                "completion_rate": f"{(with_prices/len(directions)*100):.1f}%" if directions else "0%"
            },
            "directions": directions
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id {country_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.get("/country/{country_id}/flat")
async def get_directions_flat_by_id(
    country_id: int,
    force_refresh: Optional[bool] = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
) -> List[Dict[str, Any]]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ ID —Å—Ç—Ä–∞–Ω—ã
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä force_refresh
    2. –í–∞–ª–∏–¥–∞—Ü–∏—è NULL –∑–Ω–∞—á–µ–Ω–∏–π
    3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if country_id <= 0:
            raise HTTPException(status_code=400, detail="country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        logger.info(f"üìã API –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è country_id: {country_id} (force_refresh: {force_refresh})")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if force_refresh:
            cache_key = f"directions_with_prices_country_{country_id}"
            await cache_service.delete(cache_key)
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(status_code=404, detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        directions = await directions_service.get_directions_by_country(country_name)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        valid_directions = []
        invalid_count = 0
        
        for direction in directions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not direction.get("city_name"):
                invalid_count += 1
                continue
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
            fixed_direction = {
                "country_name": direction.get("country_name", country_name),
                "country_id": direction.get("country_id", country_id),
                "city_name": direction.get("city_name", ""),
                "min_price": direction.get("min_price"),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                "image_link": direction.get("image_link")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            }
            
            valid_directions.append(fixed_direction)
        
        if invalid_count > 0:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {invalid_count} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(valid_directions)} –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏")
        return valid_directions
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è country_id {country_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.get("/country/{country_id}/quick")
async def get_directions_quick(country_id: int) -> List[Dict[str, Any]]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    2. –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    3. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if country_id <= 0:
            raise HTTPException(status_code=400, detail="country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(status_code=404, detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
        cities = await directions_service._get_top_cities_for_country(country_id, limit=12)
        
        result = []
        synthetic_count = 0
        
        for city in cities:
            city_name = city.get("name", "")
            is_synthetic = city.get("synthetic", False)
            
            if city_name:
                direction_item = {
                    "country_name": country_name,
                    "country_id": country_id,
                    "city_name": city_name,
                    "min_price": None,  # –ë–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
                    "image_link": None,  # –ë–µ–∑ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
                    "is_synthetic": is_synthetic,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    "region_id": city.get("id")  # ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                }
                result.append(direction_item)
                
                if is_synthetic:
                    synthetic_count += 1
        
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö: {synthetic_count})")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è country_id {country_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.get("/")
async def get_directions_with_filter(
    country_id: Optional[int] = Query(None, description="ID —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"),
    limit: Optional[int] = Query(None, ge=1, le=100, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    force_refresh: Optional[bool] = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
) -> Dict[str, Any]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –î–æ–±–∞–≤–ª–µ–Ω force_refresh
    2. –õ—É—á—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    3. –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """
    try:
        logger.info(f"üîç API —Ñ–∏–ª—å—Ç—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: country_id={country_id}, limit={limit}, force_refresh={force_refresh}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if country_id is not None and country_id <= 0:
            raise HTTPException(status_code=400, detail="country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if force_refresh and country_id:
            cache_key = f"directions_with_prices_country_{country_id}"
            await cache_service.delete(cache_key)
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if country_id is not None:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
            all_directions = await directions_service.filter_directions_by_country_id(country_id, limit)
            filter_info = {"country_id": country_id, "limit": limit}
        else:
            # –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            all_directions = await directions_service.get_all_directions()
            if limit is not None:
                all_directions = all_directions[:limit]
            filter_info = {"country_id": None, "limit": limit}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        countries_count = len(set(d["country_id"] for d in all_directions))
        with_prices = len([d for d in all_directions if d.get("min_price")])
        with_images = len([d for d in all_directions if d.get("image_link")])
        
        return {
            "filter_applied": filter_info,
            "total_results": len(all_directions),
            "statistics": {
                "countries_represented": countries_count,
                "directions_with_prices": with_prices,
                "directions_with_images": with_images,
                "data_completeness": f"{(with_prices/len(all_directions)*100):.1f}%" if all_directions else "0%"
            },
            "directions": all_directions
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.get("/debug/regions/{country_id}")
async def debug_regions_for_country(country_id: int):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if country_id <= 0:
            raise HTTPException(status_code=400, detail="country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
        from app.core.tourvisor_client import tourvisor_client
        
        regions_data = await tourvisor_client.get_references("region", regcountry=country_id)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        regions = regions_data.get("lists", {}).get("regions", {}).get("region", [])
        if not isinstance(regions, list):
            regions = [regions] if regions else []
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        valid_regions = []
        for region in regions:
            if region.get("country") == str(country_id) and region.get("name"):
                valid_regions.append({
                    "id": region.get("id"),
                    "name": region.get("name"),
                    "country": region.get("country")
                })
        
        return {
            "country_id": country_id,
            "raw_regions_count": len(regions),
            "valid_regions_count": len(valid_regions),
            "valid_regions": valid_regions[:10],  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            "raw_response_sample": regions[:3] if regions else []  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
        return {
            "error": str(e),
            "country_id": country_id,
            "status": "error"
        }

@router.get("/test/{country_id}")
async def test_country_directions_by_id(country_id: int):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if country_id <= 0:
            return {"error": "country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"}
        
        logger.info(f"üß™ –¢–µ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            return {
                "error": f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "available_countries": {
                    name: info["country_id"] 
                    for name, info in directions_service.COUNTRIES_MAPPING.items() 
                    if info["country_id"] is not None
                }
            }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        start_time = __import__('time').time()
        directions = await directions_service.get_directions_by_country(country_name)
        end_time = __import__('time').time()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with_prices = len([d for d in directions if d.get("min_price")])
        with_images = len([d for d in directions if d.get("image_link")])
        
        return {
            "success": True,
            "country_name": country_name,
            "country_id": country_id,
            "directions_count": len(directions),
            "performance": {
                "execution_time_seconds": round(end_time - start_time, 2),
                "with_prices": with_prices,
                "with_images": with_images,
                "success_rate": f"{(with_prices/len(directions)*100):.1f}%" if directions else "0%"
            },
            "sample_directions": directions[:3] if directions else [],
            "status": "ok"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è country_id {country_id}: {e}")
        return {
            "error": str(e),
            "country_id": country_id,
            "status": "error"
        }

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ endpoints

@router.delete("/cache/clear")
async def clear_directions_cache():
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π
    2. –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    3. –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    try:
        logger.info("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫—ç—à–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        cache_patterns = [
            "directions_with_prices_country_*",  # –ö—ç—à —Å —Ü–µ–Ω–∞–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            "directions_country_*",              # –û–±—ã—á–Ω—ã–π –∫—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            "top_cities_country_*",              # –ö—ç—à –≥–æ—Ä–æ–¥–æ–≤
            "regions_*",                         # –ö—ç—à —Ä–µ–≥–∏–æ–Ω–æ–≤
            "destinations_search_based",         # –ö—ç—à —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        ]
        
        total_deleted = 0
        deleted_by_pattern = {}
        errors = []
        
        for pattern in cache_patterns:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                deleted_count = await cache_service.delete_pattern(pattern)
                
                deleted_by_pattern[pattern] = deleted_count
                total_deleted += deleted_count
                
                if deleted_count > 0:
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                else:
                    logger.info(f"üîç –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern}")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}: {str(e)}"
                logger.error(f"‚ùå {error_msg}")
                deleted_by_pattern[pattern] = f"error: {str(e)}"
                errors.append(error_msg)
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {total_deleted} –∫–ª—é—á–µ–π –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        result = {
            "success": True,
            "message": f"–ö—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "total_deleted": total_deleted,
            "details": deleted_by_pattern,
            "next_actions": [
                "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ /directions –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "–ö—ç—à –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
            ]
        }
        
        if errors:
            result["warnings"] = errors
            result["success"] = len(errors) < len(cache_patterns)  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}"
        )

@router.get("/cache/status")
async def get_cache_status():
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ TTL
    2. –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    try:
        logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        cache_patterns = [
            "directions_with_prices_country_*",
            "directions_country_*", 
            "top_cities_country_*",
            "regions_*",
            "destinations_search_based"
        ]
        
        cache_status = {}
        total_keys = 0
        total_memory_usage = 0
        
        for pattern in cache_patterns:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
                keys = await cache_service.get_keys_pattern(pattern) if hasattr(cache_service, 'get_keys_pattern') else []
                
                if keys:
                    pattern_info = {
                        "count": len(keys),
                        "keys_sample": keys[:5],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π
                        "has_more": len(keys) > 5
                    }
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å TTL –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
                    if keys:
                        try:
                            ttl = await cache_service.get_ttl(keys[0]) if hasattr(cache_service, 'get_ttl') else None
                            if ttl and ttl > 0:
                                pattern_info["example_ttl_seconds"] = ttl
                                pattern_info["example_ttl_human"] = f"{ttl//3600}—á {(ttl%3600)//60}–º"
                        except Exception as ttl_error:
                            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TTL –¥–ª—è {keys[0]}: {ttl_error}")
                    
                    # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    try:
                        sample_size = await cache_service.get_size(keys[0]) if hasattr(cache_service, 'get_size') else 0
                        if sample_size > 0:
                            estimated_total = sample_size * len(keys)
                            pattern_info["estimated_size_bytes"] = estimated_total
                            pattern_info["estimated_size_human"] = format_bytes(estimated_total)
                            total_memory_usage += estimated_total
                    except:
                        pass
                        
                else:
                    pattern_info = {
                        "count": 0,
                        "keys_sample": [],
                        "has_more": False
                    }
                
                cache_status[pattern] = pattern_info
                total_keys += pattern_info["count"]
                
            except Exception as e:
                cache_status[pattern] = {
                    "error": str(e),
                    "count": 0
                }
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_patterns = len([p for p in cache_status.values() if p.get("count", 0) > 0])
        
        return {
            "total_cached_keys": total_keys,
            "active_patterns": active_patterns,
            "total_patterns": len(cache_patterns),
            "estimated_memory_usage": format_bytes(total_memory_usage) if total_memory_usage > 0 else "Unknown",
            "cache_patterns": cache_status,
            "recommendations": {
                "clear_cache": "DELETE /api/v1/directions/cache/clear",
                "force_refresh": "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ?force_refresh=true –∫ –ª—é–±–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
                "refresh_country": "POST /api/v1/directions/refresh/{country_id}"
            },
            "cache_health": "Good" if total_keys > 0 else "Empty"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {str(e)}"
        )

@router.post("/refresh/{country_id}")
async def force_refresh_country_directions(country_id: int):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    3. –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if country_id <= 0:
            raise HTTPException(status_code=400, detail="country_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(
                status_code=404, 
                detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω"
            )
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        import time
        start_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
        cache_keys_to_clear = [
            f"directions_with_prices_country_{country_id}",
            f"directions_country_{country_id}",
            f"top_cities_country_{country_id}"
        ]
        
        cleared_count = 0
        for cache_key in cache_keys_to_clear:
            try:
                await cache_service.delete(cache_key)
                cleared_count += 1
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á {cache_key}: {e}")
        
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {cleared_count} –∫–ª—é—á–µ–π –∫—ç—à–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        directions = await directions_service.get_directions_by_country(country_name)
        
        end_time = time.time()
        execution_time = round(end_time - start_time, 2)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with_prices = len([d for d in directions if d.get("min_price")])
        with_images = len([d for d in directions if d.get("image_link")])
        avg_price = sum(d.get("min_price", 0) for d in directions if d.get("min_price")) / with_prices if with_prices > 0 else 0
        
        return {
            "success": True,
            "country_name": country_name,
            "country_id": country_id,
            "directions_count": len(directions),
            "performance": {
                "execution_time_seconds": execution_time,
                "cache_keys_cleared": cleared_count
            },
            "statistics": {
                "directions_with_prices": with_prices,
                "directions_with_images": with_images,
                "success_rate": f"{(with_prices/len(directions)*100):.1f}%" if directions else "0%",
                "average_price": round(avg_price) if avg_price > 0 else None
            },
            "message": f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è {country_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "sample_directions": directions[:3] if directions else []  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
        )

@router.post("/refresh/all")
async def force_refresh_all_directions():
    """
    –ù–û–í–´–ô endpoint: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –í–Ω–∏–º–∞–Ω–∏–µ: –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!
    """
    try:
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–°–ï–• –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        import time
        start_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        await clear_directions_cache()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
        all_directions = await directions_service.get_all_directions()
        
        end_time = time.time()
        execution_time = round(end_time - start_time, 2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        countries_stats = {}
        for direction in all_directions:
            country_name = direction.get("country_name", "Unknown")
            if country_name not in countries_stats:
                countries_stats[country_name] = {
                    "count": 0,
                    "with_prices": 0,
                    "with_images": 0
                }
            
            countries_stats[country_name]["count"] += 1
            if direction.get("min_price"):
                countries_stats[country_name]["with_prices"] += 1
            if direction.get("image_link"):
                countries_stats[country_name]["with_images"] += 1
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_with_prices = len([d for d in all_directions if d.get("min_price")])
        total_with_images = len([d for d in all_directions if d.get("image_link")])
        
        return {
            "success": True,
            "message": "–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "performance": {
                "execution_time_seconds": execution_time,
                "countries_processed": len(countries_stats)
            },
            "statistics": {
                "total_directions": len(all_directions),
                "total_with_prices": total_with_prices,
                "total_with_images": total_with_images,
                "overall_success_rate": f"{(total_with_prices/len(all_directions)*100):.1f}%" if all_directions else "0%"
            },
            "countries_breakdown": countries_stats,
            "warning": "–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {str(e)}"
        )

def format_bytes(bytes_count: int) -> str:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_count < 1024.0:
            return f"{bytes_count:.1f} {unit}"
        bytes_count /= 1024.0
    return f"{bytes_count:.1f} TB"

@router.get("/cache/preview/{country_id}")
async def preview_cached_directions(country_id: int, limit: int = 10) -> Dict[str, Any]:
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –±–µ–∑ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(
                status_code=400,
                detail={
                    "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∞: {country_id}",
                    "available_countries": {
                        name: info["country_id"] 
                        for name, info in directions_service.COUNTRIES_MAPPING.items() 
                        if info["country_id"] is not None
                    }
                }
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫–µ—à–∞ - –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –û–¢–î–ê–ß–ê
        cache_key = f"directions_with_prices_country_{country_id}"
        cached_directions = await cache_service.get(cache_key)
        
        if not cached_directions:
            return {
                "success": False,
                "message": f"–ù–µ—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã '{country_name}'",
                "country": {
                    "id": country_id,
                    "name": country_name
                },
                "recommendation": f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GET /country/{country_id} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        with_prices = len([d for d in cached_directions if d.get("min_price")])
        with_images = len([d for d in cached_directions if d.get("image_link")])
        preview_directions = cached_directions[:limit]
        
        return {
            "success": True,
            "country": {"id": country_id, "name": country_name},
            "total_cached": len(cached_directions),
            "showing": len(preview_directions),
            "quality_stats": {
                "with_prices": with_prices,
                "with_images": with_images,
                "price_coverage": f"{(with_prices/len(cached_directions)*100):.1f}%" if cached_directions else "0%"
            },
            "preview_directions": preview_directions
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è country_id {country_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}")