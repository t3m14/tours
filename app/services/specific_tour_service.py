# app/services/specific_tour_service.py

import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.models.tour import FoundTourInfo, SpecificTourSearchRequest
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class SpecificTourService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    
    def __init__(self):
        self.cache = cache_service
    
    async def find_specific_tour(self, search_request: SpecificTourSearchRequest) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å hotel_info –∏ tours"""
        try:
            logger.info(f"üîé –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
            tour = await self._execute_tour_search(search_request)
            
            if tour:
                logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω")
                return tour
            
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º fallback
            logger.info(f"üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º fallback")
            tour = await self._execute_fallback_search(search_request)
            
            if tour:
                logger.info(f"‚úÖ Fallback –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω")
                return tour
            else:
                raise ValueError("–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞: {e}")
            raise


    async def find_single_tour(self, search_request: SpecificTourSearchRequest) -> FoundTourInfo:
        """–ü–æ–∏—Å–∫ –û–î–ù–û–ì–û –ª—É—á—à–µ–≥–æ —Ç—É—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FoundTourInfo"""
        try:
            logger.info(f"üéØ –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –ª—É—á—à–µ–≥–æ —Ç—É—Ä–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–µ–ª—å —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–∞–º–∏
            hotel_with_tours = await self.find_specific_tour(search_request)
            
            if not hotel_with_tours or not hotel_with_tours.get('tours'):
                raise ValueError("–¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ç—É—Ä (–ø–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
            best_tour = hotel_with_tours['tours'][0]
            hotel_info = hotel_with_tours['hotel_info']
            
            logger.info(f"üéØ –°–æ–∑–¥–∞–µ–º FoundTourInfo –∏–∑ –æ—Ç–µ–ª—è: {hotel_info.get('hotel_name', 'Unknown')}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FoundTourInfo —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            found_tour_info = FoundTourInfo(
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (–∏–∑ hotel_info —Å–ª–æ–≤–∞—Ä—è)
                hotel_name=hotel_info.get('hotel_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–µ–ª—å',
                hotel_stars=hotel_info.get('hotel_stars') or 0,
                country_name=hotel_info.get('country_name') or '',
                region_name=hotel_info.get('region_name') or '',
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (–∏–∑ best_tour —Å–ª–æ–≤–∞—Ä—è)
                operator_name=best_tour.get('operator_name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä',
                fly_date=best_tour.get('fly_date') or '',
                nights=best_tour.get('nights') or search_request.nights or 7,
                price=float(best_tour.get('price', 0)) or 0.0,
                meal=best_tour.get('meal') or '',
                room_type=best_tour.get('room_type') or '',
                adults=best_tour.get('adults') or search_request.adults,
                children=best_tour.get('children') or search_request.children,
                currency=best_tour.get('currency') or 'RUB',
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–µ–ª—è
                hotel_id=hotel_info.get('hotel_id'),
                hotel_rating=hotel_info.get('hotel_rating'),
                hotel_description=hotel_info.get('description') or hotel_info.get('hotel_description'),
                hotel_picture=hotel_info.get('picture_link') or hotel_info.get('hotel_picture') or hotel_info.get('main_photo'),
                sea_distance=hotel_info.get('sea_distance'),
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç—É—Ä–∞
                tour_id=best_tour.get('tour_id'),
                fuel_charge=best_tour.get('fuel_charge'),
                tour_link=best_tour.get('tour_link'),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                is_regular=best_tour.get('is_regular', False),
                is_promo=best_tour.get('is_promo', False),
                is_on_request=best_tour.get('is_on_request', False),
                search_results_count=hotel_with_tours.get('search_results_count', 1),
                hotels_found=hotel_with_tours.get('hotels_found', 1),
                is_fallback=hotel_with_tours.get('is_fallback', False),
                fallback_strategy=hotel_with_tours.get('fallback_strategy')
            )
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω FoundTourInfo –¥–ª—è –æ—Ç–µ–ª—è: {found_tour_info.hotel_name}")
            return found_tour_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FoundTourInfo: {e}")
            logger.error(f"üîç –û—Ç–ª–∞–¥–∫–∞: hotel_info keys = {list(hotel_info.keys()) if 'hotel_info' in locals() else 'hotel_info –Ω–µ —Å–æ–∑–¥–∞–Ω'}")
            logger.error(f"üîç –û—Ç–ª–∞–¥–∫–∞: best_tour keys = {list(best_tour.keys()) if 'best_tour' in locals() else 'best_tour –Ω–µ —Å–æ–∑–¥–∞–Ω'}")
            raise
    async def find_tour_by_hotel_name(self, hotel_name: str, departure: int, country: int, 
                                nights: int = 7, adults: int = 2, children: int = 0) -> FoundTourInfo:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è"""
        logger.info(f"üè® –ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –æ—Ç–µ–ª—é '{hotel_name}' –≤ —Å—Ç—Ä–∞–Ω–µ {country}")
        
        search_request = SpecificTourSearchRequest(
            departure=departure,
            country=country,
            hotel_name=hotel_name,
            nights=nights,
            adults=adults,
            children=children
        )
        
        return await self.find_single_tour(search_request)

    async def find_tour_by_criteria(self, departure: int, country: int, hotel_stars: int,
                                  meal_type: int, max_price: Optional[int] = None,
                                  nights: int = 7, adults: int = 2) -> FoundTourInfo:
        """–ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FoundTourInfo"""
        search_request = SpecificTourSearchRequest(
            departure=departure,
            country=country,
            hotel_stars=hotel_stars,
            meal_type=meal_type,
            max_price=max_price,
            nights=nights,
            adults=adults
        )
        return await self.find_single_tour(search_request)

    def get_search_suggestions(self, search_request: SpecificTourSearchRequest) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
        suggestions = []
        
        if search_request.hotel_stars and search_request.hotel_stars > 3:
            suggestions.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –∑–≤–µ–∑–¥–Ω–æ—Å—Ç—å –¥–æ {search_request.hotel_stars - 1} –∑–≤–µ–∑–¥")
        
        if search_request.max_price and search_request.max_price < 100000:
            suggestions.append(f"–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–æ {search_request.max_price + 20000} —Ä—É–±–ª–µ–π")
        
        if search_request.meal_type and search_request.meal_type > 2:
            suggestions.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ '–ó–∞–≤—Ç—Ä–∞–∫' –∏–ª–∏ '–ë–µ–∑ –ø–∏—Ç–∞–Ω–∏—è'")
        
        if search_request.nights and search_request.nights > 7:
            suggestions.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –¥–æ {search_request.nights - 1}")
        
        if search_request.rating and search_request.rating > 4.0:
            suggestions.append("–°–Ω–∏–∑—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è")
        
        suggestions.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏")
        suggestions.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫—É—Ä–æ—Ä—Ç—ã –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ")
        
        return suggestions

    # –ó–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ _execute_tour_search –≤ app/services/specific_tour_service.py

    async def _execute_tour_search(self, search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞"""
        try:
            logger.info(f"üöÄ EXECUTE_TOUR_SEARCH: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫")
            
            # –°—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è TourVisor API
            search_params = self._build_search_params(search_request)
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è, –Ω–∞–π–¥–µ–º –µ–≥–æ ID
            if search_request.hotel_name and not search_request.hotel_id:
                logger.info(f"üîç –ò—â–µ–º ID –æ—Ç–µ–ª—è '{search_request.hotel_name}'")
                
                hotel_id = await self._find_hotel_id_by_name(
                    search_request.hotel_name, 
                    search_request.country
                )
                
                if hotel_id:
                    search_params["hotels"] = hotel_id
                    logger.info(f"üè® ‚úÖ –ù–∞–π–¥–µ–Ω ID –æ—Ç–µ–ª—è: {hotel_id}")
                else:
                    logger.warning(f"üè® ‚ùå –û—Ç–µ–ª—å '{search_request.hotel_name}' –ù–ï –ù–ê–ô–î–ï–ù!")
                    return None
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –æ—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
            elif search_request.hotel_id:
                search_params["hotels"] = search_request.hotel_id
                logger.info(f"üè® –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –æ—Ç–µ–ª—è: {search_request.hotel_id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ TourVisor
            logger.info(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {search_params}")
            request_id = await tourvisor_client.search_tours(search_params)
            
            if not request_id:
                logger.error(f"‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω request_id –æ—Ç TourVisor")
                return None
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
            logger.info(f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞...")
            max_wait_time = 45  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 45 —Å–µ–∫—É–Ω–¥
            start_wait = datetime.now()
            
            final_results = None
            
            while (datetime.now() - start_wait).total_seconds() < max_wait_time:
                try:
                    status_result = await tourvisor_client.get_search_status(request_id)
                    
                    if status_result:
                        status_data = status_result.get("data", {}).get("status", {})
                        state = status_data.get("state", "")
                        hotels_found = status_data.get("hotelsfound", 0)
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
                        try:
                            hotels_found = int(hotels_found) if hotels_found else 0
                        except (ValueError, TypeError):
                            hotels_found = 0
                        
                        logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å: {state}, –æ—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: {hotels_found}")
                        
                        if state == "finished":
                            if hotels_found > 0:
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                final_results = await tourvisor_client.get_search_results(request_id)
                                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                                break
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                break
                        elif state == "error":
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ TourVisor")
                            break
                        elif hotels_found > 50:  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–µ–ª–µ–π ({hotels_found}), –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                            try:
                                final_results = await tourvisor_client.get_search_results(request_id)
                                if final_results and final_results.get("data", {}).get("result"):
                                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å {hotels_found} –æ—Ç–µ–ª—è–º–∏")
                                    break
                                else:
                                    logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                    
                    await asyncio.sleep(3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 3 —Å–µ–∫—É–Ω–¥
                    
                except Exception as status_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_error}")
                    await asyncio.sleep(2)
                    continue
            
            if not final_results:
                logger.error(f"‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                return None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            return await self._process_search_results(final_results, search_request)
            
        except Exception as e:
            logger.error(f"‚ùå EXECUTE_TOUR_SEARCH: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
            return None
    async def _process_search_results(self, search_results: Dict[str, Any], search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            hotels_data = self._extract_hotels_from_results(search_results)
            
            if not hotels_data:
                logger.warning(f"‚ùå –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                return None
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(hotels_data)} –æ—Ç–µ–ª–µ–π")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–µ–ª—å (–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º)
            best_hotel = self._select_best_hotel(hotels_data, search_request)
            
            if not best_hotel:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–µ–ª—å")
                return None
            
            # –í–ê–ñ–ù–û: –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            logger.info(f"üèóÔ∏è –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ: {best_hotel.get('hotelname', 'Unknown')}")
            hotel_info = await self._build_hotel_info(best_hotel)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä—ã
            tours_data = self._extract_tours_from_hotel(best_hotel)
            
            if not tours_data:
                logger.warning(f"‚ùå –¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–µ–ª—è {hotel_info.get('hotel_name', 'Unknown')}")
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä—ã –ø–æ —Ü–µ–Ω–µ
            sorted_tours = sorted(tours_data, key=lambda t: t.get('price', float('inf')))
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤
            tours_list = []
            for tour_data in sorted_tours:
                tour_info = self._create_tour_info(best_hotel, tour_data)
                tours_list.append(tour_info)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tours_list)} —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–µ–ª—è {hotel_info.get('hotel_name', 'Unknown')}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                "hotel_info": hotel_info,  # –û–ë–û–ì–ê–©–ï–ù–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ
                "tours": tours_list,
                "tours_count": len(tours_list),
                "search_results_count": len(hotels_data),
                "is_fallback": False,
                "fallback_strategy": None,
                "available_dates": self._extract_available_dates(tours_list),
                "meal_types": self._extract_meal_types(tours_list),
                "operators": self._extract_operators(tours_list),
                "price_range": self._calculate_price_range(tours_list)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return None

    def _extract_available_dates(self, tours_list: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤—ã–ª–µ—Ç–∞"""
        try:
            dates = set()
            for tour in tours_list:
                fly_date = tour.get('fly_date')
                if fly_date:
                    dates.add(fly_date)
            return sorted(list(dates))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç: {e}")
            return []

    def _extract_meal_types(self, tours_list: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            meals = set()
            for tour in tours_list:
                meal = tour.get('meal')
                if meal:
                    meals.add(meal)
            return sorted(list(meals))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return []

    def _extract_operators(self, tours_list: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            operators = set()
            for tour in tours_list:
                operator = tour.get('operator_name')
                if operator:
                    operators.add(operator)
            return sorted(list(operators))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []

    def _calculate_price_range(self, tours_list: List[Dict[str, Any]]) -> Optional[Dict[str, float]]:
        """–†–∞—Å—á–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
        try:
            if not tours_list:
                return None
            
            prices = [tour.get('price', 0) for tour in tours_list if tour.get('price', 0) > 0]
            
            if not prices:
                return None
            
            return {
                "min_price": min(prices),
                "max_price": max(prices),
                "avg_price": sum(prices) / len(prices)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω: {e}")
            return None
    # –ó–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ _execute_fallback_search –≤ app/services/specific_tour_service.py

    async def _execute_fallback_search(self, search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        try:
            logger.info(f"üîÑ FALLBACK_SEARCH: –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫")
            
            fallback_strategies = [
                "remove_hotel_filter",
                "increase_price_range", 
                "relax_dates",
                "lower_star_requirements",
                "change_meal_type",
                "expand_region"
            ]
            
            for strategy in fallback_strategies:
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy}")
                
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                fallback_params = self._modify_search_params_for_fallback(search_request, strategy)
                
                if not fallback_params:
                    continue
                    
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    search_result = await tourvisor_client.search_tours(fallback_params)
                    
                    if not search_result or not search_result.get('request_id'):
                        continue
                    
                    request_id = search_result['request_id']
                    logger.info(f"üìã Fallback request_id: {request_id}")
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                    final_results = await tourvisor_client.wait_for_search_completion(request_id)
                    
                    if final_results:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º
                        processed_results = await self._process_search_results(final_results, search_request)
                        
                        if processed_results and processed_results.get('tours'):
                            logger.info(f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {strategy}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ fallback
                            processed_results['is_fallback'] = True
                            processed_results['fallback_strategy'] = strategy
                            
                            return processed_results
                            
                except Exception as strategy_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy}: {strategy_error}")
                    continue
            
            logger.warning(f"‚ùå –í—Å–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå FALLBACK_SEARCH: –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return None
      
    def _modify_search_params_for_fallback(self, search_request: SpecificTourSearchRequest, strategy: str) -> Optional[Dict[str, Any]]:
        """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            logger.info(f"üîß –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy}")
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {
                "departure": search_request.departure,
                "country": search_request.country,
                "adults": search_request.adults,
                "child": search_request.children,
                "format": "json"
            }
            
            # –î–∞—Ç—ã (—Ä–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω)
            if strategy == "relax_dates":
                start_date = datetime.now() + timedelta(days=1)
                end_date = datetime.now() + timedelta(days=45)
                params["datefrom"] = start_date.strftime("%d.%m.%Y")
                params["dateto"] = end_date.strftime("%d.%m.%Y")
                params["nightsfrom"] = max(1, (search_request.nights or 7) - 3)
                params["nightsto"] = min(30, (search_request.nights or 7) + 3)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞—Ç—ã
                if search_request.date_from:
                    params["datefrom"] = search_request.date_from
                else:
                    start_date = datetime.now() + timedelta(days=3)
                    params["datefrom"] = start_date.strftime("%d.%m.%Y")
                
                if search_request.date_to:
                    params["dateto"] = search_request.date_to
                else:
                    end_date = datetime.now() + timedelta(days=17)
                    params["dateto"] = end_date.strftime("%d.%m.%Y")
                
                if search_request.nights:
                    params["nightsfrom"] = search_request.nights
                    params["nightsto"] = search_request.nights
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if strategy == "remove_hotel_filter":
                # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–µ–ª—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                if search_request.hotel_stars:
                    params["stars"] = search_request.hotel_stars
                    params["starsbetter"] = 1
                
            elif strategy == "increase_price_range":
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ 1.5 —Ä–∞–∑–∞
                if search_request.max_price:
                    params["priceto"] = int(search_request.max_price * 1.5)
                if search_request.min_price:
                    params["pricefrom"] = max(10000, int(search_request.min_price * 0.7))
                
            elif strategy == "lower_star_requirements":
                # –ü–æ–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏
                if search_request.hotel_stars and search_request.hotel_stars > 3:
                    params["stars"] = search_request.hotel_stars - 1
                    params["starsbetter"] = 1
                elif search_request.hotel_stars:
                    params["stars"] = max(1, search_request.hotel_stars - 1)
                    
            elif strategy == "change_meal_type":
                # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–º
                if search_request.meal_type and search_request.meal_type > 1:
                    params["meal"] = search_request.meal_type - 1
                    
            elif strategy == "expand_region":
                # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É, –∏—â–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ
                pass  # –ü—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º regions
                
            else:
                # –ë–∞–∑–æ–≤—ã–π fallback - –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —É–±–∏—Ä–∞–µ–º hotel_name
                if search_request.hotel_stars:
                    params["stars"] = search_request.hotel_stars
                    params["starsbetter"] = 1
                if search_request.meal_type:
                    params["meal"] = search_request.meal_type
                if search_request.region_code:
                    params["regions"] = search_request.region_code
                if search_request.max_price:
                    params["priceto"] = search_request.max_price
                if search_request.min_price:
                    params["pricefrom"] = search_request.min_price
            
            # –û–±—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π)
            if "stars" not in params and search_request.hotel_stars:
                params["stars"] = search_request.hotel_stars
                params["starsbetter"] = 1
                
            if "meal" not in params and search_request.meal_type:
                params["meal"] = search_request.meal_type
                
            if "regions" not in params and search_request.region_code:
                params["regions"] = search_request.region_code
                
            if "priceto" not in params and search_request.max_price:
                params["priceto"] = search_request.max_price
                
            if "pricefrom" not in params and search_request.min_price:
                params["pricefrom"] = search_request.min_price
            
            logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {strategy}: {params}")
            return params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {strategy}: {e}")
            return None
    async def _extract_hotel_with_all_tours(self, results: Dict[str, Any], 
                                          search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–∞–º–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            data = results.get("data", {})
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            if not hotel_list:
                logger.warning("‚ùå –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                return None
            
            logger.info(f"üè® –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {len(hotel_list)}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–µ–ª—å –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            best_hotel = self._select_best_hotel(hotel_list, search_request)
            
            if not best_hotel:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–µ–ª—å")
                return None
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–µ–ª—è
            tours_data = best_hotel.get("tours", {}).get("tour", [])
            
            if not isinstance(tours_data, list):
                tours_data = [tours_data] if tours_data else []
            
            logger.info(f"üé´ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–µ–ª—è: {len(tours_data)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ
            hotel_info = self._create_hotel_info(best_hotel)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤
            all_tours = []
            for tour_data in tours_data:
                tour_info = self._create_tour_info(best_hotel, tour_data)
                all_tours.append(tour_info)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä—ã –ø–æ —Ü–µ–Ω–µ
            all_tours.sort(key=lambda x: x.get("price", 0))
            
            return {
                "hotel_info": hotel_info,
                "tours": all_tours,
                "tours_count": len(all_tours),
                "search_results_count": len(hotel_list),
                "is_fallback": False,
                "fallback_strategy": None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–µ–ª—è —Å —Ç—É—Ä–∞–º–∏: {e}")
            return None
    
    def _select_best_hotel(self, hotel_list: List[Dict], search_request: SpecificTourSearchRequest) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –æ—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        if not hotel_list:
            return None
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–µ–ª—å –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏, –∏—â–µ–º –µ–≥–æ
        if search_request.hotel_id:
            for hotel in hotel_list:
                if str(hotel.get("hotelcode")) == str(search_request.hotel_id):
                    return hotel
        
        if search_request.hotel_name:
            search_name = search_request.hotel_name.lower()
            for hotel in hotel_list:
                hotel_name = hotel.get("hotelname", "").lower()
                if search_name in hotel_name:
                    return hotel
        
        # –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        scored_hotels = []
        for hotel in hotel_list:
            score = self._calculate_hotel_score(hotel, search_request)
            scored_hotels.append((score, hotel))
        
        scored_hotels.sort(key=lambda x: x[0], reverse=True)
        return scored_hotels[0][1] if scored_hotels else None
    
    def _calculate_hotel_score(self, hotel: Dict, search_request: SpecificTourSearchRequest) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–µ–ª—è"""
        score = 0.0
        
        # –ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è
        if search_request.hotel_stars:
            hotel_stars = int(hotel.get("hotelstars", 0))
            if hotel_stars == search_request.hotel_stars:
                score += 10
            elif abs(hotel_stars - search_request.hotel_stars) == 1:
                score += 5
        
        # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è
        hotel_rating = float(hotel.get("hotelrating", 0))
        if hotel_rating > 0:
            score += hotel_rating * 2
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–æ—Ä—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        sea_distance = int(hotel.get("seadistance", 1000))
        if sea_distance <= 100:
            score += 5
        elif sea_distance <= 300:
            score += 3
        elif sea_distance <= 500:
            score += 1
        
        return score
    
    def _create_hotel_info(self, hotel_data: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        return {
            "hotel_id": self._safe_string(hotel_data.get("hotelcode")),
            "hotel_name": self._safe_string(hotel_data.get("hotelname", "")),
            "hotel_stars": self._safe_int(hotel_data.get("hotelstars")) or 3,
            "hotel_rating": self._safe_float(hotel_data.get("hotelrating")),
            "hotel_description": self._safe_string(hotel_data.get("hoteldescription")),
            "hotel_picture": self._safe_string(hotel_data.get("picturelink")),
            "country_name": self._safe_string(hotel_data.get("countryname", "")),
            "region_name": self._safe_string(hotel_data.get("regionname", "")),
            "sea_distance": self._safe_int(hotel_data.get("seadistance")) or 0,
        }
    
    async def _build_hotel_info(self, hotel_data: Dict) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ TourVisor XML API:
        - hotelcode ‚Äì –∫–æ–¥ –æ—Ç–µ–ª—è
        - price ‚Äì —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ —ç—Ç–æ–º—É –æ—Ç–µ–ª—é)
        - countrycode ‚Äì –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        - countryname ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        - regioncode ‚Äì –∫–æ–¥ –∫—É—Ä–æ—Ä—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–µ–ª—è
        - regionname ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä–æ—Ä—Ç–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        - subregioncode ‚Äì –∫–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞ (—Ä–∞–π–æ–Ω–∞) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        - hotelname ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è
        - hotelstars ‚Äì –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–µ–ª—è (2,3,4 –∏–ª–∏ 5)
        - hotelrating ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è –æ—Ç 1 –¥–æ 5 (–¥—Ä–æ–±–Ω—ã–π), –µ—Å–ª–∏ –Ω–µ—Ç = 0
        - hoteldescription ‚Äì –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –ø—É—Å—Ç–æ)
        - fulldesclink ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è
        - reviewlink ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã –ø–æ –æ—Ç–µ–ª—é
        - picturelink ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç–µ–ª—è (—à–∏—Ä–∏–Ω–∞ 130px)
        - isphoto ‚Äì –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–µ–ª—è (1 / 0)
        - iscoords ‚Äì –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–µ–ª—è (1 / 0)
        - isdescription ‚Äì –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è (1 / 0)
        - isreviews ‚Äì –µ—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã –ø–æ –æ—Ç–µ–ª—é (1 / 0)
        - seadistance ‚Äì —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–æ—Ä—è (–≤ –º–µ—Ç—Ä–∞—Ö)
        """
        try:
            logger.info(f"üèóÔ∏è –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ: {hotel_data.get('hotelname', 'Unknown')}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–ª–µ–π TourVisor API
            hotel_info = self._create_base_hotel_info(hotel_data)
            hotel_id = hotel_info.get('hotel_id')
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å ID –æ—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if hotel_id:
                try:
                    logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ {hotel_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ —á–µ—Ä–µ–∑ TourVisor API
                    hotel_details = await tourvisor_client.get_hotel_info(
                        hotel_id, 
                        include_reviews=True, 
                        big_images=True
                    )
                    
                    if hotel_details:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ {hotel_id}")
                        logger.debug(f"üìã –ö–ª—é—á–∏ –≤ hotel_details: {list(hotel_details.keys()) if isinstance(hotel_details, dict) else 'not dict'}")
                        
                        # –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–µ—Ç–∞–ª—è–º–∏
                        hotel_info.update(self._enrich_hotel_info_with_details(hotel_info, hotel_details))
                    else:
                        logger.warning(f"‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ {hotel_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        
                except Exception as detail_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è {hotel_id}: {detail_error}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç ID –æ—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ: {hotel_info.get('hotel_name', 'Unknown')}")
            return hotel_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._create_base_hotel_info(hotel_data)

    def _create_base_hotel_info(self, hotel_data: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö TourVisor API"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞
            hotel_info = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ—Ç–µ–ª—è - –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò
                'hotel_id': hotel_data.get('hotelcode'),  # –∫–æ–¥ –æ—Ç–µ–ª—è
                'hotel_name': hotel_data.get('hotelname', ''),  # –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è
                'hotel_stars': self._safe_int(hotel_data.get('hotelstars', 0)),  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–µ–ª—è (2,3,4 –∏–ª–∏ 5)
                'hotel_rating': self._safe_float(hotel_data.get('hotelrating', 0.0)),  # —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è –æ—Ç 1 –¥–æ 5
                'min_price': self._safe_float(hotel_data.get('price', 0.0)),  # —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
                
                # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–õ–Æ–ß–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:
                'hotel_description': hotel_data.get('hoteldescription', ''),  # –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è
                'hotel_picture': hotel_data.get('picturelink', ''),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
                'hotel_review_link': hotel_data.get('reviewlink', ''),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
                'country_code': hotel_data.get('countrycode'),  # –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
                'country_name': hotel_data.get('countryname', ''),  # –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                'region_code': hotel_data.get('regioncode'),  # –∫–æ–¥ –∫—É—Ä–æ—Ä—Ç–∞
                'region_name': hotel_data.get('regionname', ''),  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä–æ—Ä—Ç–∞
                'subregion_code': hotel_data.get('subregioncode', 0),  # –∫–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞ (—Ä–∞–π–æ–Ω–∞)
                
                # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–µ–π)
                'description': hotel_data.get('hoteldescription', ''),  # –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è
                'full_description_link': hotel_data.get('fulldesclink', ''),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                'reviews_link': hotel_data.get('reviewlink', ''),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã
                'picture_link': hotel_data.get('picturelink', ''),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (130px)
                
                # –§–ª–∞–≥–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö (1/0 –∏–∑ API)
                'has_photos': bool(self._safe_int(hotel_data.get('isphoto', 0))),  # –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                'has_coordinates': bool(self._safe_int(hotel_data.get('iscoords', 0))),  # –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                'has_description': bool(self._safe_int(hotel_data.get('isdescription', 0))),  # –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                'has_reviews': bool(self._safe_int(hotel_data.get('isreviews', 0))),  # –µ—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                'sea_distance': self._safe_int(hotel_data.get('seadistance', 0)),  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–æ—Ä—è –≤ –º–µ—Ç—Ä–∞—Ö
                
                # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                'sea_distance_text': self._format_sea_distance(hotel_data.get('seadistance', 0)),
                'rating_text': self._format_rating(hotel_data.get('hotelrating', 0)),
                'stars_text': self._format_stars(hotel_data.get('hotelstars', 0)),
                
                # –¢—É—Ä—ã (–±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ)
                'tours': hotel_data.get('tours', [])
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            try:
                hotel_info.update({
                    'main_photo': hotel_info['picture_link'],  # –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
                    'photos': [],  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    'facilities': None,  # —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–µ–ª—è
                    'coordinates': None,  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–µ–ª—è
                    'detailed_description': '',  # –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    'reviews': [],  # –æ—Ç–∑—ã–≤—ã
                    'room_types': [],  # —Ç–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤
                    'meal_types': [],  # —Ç–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è
                })
            except:
                hotel_info.update({
                    'main_photo': hotel_info['picture_link'],  # –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
                    'photos': [],  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    'facilities': None,  # —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–µ–ª—è
                    'coordinates': None,  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–µ–ª—è
                    'detailed_description': '',  # –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    'reviews': [],  # –æ—Ç–∑—ã–≤—ã
                    'room_types': [],  # —Ç–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤
                    'meal_types': [],  # —Ç–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è
                })
            return hotel_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ö–õ–Æ–ß–ê–ú–ò
            return {
                'hotel_id': hotel_data.get('hotelcode'),
                'hotel_name': hotel_data.get('hotelname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–µ–ª—å'),
                'hotel_stars': 0,
                'hotel_rating': 0.0,
                'min_price': 0.0,
                'country_name': hotel_data.get('countryname', ''),
                'region_name': hotel_data.get('regionname', ''),
                
                # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:
                'hotel_description': hotel_data.get('hoteldescription', ''),
                'hotel_picture': hotel_data.get('picturelink', ''),
                'hotel_review_link': hotel_data.get('reviewlink', ''),
                'description': hotel_data.get('hoteldescription', ''),
                'sea_distance': 0,
                'tours': hotel_data.get('tours', [])
            }

    def _enrich_hotel_info_with_details(self, hotel_info: Dict, hotel_details: Dict) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ TourVisor API"""
        enriched_data = {}
        
        try:
            if not isinstance(hotel_details, dict):
                logger.warning("‚ö†Ô∏è hotel_details –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
                return enriched_data
            
            logger.info(f"üîß –û–±–æ–≥–∞—â–∞–µ–º –æ—Ç–µ–ª—å –¥–µ—Ç–∞–ª—è–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(hotel_details.keys())}")
            
            # ‚úÖ 1. –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            if hotel_details.get("description"):
                enriched_data['detailed_description'] = hotel_details['description']
                enriched_data['hotel_description'] = hotel_details['description']
            
            # ‚úÖ 2. –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            if hotel_details.get("phone"):
                enriched_data['phone'] = self._safe_string(hotel_details['phone'])
            
            if hotel_details.get("site"):
                enriched_data['website'] = self._safe_string(hotel_details['site'])
            
            # ‚úÖ 3. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            if hotel_details.get("build"):
                enriched_data['build_year'] = self._safe_int(hotel_details['build'])
            
            if hotel_details.get("repair"):
                enriched_data['renovation_year'] = self._safe_int(hotel_details['repair'])
            
            if hotel_details.get("square"):
                enriched_data['hotel_area'] = self._safe_string(hotel_details['square'])
            
            # ‚úÖ 4. –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï –ò –ö–û–û–†–î–ò–ù–ê–¢–´
            if hotel_details.get("placement"):
                enriched_data['short_description'] = self._safe_string(hotel_details['placement'])
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            lat = self._safe_float(hotel_details.get("coord1"))
            lng = self._safe_float(hotel_details.get("coord2"))
            if lat and lng:
                enriched_data['coordinates'] = {"lat": lat, "lng": lng}
            
            # ‚úÖ 5. –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
            images_data = self._build_images_info(hotel_details)
            if images_data[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                enriched_data['images'] = images_data[0]
                enriched_data['images_count'] = images_data[1]
                enriched_data['main_image'] = images_data[2]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –ª—É—á—à–µ
                if images_data[2] and not hotel_info.get('hotel_picture'):
                    enriched_data['hotel_picture'] = images_data[2]
            
            # ‚úÖ 6. FACILITIES - –ü–†–ê–í–ò–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï
            facilities_data = self._build_facilities_info(hotel_details)
            if facilities_data:
                enriched_data['facilities'] = facilities_data
            
            # ‚úÖ 7. –û–¢–ó–´–í–´
            if hotel_details.get("reviews") and isinstance(hotel_details["reviews"], list):
                enriched_data['reviews'] = self._build_reviews_info(hotel_details)
            
            # ‚úÖ 8. –û–ë–ù–û–í–õ–Ø–ï–ú –§–õ–ê–ì–ò –ù–ê–õ–ò–ß–ò–Ø –î–ê–ù–ù–´–•
            if enriched_data.get('images'):
                enriched_data['has_photos'] = True
                enriched_data['is_photo'] = True
            
            if enriched_data.get('coordinates'):
                enriched_data['has_coordinates'] = True
                enriched_data['is_coords'] = True
            
            if enriched_data.get('detailed_description'):
                enriched_data['has_description'] = True
                enriched_data['is_description'] = True
            
            if enriched_data.get('reviews'):
                enriched_data['has_reviews'] = True
                enriched_data['is_reviews'] = True
            
            logger.info(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {len(enriched_data)}")
            logger.debug(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {list(enriched_data.keys())}")
            
            return enriched_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è: {e}")
            return enriched_data


    def _format_sea_distance(self, distance_meters: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –º–æ—Ä—è"""
        try:
            distance = self._safe_int(distance_meters)
            if distance == 0:
                return "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            elif distance < 50:
                return "–ù–∞ –±–µ—Ä–µ–≥—É –º–æ—Ä—è"
            elif distance < 100:
                return f"{distance}–º –¥–æ –º–æ—Ä—è"
            elif distance < 1000:
                return f"{distance}–º –¥–æ –º–æ—Ä—è"
            else:
                km = distance / 1000
                return f"{km:.1f}–∫–º –¥–æ –º–æ—Ä—è"
        except:
            return "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"


    def _format_rating(self, rating: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–µ–ª—è"""
        try:
            rating_val = self._safe_float(rating)
            if rating_val == 0:
                return "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"
            else:
                return f"{rating_val:.1f}/5.0"
        except:
            return "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"


    def _format_stars(self, stars: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏ –æ—Ç–µ–ª—è"""
        try:
            stars_val = self._safe_int(stars)
            if stars_val == 0:
                return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            else:
                return f"{stars_val}‚òÖ"
        except:
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"


    def _safe_int(self, value, default: int = 0) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            if value is None:
                return default
            return int(value)
        except (ValueError, TypeError):
            return default


    def _safe_float(self, value, default: float = 0.0) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            if value is None:
                return default
            return float(value)
        except (ValueError, TypeError):
            return default

    
    def _build_facilities_info(self, hotel_details: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–¥–æ–±—Å—Ç–≤–∞—Ö –æ—Ç–µ–ª—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –¥–ª—è HotelFacilities"""
        try:
            facilities = {
                "territory": "",
                "in_room": "",
                "room_types": [],
                "services": [],
                "services_free": [],
                "services_paid": [],
                "animation": "",
                "child_services": "",
                "beach_description": "",
                "meal_types": [],
                "meal_description": ""
            }
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ hotel_details
            if hotel_details.get("territory"):
                facilities["territory"] = self._safe_string(hotel_details["territory"])
            
            if hotel_details.get("inroom"):
                facilities["in_room"] = self._safe_string(hotel_details["inroom"])
            
            # –¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤
            if hotel_details.get("roomtypes"):
                room_types = hotel_details["roomtypes"]
                if isinstance(room_types, list):
                    facilities["room_types"] = [self._safe_string(rt) for rt in room_types]
                elif isinstance(room_types, str):
                    facilities["room_types"] = [self._safe_string(room_types)]
            
            # –£—Å–ª—É–≥–∏
            facilities["services"] = self._parse_services_list(hotel_details.get("services"))
            facilities["services_free"] = self._parse_services_list(hotel_details.get("servicefree"))
            facilities["services_paid"] = self._parse_services_list(hotel_details.get("servicepay"))
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            if hotel_details.get("animation"):
                facilities["animation"] = self._safe_string(hotel_details["animation"])
            
            if hotel_details.get("child"):
                facilities["child_services"] = self._safe_string(hotel_details["child"])
            
            if hotel_details.get("beach"):
                facilities["beach_description"] = self._safe_string(hotel_details["beach"])
            
            # –ü–∏—Ç–∞–Ω–∏–µ
            facilities["meal_types"] = self._parse_services_list(hotel_details.get("meallist"))
            if hotel_details.get("mealtypes"):
                facilities["meal_description"] = self._safe_string(hotel_details["mealtypes"])
            
            # ‚úÖ –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º dict (–∫–æ—Ç–æ—Ä—ã–π Pydantic –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ HotelFacilities)
            return facilities
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–¥–æ–±—Å—Ç–≤–∞—Ö: {e}")
            # ‚úÖ –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π dict:
            return {
                "territory": "",
                "in_room": "",
                "room_types": [],
                "services": [],
                "services_free": [],
                "services_paid": [],
                "animation": "",
                "child_services": "",
                "beach_description": "",
                "meal_types": [],
                "meal_description": ""
            }
    def _parse_services_list(self, services_data: Any) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
        try:
            if not services_data:
                return []
            
            if isinstance(services_data, list):
                return [self._safe_string(service) for service in services_data if service]
            elif isinstance(services_data, str):
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
                services = services_data.replace('\n', ',').split(',')
                return [self._safe_string(service.strip()) for service in services if service.strip()]
            else:
                return [self._safe_string(services_data)]
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: {e}")
            return []

    def _build_images_info(self, hotel_details: Dict[str, Any]) -> tuple:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –æ—Ç–µ–ª—è"""
        try:
            images = []
            main_image = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ images
            if "images" in hotel_details:
                images_data = hotel_details["images"]
                
                if isinstance(images_data, list):
                    for img in images_data:
                        if isinstance(img, dict):
                            image_info = {
                                "url": self._safe_string(img.get("image") or img.get("url") or img.get("link")),
                                "description": self._safe_string(img.get("description", "")),
                                "type": self._safe_string(img.get("type", "hotel"))
                            }
                            if image_info["url"]:
                                images.append(image_info)
                        elif isinstance(img, str) and img.strip():
                            images.append({
                                "url": self._safe_string(img),
                                "description": "",
                                "type": "hotel"
                            })
                elif isinstance(images_data, str) and images_data.strip():
                    images.append({
                        "url": self._safe_string(images_data),
                        "description": "",
                        "type": "hotel"
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            image_fields = ["hotelpicturebig", "hotelpicturemedium", "hotelpicturesmall", "picture", "image"]
            for field in image_fields:
                if hotel_details.get(field):
                    image_url = self._safe_string(hotel_details[field])
                    if image_url and not any(img["url"] == image_url for img in images):
                        images.append({
                            "url": image_url,
                            "description": f"–§–æ—Ç–æ –æ—Ç–µ–ª—è ({field})",
                            "type": "hotel"
                        })
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if images:
                main_image = images[0]["url"]
            
            images_count = len(images)
            
            logger.debug(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–µ–ª—è")
            return images, images_count, main_image
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: {e}")
            return [], 0, ""

    def _build_reviews_info(self, hotel_details: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
        try:
            reviews = []
            
            if "reviews" in hotel_details:
                reviews_data = hotel_details["reviews"]
                
                if isinstance(reviews_data, list):
                    for review in reviews_data[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—Ç–∑—ã–≤–æ–≤
                        if isinstance(review, dict):
                            review_info = {
                                "author": self._safe_string(review.get("author", "–ê–Ω–æ–Ω–∏–º")),
                                "date": self._safe_string(review.get("date", "")),
                                "rating": self._safe_float(review.get("rating")),
                                "title": self._safe_string(review.get("title", "")),
                                "text": self._safe_string(review.get("text", "")),
                                "pros": self._safe_string(review.get("pros", "")),
                                "cons": self._safe_string(review.get("cons", ""))
                            }
                            reviews.append(review_info)
            
            logger.debug(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
            return reviews
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∑—ã–≤–∞—Ö: {e}")
            return []

    def _set_hotel_flags(self, hotel_info: Dict[str, Any]) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            has_photos = bool(hotel_info.get("images") or hotel_info.get("hotel_picture") or hotel_info.get("main_image"))
            hotel_info["has_photos"] = has_photos
            hotel_info["is_photo"] = has_photos  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            location = hotel_info.get("location", {})
            has_coordinates = bool(location and location.get("latitude") and location.get("longitude"))
            hotel_info["has_coordinates"] = has_coordinates
            hotel_info["is_coords"] = has_coordinates  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            has_description = bool(hotel_info.get("description") or hotel_info.get("hotel_description"))
            hotel_info["has_description"] = has_description
            hotel_info["is_description"] = has_description  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            has_reviews = bool(hotel_info.get("reviews"))
            hotel_info["has_reviews"] = has_reviews
            hotel_info["is_reviews"] = has_reviews  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
            return hotel_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤: {e}")
            return hotel_info

    def _create_tour_info(self, hotel_data: Dict, tour_data: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ç—É—Ä–æ–≤
            tour_info = {
                "tour_id": self._safe_string(tour_data.get("tourid")),
                "operator_name": self._safe_string(tour_data.get("operatorname", "")),
                "fly_date": self._safe_string(tour_data.get("flydate")),
                "nights": self._safe_int(tour_data.get("nights")) or 7,
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
                "price": self._safe_float(tour_data.get("price")) or 0.0,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º float –≤–º–µ—Å—Ç–æ int
                "fuel_charge": self._safe_float(tour_data.get("fuelcharge")) or 0.0,
                
                "meal": self._safe_string(tour_data.get("meal", "")),
                "room_type": self._safe_string(tour_data.get("room", "")),
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                "adults": self._safe_int(tour_data.get("adults")) or 2,
                "children": self._safe_int(tour_data.get("child")) or 0,
                
                "tour_link": self._safe_string(tour_data.get("tourlink")),
                "currency": self._safe_string(tour_data.get("currency", "RUB")),
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                "is_regular": bool(self._safe_int(tour_data.get("regular", 0))),
                "is_promo": bool(self._safe_int(tour_data.get("promo", 0))),
                "is_on_request": bool(self._safe_int(tour_data.get("onrequest", 0))),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "flight_status": self._safe_int(tour_data.get("flightstatus", 1)),
                "hotel_status": self._safe_int(tour_data.get("hotelstatus", 1)),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ
                "tour_name": self._safe_string(tour_data.get("tourname", "")),
                "placement": self._safe_string(tour_data.get("placement", "")),
                "meal_russian": self._safe_string(tour_data.get("mealrussian", "")),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ TourVisor API
                "night_flight": self._safe_int(tour_data.get("nightflight", 0)),
                "price_ue": self._safe_float(tour_data.get("priceue", 0.0)),
            }
            
            return tour_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return {
                "tour_id": tour_data.get("tourid"),
                "operator_name": tour_data.get("operatorname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"),
                "fly_date": tour_data.get("flydate", ""),
                "nights": 7,
                "price": 0.0,
                "fuel_charge": 0.0,
                "meal": "",
                "room_type": "",
                "adults": 2,
                "children": 0,
                "currency": "RUB",
                "is_regular": False,
                "is_promo": False,
                "is_on_request": False,
                "flight_status": 1,
                "hotel_status": 1
            }


    # –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ _safe_float –ú–ï–¢–û–î
    def _safe_float(self, value, default: float = 0.0) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            if value is None or value == "":
                return default
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            if isinstance(value, str):
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ (–¥–ª—è —Ü–µ–Ω)
                cleaned = value.strip().replace(',', '').replace(' ', '')
                if not cleaned:
                    return default
                return float(cleaned)
            
            return float(value)
        except (ValueError, TypeError):
            return default


    def _safe_int(self, value, default: int = 0) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            if value is None or value == "":
                return default
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            if isinstance(value, str):
                cleaned = value.strip().replace(',', '').replace(' ', '')
                if not cleaned:
                    return default
                return int(float(cleaned))  # –ß–µ—Ä–µ–∑ float –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "123.0"
            
            return int(value)
        except (ValueError, TypeError):
            return default


    def _safe_string(self, value: Any) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É"""
        try:
            if value is None:
                return ""
            elif isinstance(value, (dict, list, tuple)):
                return ""
            else:
                return str(value).strip()
        except (ValueError, TypeError):
            return ""
    def _build_search_params(self, search_request: SpecificTourSearchRequest) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è TourVisor API"""
        
        # –ë–∞–∑–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            "departure": search_request.departure,
            "country": search_request.country,
            "adults": search_request.adults,
            "child": search_request.children,
            "format": "json"
        }
        
        # –î–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏)
        if search_request.date_from:
            params["datefrom"] = search_request.date_from
        else:
            start_date = datetime.now() + timedelta(days=3)
            params["datefrom"] = start_date.strftime("%d.%m.%Y")
        
        if search_request.date_to:
            params["dateto"] = search_request.date_to
        else:
            end_date = datetime.now() + timedelta(days=17)
            params["dateto"] = end_date.strftime("%d.%m.%Y")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
        if search_request.nights:
            params["nightsfrom"] = search_request.nights
            params["nightsto"] = search_request.nights
        else:
            params["nightsfrom"] = 7
            params["nightsto"] = 10
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if search_request.hotel_stars:
            params["stars"] = search_request.hotel_stars
            params["starsbetter"] = 1
        
        if search_request.meal_type:
            params["meal"] = search_request.meal_type
            params["mealbetter"] = 1
        
        if search_request.region_code:
            params["regions"] = search_request.region_code
        
        if search_request.min_price:
            params["pricefrom"] = search_request.min_price
        
        if search_request.max_price:
            params["priceto"] = search_request.max_price
        
        if search_request.rating:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∫–æ–¥ TourVisor
            if search_request.rating >= 4.5:
                params["rating"] = 5
            elif search_request.rating >= 4.0:
                params["rating"] = 4
            elif search_request.rating >= 3.5:
                params["rating"] = 3
            elif search_request.rating >= 3.0:
                params["rating"] = 2
            else:
                params["rating"] = 0
        
        if search_request.hotel_type:
            params["hoteltypes"] = search_request.hotel_type
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        params["pricetype"] = 0  # –¶–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
        
        return params

    async def _find_hotel_id_by_name(self, hotel_name: str, country_code: int) -> Optional[str]:
        """–ü–æ–∏—Å–∫ ID –æ—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –æ—Ç–µ–ª—è '{hotel_name}' –≤ —Å—Ç—Ä–∞–Ω–µ {country_code}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
            hotels_data = await tourvisor_client.get_references(
                "hotel",
                hotcountry=country_code
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            hotels = []
            if "lists" in hotels_data and "hotels" in hotels_data["lists"]:
                hotels_nested = hotels_data["lists"]["hotels"].get("hotel", [])
                if isinstance(hotels_nested, list):
                    hotels = hotels_nested
                elif hotels_nested:
                    hotels = [hotels_nested]
            elif "hotel" in hotels_data:
                hotels_direct = hotels_data.get("hotel", [])
                if isinstance(hotels_direct, list):
                    hotels = hotels_direct
                elif hotels_direct:
                    hotels = [hotels_direct]
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä–∞–Ω–µ {country_code}")
            
            if not hotels:
                logger.warning(f"‚ùå –ù–µ—Ç –æ—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}!")
                return None
            
            # –ò—â–µ–º –æ—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
            search_name = hotel_name.lower().strip()
            
            # –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for hotel in hotels:
                hotel_name_full = hotel.get("name", "").lower().strip()
                if search_name == hotel_name_full:
                    logger.info(f"‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {hotel.get('name')} (ID: {hotel.get('id')})")
                    return hotel.get("id")
            
            # –ó–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for hotel in hotels:
                hotel_name_full = hotel.get("name", "").lower().strip()
                if search_name in hotel_name_full:
                    logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {hotel.get('name')} (ID: {hotel.get('id')})")
                    return hotel.get("id")
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for hotel in hotels:
                hotel_name_full = hotel.get("name", "").lower().strip()
                if hotel_name_full in search_name:
                    logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {hotel.get('name')} (ID: {hotel.get('id')})")
                    return hotel.get("id")
            
            logger.warning(f"‚ùå –û—Ç–µ–ª—å '{hotel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(hotels)} –æ—Ç–µ–ª–µ–π")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª—è: {e}")
            return None

    def _safe_string(self, value: Any) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É"""
        try:
            if value is None:
                return ""
            elif isinstance(value, (dict, list, tuple)):
                return ""
            else:
                return str(value).strip()
        except (ValueError, TypeError):
            return ""

    def _safe_int(self, value: Any) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            return int(value) if value is not None and str(value).strip() else None
        except (ValueError, TypeError):
            return None
    
    def _safe_float(self, value: Any) -> Optional[float]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            return float(value) if value is not None and str(value).strip() else None
        except (ValueError, TypeError):
            return None
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å SpecificTourService –≤ app/services/specific_tour_service.py

    def _extract_hotels_from_results(self, search_results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–µ–ª–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            logger.debug(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            
            data = search_results.get("data", {})
            result_data = data.get("result", {})
            hotels = result_data.get("hotel", [])
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return hotels
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π: {e}")
            return []

    def _select_best_hotel(self, hotels_data: List[Dict[str, Any]], search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –æ—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            if not hotels_data:
                return None
            
            logger.info(f"üèÜ –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–µ–ª—å –∏–∑ {len(hotels_data)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–µ–ª–∏ —Å —Ç—É—Ä–∞–º–∏
            hotels_with_tours = []
            for hotel in hotels_data:
                tours_data = hotel.get("tours", {})
                if tours_data:
                    tours = tours_data.get("tour", [])
                    if tours:
                        hotels_with_tours.append(hotel)
            
            if not hotels_with_tours:
                logger.warning(f"‚ùå –ù–µ—Ç –æ—Ç–µ–ª–µ–π —Å —Ç—É—Ä–∞–º–∏")
                return None
            
            logger.info(f"üè® –ù–∞–π–¥–µ–Ω–æ {len(hotels_with_tours)} –æ—Ç–µ–ª–µ–π —Å —Ç—É—Ä–∞–º–∏")
            
            # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–µ–ª—å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
            best_hotel = max(hotels_with_tours, key=lambda h: self._calculate_hotel_score(h))
            
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –æ—Ç–µ–ª—å: {best_hotel.get('hotelname', 'Unknown')}")
            return best_hotel
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –æ—Ç–µ–ª—è: {e}")
            return hotels_data[0] if hotels_data else None

    def _extract_tours_from_hotel(self, hotel_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è"""
        try:
            hotel_name = hotel_data.get("hotelname", "Unknown")
            logger.debug(f"üé´ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—É—Ä—ã –∏–∑ –æ—Ç–µ–ª—è: {hotel_name}")
            
            tours_data = hotel_data.get("tours", {})
            if not tours_data:
                logger.warning(f"‚ùå –ù–µ—Ç —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ {hotel_name}")
                return []
            
            tours = tours_data.get("tour", [])
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if not isinstance(tours, list):
                tours = [tours] if tours else []
            
            logger.info(f"üé´ –ù–∞–π–¥–µ–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ {hotel_name}")
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤: {e}")
            return []

    def _calculate_hotel_score(self, hotel: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –±–∞–ª–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª—è"""
        try:
            score = 0.0
            
            # –ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è
            stars = self._safe_int(hotel.get("hotelstars")) or 0
            score += stars * 10
            
            # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è
            rating = self._safe_float(hotel.get("hotelrating")) or 0
            if rating > 0:
                score += rating * 20
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–æ—Ä—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
            sea_distance = self._safe_int(hotel.get("seadistance")) or 1000
            if sea_distance <= 100:
                score += 15
            elif sea_distance <= 300:
                score += 10
            elif sea_distance <= 500:
                score += 5
            
            # –ù–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            if hotel.get("isphoto") == "1":
                score += 5
            
            # –ù–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            if hotel.get("isdescription") == "1":
                score += 3
            
            # –ù–∞–ª–∏—á–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            if hotel.get("isreviews") == "1":
                score += 2
            
            return score
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–∞ –æ—Ç–µ–ª—è: {e}")
            return 0.0

    async def _process_search_results(self, search_results: Dict[str, Any], search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            hotels_data = self._extract_hotels_from_results(search_results)
            
            if not hotels_data:
                logger.warning(f"‚ùå –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                return None
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(hotels_data)} –æ—Ç–µ–ª–µ–π")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–µ–ª—å (–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º)
            best_hotel = self._select_best_hotel(hotels_data, search_request)
            
            if not best_hotel:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–µ–ª—å")
                return None
            
            # –í–ê–ñ–ù–û: –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            logger.info(f"üèóÔ∏è –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ: {best_hotel.get('hotelname', 'Unknown')}")
            hotel_info = await self._build_hotel_info(best_hotel)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä—ã
            tours_data = self._extract_tours_from_hotel(best_hotel)
            
            if not tours_data:
                logger.warning(f"‚ùå –¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–µ–ª—è {hotel_info.get('hotel_name', 'Unknown')}")
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä—ã –ø–æ —Ü–µ–Ω–µ
            sorted_tours = sorted(tours_data, key=lambda t: self._safe_float(t.get('price', 0)) or float('inf'))
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤
            tours_list = []
            for tour_data in sorted_tours:
                tour_info = self._create_tour_info(best_hotel, tour_data)
                tours_list.append(tour_info)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tours_list)} —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–µ–ª—è {hotel_info.get('hotel_name', 'Unknown')}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                "hotel_info": hotel_info,  # –û–ë–û–ì–ê–©–ï–ù–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ
                "tours": tours_list,
                "tours_count": len(tours_list),
                "search_results_count": len(hotels_data),
                "is_fallback": False,
                "fallback_strategy": None,
                "available_dates": self._extract_available_dates(tours_list),
                "meal_types": self._extract_meal_types(tours_list),
                "operators": self._extract_operators(tours_list),
                "price_range": self._calculate_price_range(tours_list)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return None

    def _extract_available_dates(self, tours_list: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤—ã–ª–µ—Ç–∞"""
        try:
            dates = set()
            for tour in tours_list:
                fly_date = tour.get('fly_date')
                if fly_date:
                    dates.add(fly_date)
            return sorted(list(dates))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç: {e}")
            return []

    def _extract_meal_types(self, tours_list: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            meals = set()
            for tour in tours_list:
                meal = tour.get('meal')
                if meal:
                    meals.add(meal)
            return sorted(list(meals))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return []

    def _extract_operators(self, tours_list: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            operators = set()
            for tour in tours_list:
                operator = tour.get('operator_name')
                if operator:
                    operators.add(operator)
            return sorted(list(operators))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []

    def _calculate_price_range(self, tours_list: List[Dict[str, Any]]) -> Optional[Dict[str, float]]:
        """–†–∞—Å—á–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
        try:
            if not tours_list:
                return None
            
            prices = [tour.get('price', 0) for tour in tours_list if tour.get('price', 0) > 0]
            
            if not prices:
                return None
            
            return {
                "min_price": min(prices),
                "max_price": max(prices),
                "avg_price": sum(prices) / len(prices)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω: {e}")
            return None
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
specific_tour_service = SpecificTourService()