import asyncio
import random
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.services.tour_service import tour_service
from app.models.tour import RandomTourRequest, HotTourInfo
from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class RandomToursService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏"""
    
    def __init__(self):
        self.cache = cache_service
    
    async def get_random_tours(self, request: RandomTourRequest) -> List[HotTourInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
        cache_key = "random_tours_from_search"
        
        logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, count={request.count}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        try:
            cached_tours = await self.cache.get(cache_key)
            logger.info(f"üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞: –Ω–∞–π–¥–µ–Ω–æ {len(cached_tours) if cached_tours else 0} —Ç—É—Ä–æ–≤")
            
            if cached_tours:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
                tours_list = []
                for tour_data in cached_tours[:request.count]:
                    try:
                        tour = HotTourInfo(**tour_data)
                        tours_list.append(tour)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Ç—É—Ä–∞ –∏–∑ –∫—ç—à–∞: {e}")
                        continue
                
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(tours_list)} —Ç—É—Ä–æ–≤ –∏–∑ –∫—ç—à–∞")
                return tours_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º: {e}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        logger.info("üîÑ –ö—ç—à –ø—É—Å—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        return await self._generate_random_tours_via_search(request.count)
    
    async def _generate_random_tours_via_search(self, count: int) -> List[HotTourInfo]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
        logger.info(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ì–ï–ù–ï–†–ê–¶–ò–Æ {count} –¢–£–†–û–í –ß–ï–†–ï–ó –ü–û–ò–°–ö")
        
        try:
            random_tours = []
            countries = settings.POPULAR_COUNTRIES.copy()
            cities = settings.DEPARTURE_CITIES.copy()
            
            logger.info(f"üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: {countries}")
            logger.info(f"üèôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {cities}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            search_variants = self._create_search_variants(countries, cities, count)
            logger.info(f"üîç –°–æ–∑–¥–∞–Ω–æ {len(search_variants)} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            
            for i, search_params in enumerate(search_variants):
                if len(random_tours) >= count:
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ ({count})")
                    break
                
                try:
                    logger.info(f"üì° –ü–æ–∏—Å–∫ {i+1}/{len(search_variants)}: {search_params['country']} –∏–∑ –≥–æ—Ä–æ–¥–∞ {search_params['departure']}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                    request_id = await tourvisor_client.search_tours(search_params)
                    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                    tour_found = await self._wait_and_get_tour_from_search(request_id, search_params)
                    
                    if tour_found:
                        random_tours.append(tour_found)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—É—Ä {len(random_tours)}: {tour_found.hotelname} –≤ {tour_found.countryname}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}: {e}")
                    continue
            
            logger.info(f"üèÅ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê. –ü–æ–ª—É—á–µ–Ω–æ —Ç—É—Ä–æ–≤: {len(random_tours)}")
            
            if random_tours:
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    await self.cache.set(
                        "random_tours_from_search",
                        [tour.dict() for tour in random_tours],
                        ttl=settings.POPULAR_TOURS_CACHE_TTL
                    )
                    logger.info(f"üíæ –¢—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                except Exception as cache_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {cache_error}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
            
            return random_tours
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤: {e}")
            return []
    
    def _create_search_variants(self, countries: List[int], cities: List[int], count: int) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        variants = []
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞—Ç—ã
        base_dates = [
            (7, 14),   # —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –Ω–∞ –Ω–µ–¥–µ–ª—é
            (14, 21),  # —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é  
            (21, 28),  # —á–µ—Ä–µ–∑ 3 –Ω–µ–¥–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
        ]
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ—á–µ–π
        nights_variants = [
            (7, 10),   # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–ø—É—Å–∫
            (10, 14),  # –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫
            (3, 7),    # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–ø—É—Å–∫
        ]
        
        for i in range(count * 2):  # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ–º –Ω—É–∂–Ω–æ
            country = random.choice(countries)
            city = random.choice(cities)
            date_variant = random.choice(base_dates)
            nights_variant = random.choice(nights_variants)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã
            start_offset, end_offset = date_variant
            start_date = datetime.now() + timedelta(days=start_offset)
            end_date = datetime.now() + timedelta(days=end_offset)
            
            variant = {
                "departure": city,
                "country": country,
                "datefrom": start_date.strftime("%d.%m.%Y"),
                "dateto": end_date.strftime("%d.%m.%Y"),
                "nightsfrom": nights_variant[0],
                "nightsto": nights_variant[1],
                "adults": random.choice([2, 2, 2, 4]),  # —á–∞—â–µ 2 –≤–∑—Ä–æ—Å–ª—ã—Ö
                "child": random.choice([0, 0, 0, 1, 2]),  # —á–∞—â–µ –±–µ–∑ –¥–µ—Ç–µ–π
                "stars": random.choice([3, 4, 5]),  # —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–µ–ª–∏
            }
            
            variants.append(variant)
        
        return variants
    
    async def _wait_and_get_tour_from_search(self, request_id: str, search_params: Dict[str, Any]) -> Optional[HotTourInfo]:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞"""
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
            for attempt in range(10):
                await asyncio.sleep(1)
                
                status_result = await tourvisor_client.get_search_status(request_id)
                status_data = status_result.get("data", {}).get("status", {})
                state = status_data.get("state", "searching")
                
                logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: —Å—Ç–∞—Ç—É—Å = {state}")
                
                if state == "finished":
                    break
            else:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ {request_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = await tourvisor_client.get_search_results(request_id, 1, 10)
            data = results.get("data", {})
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            if not hotel_list:
                logger.debug(f"üì≠ –ù–µ—Ç –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–µ–ª—å
            random_hotel = random.choice(hotel_list)
            tours_data = random_hotel.get("tours", {}).get("tour", [])
            
            if not isinstance(tours_data, list):
                tours_data = [tours_data] if tours_data else []
            
            if not tours_data:
                logger.debug(f"üì≠ –ù–µ—Ç —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—É—Ä
            random_tour_data = random.choice(tours_data)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç HotTourInfo
            hot_tour_data = self._convert_search_result_to_hot_tour(
                random_hotel, random_tour_data, search_params
            )
            
            return HotTourInfo(**hot_tour_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞ –∏–∑ –ø–æ–∏—Å–∫–∞: {e}")
            return None
    
    def _convert_search_result_to_hot_tour(self, hotel_data: Dict, tour_data: Dict, search_params: Dict) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç HotTourInfo"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
        country_name = tour_service._get_country_name(search_params["country"])
        city_name = tour_service._get_city_name(search_params["departure"])
        
        return {
            "countrycode": str(search_params["country"]),
            "countryname": country_name,
            "departurecode": str(search_params["departure"]),
            "departurename": city_name,
            "departurenamefrom": tour_service._get_city_name_from(search_params["departure"]),
            "operatorcode": tour_data.get("operatorcode", ""),
            "operatorname": tour_data.get("operatorname", ""),
            "hotelcode": hotel_data.get("hotelcode", ""),
            "hotelname": hotel_data.get("hotelname", ""),
            "hotelstars": hotel_data.get("hotelstars", 3),
            "hotelregioncode": hotel_data.get("regioncode", ""),
            "hotelregionname": hotel_data.get("regionname", ""),
            "hotelpicture": hotel_data.get("picturelink", ""),
            "fulldesclink": hotel_data.get("fulldesclink", ""),
            "flydate": tour_data.get("flydate", ""),
            "nights": tour_data.get("nights", 7),
            "meal": tour_data.get("mealrussian", tour_data.get("meal", "")),
            "price": float(tour_data.get("price", 0)),
            "priceold": None,  # –í –æ–±—ã—á–Ω–æ–º –ø–æ–∏—Å–∫–µ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã
            "currency": tour_data.get("currency", "RUB")
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
random_tours_service = RandomToursService()