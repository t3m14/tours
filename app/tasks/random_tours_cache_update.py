# app/tasks/random_tours_cache_update.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° HOTELTYPES

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import traceback
import random

from app.services.random_tours_service import random_tours_service
from app.services.cache_service import cache_service
from app.models.tour import RandomTourRequest
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class RandomToursCacheUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        self.update_interval = int(os.getenv("RANDOM_TOURS_UPDATE_INTERVAL_HOURS", "12")) * 3600  # 12 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.tours_per_type = int(os.getenv("RANDOM_TOURS_PER_TYPE", "8"))  # 8 —Ç—É—Ä–æ–≤ –Ω–∞ —Ç–∏–ø –æ—Ç–µ–ª—è
        self.generation_strategies = os.getenv("RANDOM_TOURS_STRATEGIES", "search,hot_tours,mock").split(",")
        self.countries_to_update = os.getenv("RANDOM_TOURS_COUNTRIES", "1,2,4,9,8").split(",")  # –¢–æ–ø —Å—Ç—Ä–∞–Ω—ã
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ï —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º –Ω–∞ API TourVisor
        self.hotel_types_mapping = {
            "–ª—é–±–æ–π": {
                "display_name": "–ª—é–±–æ–π", 
                "api_param": None,  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                "cache_key": "–ª—é–±–æ–π"
            },
            "–∞–∫—Ç–∏–≤–Ω—ã–π": {
                "display_name": "–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö",
                "api_param": "active",  # TourVisor API: active
                "cache_key": "–∞–∫—Ç–∏–≤–Ω—ã–π"
            },
            "—Ä–µ–ª–∞–∫—Å": {
                "display_name": "—Ä–µ–ª–∞–∫—Å –æ—Ç–µ–ª–∏",
                "api_param": "relax",  # TourVisor API: relax
                "cache_key": "—Ä–µ–ª–∞–∫—Å"
            },
            "—Å–µ–º–µ–π–Ω—ã–π": {
                "display_name": "—Å–µ–º–µ–π–Ω—ã–µ –æ—Ç–µ–ª–∏",
                "api_param": "family",  # TourVisor API: family
                "cache_key": "—Å–µ–º–µ–π–Ω—ã–π"
            },
            "–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π": {
                "display_name": "–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–µ–ª–∏",
                "api_param": "health",  # TourVisor API: health
                "cache_key": "–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π"
            },
            "–≥–æ—Ä–æ–¥—Å–∫–æ–π": {
                "display_name": "–≥–æ—Ä–æ–¥—Å–∫–∏–µ –æ—Ç–µ–ª–∏",
                "api_param": "city",  # TourVisor API: city
                "cache_key": "–≥–æ—Ä–æ–¥—Å–∫–æ–π"
            },
            "–ø–ª—è–∂–Ω—ã–π": {
                "display_name": "–ø–ª—è–∂–Ω—ã–µ –æ—Ç–µ–ª–∏",
                "api_param": "beach",  # TourVisor API: beach
                "cache_key": "–ø–ª—è–∂–Ω—ã–π"
            },
            "–¥–µ–ª—é–∫—Å": {
                "display_name": "–¥–µ–ª—é–∫—Å –æ—Ç–µ–ª–∏",
                "api_param": "deluxe",  # TourVisor API: deluxe
                "cache_key": "–¥–µ–ª—é–∫—Å"
            }
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.last_update = None
        self.update_stats = {}
        self.current_hotel_type = None
        
        logger.info(f"üé≤ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: –∏–Ω—Ç–µ—Ä–≤–∞–ª {self.update_interval//3600}—á, "
                   f"{self.tours_per_type} —Ç—É—Ä–æ–≤ –Ω–∞ —Ç–∏–ø, —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π: {list(self.hotel_types_mapping.keys())}")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logger.info(f"üé≤ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval//3600}—á)")
        
        # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        auto_start = os.getenv("RANDOM_TOURS_AUTO_START", "true").lower() == "true"
        if auto_start:
            logger.info("üöÄ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á–µ–Ω - –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
            try:
                await self._run_update_cycle()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        
        while self.is_running:
            try:
                await asyncio.sleep(self.update_interval)
                
                if self.is_running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    await self._run_update_cycle()
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
                logger.error(traceback.format_exc())
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(3600)
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        self.is_running = False
    
    async def _run_update_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        start_time = datetime.now()
        logger.info(f"üé≤ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–õ–£–ß–ê–ô–ù–´–• –¢–£–†–û–í ({start_time.strftime('%Y-%m-%d %H:%M:%S')})")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            hotel_types = list(self.hotel_types_mapping.keys())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_stats = {
                "start_time": start_time,
                "total_hotel_types": len(hotel_types),
                "tours_per_type": self.tours_per_type,
                "processed_types": 0,
                "successful_types": 0,
                "failed_types": 0,
                "total_tours_generated": 0,
                "strategies_used": {},
                "hotel_types_details": {},
                "api_calls_made": 0,
                "real_api_tours": 0,
                "mock_tours": 0
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            for hotel_type_key in hotel_types:
                try:
                    hotel_type_info = self.hotel_types_mapping[hotel_type_key]
                    display_name = hotel_type_info["display_name"]
                    
                    logger.info(f"üè® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞: {display_name}")
                    self.current_hotel_type = display_name
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                    result = await self._update_tours_for_hotel_type(hotel_type_key, hotel_type_info)
                    
                    update_stats["processed_types"] += 1
                    update_stats["api_calls_made"] += result.get("api_calls_made", 0)
                    
                    if result["success"]:
                        update_stats["successful_types"] += 1
                        update_stats["total_tours_generated"] += result["tours_count"]
                        update_stats["real_api_tours"] += result.get("real_tours", 0)
                        update_stats["mock_tours"] += result.get("mock_tours", 0)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                        for strategy, count in result.get("strategies_used", {}).items():
                            update_stats["strategies_used"][strategy] = update_stats["strategies_used"].get(strategy, 0) + count
                    else:
                        update_stats["failed_types"] += 1
                    
                    update_stats["hotel_types_details"][display_name] = result
                    
                    logger.info(f"‚úÖ {display_name}: {result['tours_count']} —Ç—É—Ä–æ–≤ –∑–∞ {result['execution_time_seconds']:.1f}—Å "
                              f"(—Ä–µ–∞–ª—å–Ω—ã—Ö: {result.get('real_tours', 0)}, mock: {result.get('mock_tours', 0)})")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –æ—Ç–µ–ª–µ–π
                    await asyncio.sleep(5)
                    
                except Exception as e:
                    update_stats["processed_types"] += 1
                    update_stats["failed_types"] += 1
                    update_stats["hotel_types_details"][hotel_type_info["display_name"]] = {
                        "success": False,
                        "error": str(e),
                        "tours_count": 0,
                        "execution_time_seconds": 0,
                        "real_tours": 0,
                        "mock_tours": 0
                    }
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_info['display_name']}: {e}")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
            end_time = datetime.now()
            execution_time = end_time - start_time
            
            update_stats["end_time"] = end_time
            update_stats["execution_time_seconds"] = execution_time.total_seconds()
            update_stats["success_rate"] = (update_stats["successful_types"] / len(hotel_types) * 100) if hotel_types else 0
            update_stats["real_tours_percentage"] = (update_stats["real_api_tours"] / update_stats["total_tours_generated"] * 100) if update_stats["total_tours_generated"] > 0 else 0
            
            self.last_update = end_time
            self.update_stats = update_stats
            self.current_hotel_type = None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—ç—à
            await cache_service.set("random_tours_cache_update_stats", update_stats, ttl=48*3600)
            
            logger.info(f"üèÅ –¶–ò–ö–õ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–õ–£–ß–ê–ô–ù–´–• –¢–£–†–û–í –ó–ê–í–ï–†–®–ï–ù")
            logger.info(f"üìä –ò—Ç–æ–≥–æ: {update_stats['successful_types']}/{len(hotel_types)} —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π, "
                       f"{update_stats['total_tours_generated']} —Ç—É—Ä–æ–≤, "
                       f"–≤—Ä–µ–º—è: {execution_time.total_seconds():.1f} —Å–µ–∫, "
                       f"—É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {update_stats['success_rate']:.1f}%, "
                       f"—Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã: {update_stats['real_tours_percentage']:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _update_tours_for_hotel_type(self, hotel_type_key: str, hotel_type_info: Dict) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        start_time = datetime.now()
        
        try:
            display_name = hotel_type_info["display_name"]
            api_param = hotel_type_info["api_param"]
            cache_key_suffix = hotel_type_info["cache_key"]
            
            logger.debug(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.tours_per_type} —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞: {display_name} (API: {api_param})")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            cache_key = f"random_tours_{cache_key_suffix.replace(' ', '_')}"
            await cache_service.delete(cache_key)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ä—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            tours_result, api_calls_made = await self._generate_tours_with_api_filter(
                hotel_type_key, api_param, display_name
            )
            
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            if tours_result and len(tours_result) > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                strategies_used = {}
                real_tours = 0
                mock_tours = 0
                
                for tour in tours_result:
                    strategy = tour.get("generation_strategy", "unknown")
                    strategies_used[strategy] = strategies_used.get(strategy, 0) + 1
                    
                    if strategy in ["search", "hot_tours"]:
                        real_tours += 1
                    else:
                        mock_tours += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                await cache_service.set(cache_key, tours_result, ttl=self.update_interval + 3600)  # TTL = –∏–Ω—Ç–µ—Ä–≤–∞–ª + 1 —á–∞—Å
                
                result = {
                    "success": True,
                    "tours_count": len(tours_result),
                    "execution_time_seconds": execution_time,
                    "real_tours": real_tours,
                    "mock_tours": mock_tours,
                    "api_calls_made": api_calls_made,
                    "quality_stats": {
                        "real_tours": real_tours,
                        "mock_tours": mock_tours,
                        "real_tours_percentage": f"{(real_tours/len(tours_result)*100):.1f}%"
                    },
                    "strategies_used": strategies_used,
                    "hotel_type_api_param": api_param
                }
                
                logger.debug(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(tours_result)} —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}: "
                           f"{real_tours} —Ä–µ–∞–ª—å–Ω—ã—Ö, {mock_tours} mock, API –≤—ã–∑–æ–≤–æ–≤: {api_calls_made}")
                
                return result
            else:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä—ã",
                    "tours_count": 0,
                    "execution_time_seconds": execution_time,
                    "real_tours": 0,
                    "mock_tours": 0,
                    "api_calls_made": api_calls_made
                }
            
        except Exception as e:
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_info['display_name']}: {e}")
            
            return {
                "success": False,
                "error": str(e),
                "tours_count": 0,
                "execution_time_seconds": execution_time,
                "real_tours": 0,
                "mock_tours": 0,
                "api_calls_made": 0
            }
    
    async def _generate_tours_with_api_filter(self, hotel_type_key: str, api_param: Optional[str], display_name: str) -> tuple[List[Dict], int]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π
        
        Args:
            hotel_type_key: –ö–ª—é—á —Ç–∏–ø–∞ –æ—Ç–µ–ª—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            api_param: –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è API TourVisor (hoteltypes)
            display_name: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            
        Returns:
            tuple: (—Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –≤—ã–∑–æ–≤–æ–≤)
        """
        try:
            from app.core.tourvisor_client import tourvisor_client
            from datetime import datetime, timedelta
            
            tours_generated = []
            api_calls_made = 0
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É –æ—Ç–µ–ª—è
            if api_param and "search" in self.generation_strategies:
                logger.debug(f"üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º hoteltypes={api_param}")
                
                try:
                    # –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                    country_id = random.choice([int(c) for c in self.countries_to_update])
                    
                    # –î–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –∑–∞–≤—Ç—Ä–∞ + –Ω–µ–¥–µ–ª—è
                    tomorrow = datetime.now() + timedelta(days=1)
                    week_later = datetime.now() + timedelta(days=8)
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–∏–ø—É –æ—Ç–µ–ª—è
                    search_params = {
                        "departure": 1,  # –ú–æ—Å–∫–≤–∞
                        "country": country_id,
                        "datefrom": tomorrow.strftime("%d.%m.%Y"),
                        "dateto": week_later.strftime("%d.%m.%Y"),
                        "nightsfrom": 7,
                        "nightsto": 10,
                        "adults": 2,
                        "hoteltypes": api_param,  # –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–† - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ç–µ–ª—è
                        "format": "json"
                    }
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                    request_id = await tourvisor_client.search_tours(search_params)
                    api_calls_made += 1
                    
                    if request_id:
                        logger.debug(f"üöÄ –ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ {request_id} –¥–ª—è {display_name}")
                        
                        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
                        max_wait_time = 30  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                        start_wait = datetime.now()
                        
                        while (datetime.now() - start_wait).total_seconds() < max_wait_time:
                            try:
                                status_result = await tourvisor_client.get_search_status(request_id)
                                api_calls_made += 1
                                
                                if status_result:
                                    status_data = status_result.get("data", {}).get("status", {})
                                    state = status_data.get("state", "")
                                    hotels_found = status_data.get("hotelsfound", 0)
                                    
                                    if state == "finished" and hotels_found > 0:
                                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                        search_results = await tourvisor_client.get_search_results(request_id)
                                        api_calls_made += 1
                                        
                                        if search_results:
                                            tours_from_search = await self._extract_tours_from_search_results(
                                                search_results, self.tours_per_type, display_name
                                            )
                                            tours_generated.extend(tours_from_search)
                                            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ {display_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(tours_from_search)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                                        break
                                    elif state == "finished":
                                        logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ {display_name} –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                        break
                                    elif state == "error":
                                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è {display_name}")
                                        break
                                
                                await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                                
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {display_name}: {e}")
                                await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –¥–ª—è {display_name}: {e}")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç—É—Ä–æ–≤)
            if len(tours_generated) < self.tours_per_type and "hot_tours" in self.generation_strategies:
                logger.debug(f"üî• –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}")
                
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É –æ—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –≤ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–∞—Ö —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç)
                    country_id = random.choice([int(c) for c in self.countries_to_update])
                    
                    hot_tours_params = {
                        "city": 1,  # –ú–æ—Å–∫–≤–∞
                        "items": min(20, self.tours_per_type * 2),  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        "countries": str(country_id),
                        "format": "json"
                    }
                    
                    hot_tours_data = await tourvisor_client.get_hot_tours(hot_tours_params)
                    api_calls_made += 1
                    
                    if hot_tours_data and "data" in hot_tours_data:
                        tours_from_hot = await self._extract_tours_from_hot_tours(
                            hot_tours_data, self.tours_per_type - len(tours_generated), display_name
                        )
                        tours_generated.extend(tours_from_hot)
                        logger.info(f"üî• –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã {display_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(tours_from_hot)} —Ç—É—Ä–æ–≤")
                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}: {e}")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Mock —Ç—É—Ä—ã (–µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
            if len(tours_generated) < self.tours_per_type and "mock" in self.generation_strategies:
                needed = self.tours_per_type - len(tours_generated)
                logger.debug(f"üé≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—è mock —Ç—É—Ä–æ–≤ –¥–ª—è {display_name}: –Ω—É–∂–Ω–æ {needed}")
                
                mock_tours = await self._generate_mock_tours(needed, hotel_type_key, display_name)
                tours_generated.extend(mock_tours)
                logger.info(f"üé≠ Mock —Ç—É—Ä—ã {display_name}: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(mock_tours)} —Ç—É—Ä–æ–≤")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            tours_generated = tours_generated[:self.tours_per_type]
            
            logger.info(f"üìä –ò—Ç–æ–≥–æ –¥–ª—è {display_name}: {len(tours_generated)} —Ç—É—Ä–æ–≤, API –≤—ã–∑–æ–≤–æ–≤: {api_calls_made}")
            return tours_generated, api_calls_made
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {display_name}: {e}")
            return [], api_calls_made
    
    async def _extract_tours_from_search_results(self, search_results: Dict, limit: int, hotel_type: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            tours = []
            result_data = search_results.get("data", {}).get("result", {})
            hotels = result_data.get("hotel", [])
            
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            for hotel in hotels[:limit]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
                hotel_tours = hotel.get("tours", {}).get("tour", [])
                if not isinstance(hotel_tours, list):
                    hotel_tours = [hotel_tours] if hotel_tours else []
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç—É—Ä –∏–∑ –æ—Ç–µ–ª—è
                if hotel_tours:
                    tour = hotel_tours[0]
                    
                    tour_data = {
                        "hotel_name": hotel.get("hotelname", ""),
                        "hotel_stars": hotel.get("hotelstars", 0),
                        "hotel_rating": hotel.get("hotelrating", 0),
                        "country_name": hotel.get("countryname", ""),
                        "region_name": hotel.get("regionname", ""),
                        "price": tour.get("price", 0),
                        "nights": tour.get("nights", 7),
                        "operator_name": tour.get("operatorname", ""),
                        "fly_date": tour.get("flydate", ""),
                        "meal": tour.get("mealrussian", tour.get("meal", "")),
                        "placement": tour.get("placement", ""),
                        "tour_name": tour.get("tourname", ""),
                        "currency": tour.get("currency", "RUB"),
                        "adults": tour.get("adults", 2),
                        "children": tour.get("child", 0),
                        "generation_strategy": "search",
                        "hotel_type": hotel_type,
                        "picture_link": hotel.get("picturelink", ""),
                        "search_source": "api_search_with_filter"
                    }
                    
                    tours.append(tour_data)
                    
                    if len(tours) >= limit:
                        break
            
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–ª—è {hotel_type}: {e}")
            return []
    
    async def _extract_tours_from_hot_tours(self, hot_tours_data: Dict, limit: int, hotel_type: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –∏–∑ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤"""
        try:
            tours = []
            tours_data = hot_tours_data.get("data", [])
            
            for tour_item in tours_data[:limit]:
                tour_data = {
                    "hotel_name": tour_item.get("hotelname", ""),
                    "hotel_stars": tour_item.get("stars", 0),
                    "hotel_rating": tour_item.get("rating", 0),
                    "country_name": tour_item.get("countryname", ""),
                    "region_name": tour_item.get("regionname", ""),
                    "price": tour_item.get("price", 0),
                    "nights": tour_item.get("nights", 7),
                    "operator_name": tour_item.get("operatorname", ""),
                    "fly_date": tour_item.get("dateto", ""),
                    "meal": tour_item.get("meal", ""),
                    "placement": tour_item.get("placement", ""),
                    "tour_name": tour_item.get("tourname", ""),
                    "currency": "RUB",
                    "adults": 2,
                    "children": 0,
                    "generation_strategy": "hot_tours",
                    "hotel_type": hotel_type,
                    "picture_link": tour_item.get("picture", ""),
                    "search_source": "hot_tours"
                }
                
                tours.append(tour_data)
            
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}: {e}")
            return []
    
    async def _generate_mock_tours(self, count: int, hotel_type_key: str, hotel_type_display: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–µ–ª—è"""
        try:
            tours = []
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock —Ç—É—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
            mock_data_by_type = {
                "–ª—é–±–æ–π": {
                    "hotels": ["Sunset Resort", "Ocean View Hotel", "Paradise Beach", "Golden Sands"],
                    "price_range": (25000, 80000),
                    "regions": ["–•—É—Ä–≥–∞–¥–∞", "–ê–Ω—Ç–∞–ª—å—è", "–ü—Ö—É–∫–µ—Ç", "–î—É–±–∞–π"]
                },
                "–∞–∫—Ç–∏–≤–Ω—ã–π": {
                    "hotels": ["Adventure Resort", "Active Sports Hotel", "Mountain View Resort", "Extreme Hotel"],
                    "price_range": (30000, 90000),
                    "regions": ["–ê–Ω—Ç–∞–ª—å—è", "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞", "–ë—É–∫–æ–≤–µ–ª—å", "–ê–ª—å–ø—ã"]
                },
                "—Ä–µ–ª–∞–∫—Å": {
                    "hotels": ["Spa Resort", "Wellness Hotel", "Zen Garden Resort", "Tranquil Waters"],
                    "price_range": (40000, 120000),
                    "regions": ["–ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã", "–ë–∞–¥–µ–Ω-–ë–∞–¥–µ–Ω", "–ú–∞—Ä–∏–µ–Ω–±–∞–¥", "–¢–µ—Ä–º–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"]
                },
                "—Å–µ–º–µ–π–Ω—ã–π": {
                    "hotels": ["Family Resort", "Kids Club Hotel", "Happy Family Resort", "Children Paradise"],
                    "price_range": (35000, 95000),
                    "regions": ["–ê–Ω—Ç–∞–ª—å—è", "–ö—Ä–∏—Ç", "–ö–∏–ø—Ä", "–ë–æ–ª–≥–∞—Ä–∏—è"]
                },
                "–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π": {
                    "hotels": ["Health Resort", "Medical Spa", "Healing Waters Resort", "Wellness Center"],
                    "price_range": (50000, 150000),
                    "regions": ["–ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã", "–ñ–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫", "–ï—Å—Å–µ–Ω—Ç—É–∫–∏", "–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫"]
                },
                "–≥–æ—Ä–æ–¥—Å–∫–æ–π": {
                    "hotels": ["City Hotel", "Metropolitan Resort", "Urban Oasis", "Downtown Hotel"],
                    "price_range": (20000, 70000),
                    "regions": ["–°—Ç–∞–º–±—É–ª", "–î—É–±–∞–π", "–ë–∞–Ω–≥–∫–æ–∫", "–°–∏–Ω–≥–∞–ø—É—Ä"]
                },
                "–ø–ª—è–∂–Ω—ã–π": {
                    "hotels": ["Beach Resort", "Seaside Hotel", "Ocean Paradise", "Tropical Beach"],
                    "price_range": (30000, 100000),
                    "regions": ["–•—É—Ä–≥–∞–¥–∞", "–ü—Ö—É–∫–µ—Ç", "–ú–∞–ª—å–¥–∏–≤—ã", "–ë–∞–ª–∏"]
                },
                "–¥–µ–ª—é–∫—Å": {
                    "hotels": ["Luxury Resort", "Premium Hotel", "Elite Resort", "VIP Paradise"],
                    "price_range": (80000, 250000),
                    "regions": ["–ú–∞–ª—å–¥–∏–≤—ã", "–°–µ–π—à–µ–ª—ã", "–°–µ–Ω—Ç-–ë–∞—Ä—Ç", "–ú–æ–Ω–∞–∫–æ"]
                }
            }
            
            mock_config = mock_data_by_type.get(hotel_type_key, mock_data_by_type["–ª—é–±–æ–π"])
            
            for i in range(count):
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
                hotel_name = random.choice(mock_config["hotels"])
                price = random.randint(mock_config["price_range"][0], mock_config["price_range"][1])
                region = random.choice(mock_config["regions"])
                nights = random.choice([7, 10, 14])
                stars = random.choice([3, 4, 5])
                
                tour_data = {
                    "hotel_name": f"{hotel_name} {i+1}",
                    "hotel_stars": stars,
                    "hotel_rating": round(random.uniform(3.0, 5.0), 1),
                    "country_name": "–†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã",
                    "region_name": region,
                    "price": price,
                    "nights": nights,
                    "operator_name": random.choice(["Sunmar", "Coral Travel", "Pegas", "TUI"]),
                    "fly_date": (datetime.now() + timedelta(days=random.randint(7, 30))).strftime("%d.%m.%Y"),
                    "meal": random.choice(["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", "–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω", "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ"]),
                    "placement": "DBL",
                    "tour_name": f"–¢—É—Ä –≤ {region}",
                    "currency": "RUB",
                    "adults": 2,
                    "children": 0,
                    "generation_strategy": "mock",
                    "hotel_type": hotel_type_display,
                    "picture_link": f"/static/mockup_images/hotel_{hotel_type_key}_{i+1}.jpg",
                    "search_source": "mock_generation",
                    "mock_type": hotel_type_key
                }
                
                tours.append(tour_data)
            
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type_display}: {e}")
            return []
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async def force_update_now(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å (–¥–ª—è API)"""
        logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        try:
            await self._run_update_cycle()
            return {
                "success": True,
                "message": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "stats": self.update_stats
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"
            }
    
    async def get_update_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è API)"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à–∞
            cached_stats = await cache_service.get("random_tours_cache_update_stats")
            
            if cached_stats:
                # –î–æ–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                status = {
                    "is_running": self.is_running,
                    "last_update": cached_stats.get("end_time"),
                    "next_update": None,
                    "current_hotel_type": self.current_hotel_type,
                    "update_stats": cached_stats,
                    "hotel_types_supported": list(self.hotel_types_mapping.keys()),
                    "api_integration": {
                        "uses_hoteltypes_filter": True,
                        "supported_api_params": [info["api_param"] for info in self.hotel_types_mapping.values() if info["api_param"]]
                    }
                }
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if self.last_update:
                    next_update = self.last_update + timedelta(seconds=self.update_interval)
                    status["next_update"] = next_update
                    status["time_until_next_update_hours"] = max(0, (next_update - datetime.now()).total_seconds() / 3600)
                
                return status
            else:
                return {
                    "is_running": self.is_running,
                    "last_update": self.last_update,
                    "next_update": None,
                    "current_hotel_type": self.current_hotel_type,
                    "update_stats": None,
                    "message": "–ï—â–µ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
                    "hotel_types_supported": list(self.hotel_types_mapping.keys())
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "error": str(e),
                "is_running": self.is_running
            }
    
    async def clear_all_cache(self) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        try:
            logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
            
            hotel_types = list(self.hotel_types_mapping.keys())
            cleared_count = 0
            
            for hotel_type_key in hotel_types:
                cache_key_suffix = self.hotel_types_mapping[hotel_type_key]["cache_key"]
                cache_key = f"random_tours_{cache_key_suffix.replace(' ', '_')}"
                try:
                    await cache_service.delete(cache_key)
                    cleared_count += 1
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á {cache_key}: {e}")
            
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –æ–±—â–∏–π –∫—ç—à —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
            general_keys = ["random_tours", "random_tours_stats", "random_tours_cache_update_stats"]
            for key in general_keys:
                try:
                    await cache_service.delete(key)
                    cleared_count += 1
                except:
                    pass
            
            return {
                "success": True,
                "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∫–ª—é—á–µ–π –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
                "cleared_keys": cleared_count,
                "cleared_hotel_types": hotel_types
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def get_cache_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        try:
            hotel_types = list(self.hotel_types_mapping.keys())
            cached_types = 0
            total_tours = 0
            
            cache_details = {}
            
            for hotel_type_key in hotel_types:
                hotel_type_info = self.hotel_types_mapping[hotel_type_key]
                display_name = hotel_type_info["display_name"]
                cache_key_suffix = hotel_type_info["cache_key"]
                cache_key = f"random_tours_{cache_key_suffix.replace(' ', '_')}"
                
                try:
                    cached_tours = await cache_service.get(cache_key)
                    if cached_tours:
                        cached_types += 1
                        total_tours += len(cached_tours)
                        
                        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
                        real_tours = len([t for t in cached_tours if t.get("generation_strategy") in ["search", "hot_tours"]])
                        
                        cache_details[display_name] = {
                            "cached": True,
                            "tours_count": len(cached_tours),
                            "real_tours": real_tours,
                            "quality": f"{(real_tours/len(cached_tours)*100):.1f}%" if cached_tours else "0%",
                            "api_param": hotel_type_info["api_param"],
                            "cache_key": cache_key
                        }
                    else:
                        cache_details[display_name] = {
                            "cached": False,
                            "tours_count": 0,
                            "api_param": hotel_type_info["api_param"],
                            "cache_key": cache_key
                        }
                except Exception as e:
                    cache_details[display_name] = {
                        "cached": False,
                        "error": str(e),
                        "api_param": hotel_type_info["api_param"]
                    }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
            coverage = (cached_types / len(hotel_types)) * 100
            
            if coverage >= 80:
                health_status = "good"
            elif coverage >= 50:
                health_status = "warning"
            else:
                health_status = "poor"
            
            return {
                "health_status": health_status,
                "coverage_percentage": f"{coverage:.1f}%",
                "cached_hotel_types": cached_types,
                "total_hotel_types": len(hotel_types),
                "total_tours_cached": total_tours,
                "cache_details": cache_details,
                "api_integration": {
                    "hoteltypes_filter_enabled": True,
                    "supported_api_filters": [info["api_param"] for info in self.hotel_types_mapping.values() if info["api_param"]]
                },
                "recommendations": [
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /api/v1/random-tours/cache/force-update" if coverage < 80 else None,
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: GET /api/v1/random-tours/cache/status" if not self.is_running else None
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "health_status": "error",
                "error": str(e)
            }
    
    def get_supported_hotel_types(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π"""
        return {
            "hotel_types": {
                key: {
                    "display_name": info["display_name"],
                    "api_param": info["api_param"],
                    "cache_key": info["cache_key"]
                }
                for key, info in self.hotel_types_mapping.items()
            },
            "api_integration": {
                "tourvisor_hoteltypes_field": "hoteltypes",
                "supported_values": [info["api_param"] for info in self.hotel_types_mapping.values() if info["api_param"]],
                "documentation": "https://tourvisor.ru/xml/ - –ø–æ–ª–µ hoteltypes –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
            }
        }

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
random_tours_cache_update_service = RandomToursCacheUpdateService()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def start_random_tours_cache_update_task():
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –≤ —Ñ–æ–Ω–µ"""
    logger.info("üé≤ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
    await random_tours_cache_update_service.start_scheduler()

async def stop_random_tours_cache_update_task():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    await random_tours_cache_update_service.stop_scheduler()