import smtplib
import asyncio
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import Optional
from concurrent.futures import ThreadPoolExecutor
import html

from app.config import settings
from app.models.application import Application
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class EmailService:
    def __init__(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Gmail –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.smtp_host = os.getenv("SMTP_HOST", "smtp.gmail.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.smtp_username = os.getenv("SMTP_USERNAME", "advice.notifications@gmail.com")
        self.smtp_password = os.getenv("SMTP_PASSWORD", "tven oyop yxgf tltf")
        self.email_from = os.getenv("EMAIL_FROM", "advice.notifications@gmail.com")
        self.email_to = os.getenv("EMAIL_TO", "temi4174@mail.ru")
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        self.smtp_password = self.smtp_password.strip().strip("'\"").replace(" ", "")
        self.smtp_username = self.smtp_username.strip().strip("'\"")
        self.email_from = self.email_from.strip().strip("'\"")
        
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"üîß EMAIL SERVICE INIT:")
        logger.info(f"  SMTP_HOST: {self.smtp_host}")
        logger.info(f"  SMTP_PORT: {self.smtp_port}")
        logger.info(f"  SMTP_USERNAME: {self.smtp_username}")
        logger.info(f"  SMTP_PASSWORD: {'*' * len(self.smtp_password)} (len={len(self.smtp_password)})")
        logger.info(f"  EMAIL_FROM: {self.email_from}")
        logger.info(f"  EMAIL_TO: {self.email_to}")

    def _create_application_email(self, application: Application) -> MIMEMultipart:
        """–°–æ–∑–¥–∞–Ω–∏–µ email —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ"""
        msg = MIMEMultipart('alternative')
        msg['From'] = self.email_from
        msg['To'] = self.email_to
        msg['Subject'] = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {application.type} - {application.name}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        text_body = f"""
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞

–¢–∏–ø –∑–∞—è–≤–∫–∏: {application.type}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {application.created_at.strftime('%d.%m.%Y %H:%M:%S')}

=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï ===
–ò–º—è: {application.name}
–¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}
Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ë–ª–∏–∂–∞–π—à–∏–π –æ—Ñ–∏—Å: {application.nearest_office or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: {application.communication_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
{application.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
ID –∑–∞—è–≤–∫–∏: {application.id}
–°—Ç–∞—Ç—É—Å: {application.status}

---
–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
"""
        
        # –°–æ–∑–¥–∞–µ–º HTML-–≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞
        html_body = self._create_html_body(application)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ –≤ –ø–∏—Å—å–º–æ
        text_part = MIMEText(text_body, 'plain', 'utf-8')
        html_part = MIMEText(html_body, 'html', 'utf-8')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        return msg
    
    def _create_html_body(self, application: Application) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML-–≤–µ—Ä—Å–∏–∏ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π custom body"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        html_template = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }}
        .header {{
            background-color: #007bff;
            color: white;
            padding: 20px;
            border-radius: 8px 8px 0 0;
            text-align: center;
        }}
        .content {{
            background-color: #f8f9fa;
            padding: 20px;
            border: 1px solid #dee2e6;
        }}
        .section {{
            margin-bottom: 20px;
            padding: 15px;
            background-color: white;
            border-radius: 5px;
            border-left: 4px solid #007bff;
        }}
        .section h3 {{
            margin-top: 0;
            color: #007bff;
        }}
        .info-row {{
            margin-bottom: 10px;
        }}
        .info-row strong {{
            color: #495057;
        }}
        .custom-body {{
            margin-top: 20px;
            padding: 15px;
            background-color: #fff;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }}
        .footer {{
            background-color: #6c757d;
            color: white;
            padding: 15px;
            text-align: center;
            border-radius: 0 0 8px 8px;
            font-size: 12px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h1>
        <p>–¢–∏–ø –∑–∞—è–≤–∫–∏: <strong>{application.type}</strong></p>
        <p>–î–∞—Ç–∞: {application.created_at.strftime('%d.%m.%Y %H:%M:%S')}</p>
    </div>
    
    <div class="content">
        <div class="section">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h3>
            <div class="info-row"><strong>–ò–º—è:</strong> {html.escape(application.name)}</div>
            <div class="info-row"><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {html.escape(application.phone)}</div>
            <div class="info-row"><strong>Email:</strong> {html.escape(application.email or '–ù–µ —É–∫–∞–∑–∞–Ω')}</div>
            <div class="info-row"><strong>–ë–ª–∏–∂–∞–π—à–∏–π –æ—Ñ–∏—Å:</strong> {html.escape(application.nearest_office or '–ù–µ —É–∫–∞–∑–∞–Ω')}</div>
            <div class="info-row"><strong>–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:</strong> {html.escape(application.communication_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</div>
        </div>
        
        {self._render_description_section(application)}
        
        {self._render_custom_body_section(application)}
        
        <div class="section">
            <h3>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div class="info-row"><strong>ID –∑–∞—è–≤–∫–∏:</strong> {application.id}</div>
            <div class="info-row"><strong>–°—Ç–∞—Ç—É—Å:</strong> {application.status}</div>
        </div>
    </div>
    
    <div class="footer">
        –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
    </div>
</body>
</html>
"""
        return html_template
    
    def _render_description_section(self, application: Application) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ–∫—Ü–∏—é —Å –æ–±—ã—á–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        if not application.description:
            return ""
        
        return f"""
        <div class="section">
            <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div>{html.escape(application.description)}</div>
        </div>
        """
    
    def _render_custom_body_section(self, application: Application) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ–∫—Ü–∏—é —Å custom HTML body"""
        if not application.body:
            return ""
        
        # –í–∞–∂–Ω–æ: –ú—ã –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –≤ body, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π HTML
        # –ù–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        sanitized_body = self._sanitize_html(application.body)
        
        return f"""
        <div class="section">
            <h3>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h3>
            <div class="custom-body">
                {sanitized_body}
            </div>
        </div>
        """
    
    def _sanitize_html(self, html_content: str) -> str:
        """–ë–∞–∑–æ–≤–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è - —É–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏
        dangerous_tags = ['<script', '<iframe', '<object', '<embed', '<form']
        
        sanitized = html_content
        for tag in dangerous_tags:
            sanitized = sanitized.replace(tag, f'&lt;{tag[1:]}')
            sanitized = sanitized.replace(tag.upper(), f'&lt;{tag[1:].upper()}')
        
        return sanitized
    
    def _send_email_sync(self, msg: MIMEMultipart) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email"""
        try:
            logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:")
            logger.info(f"  Host: {self.smtp_host}:{self.smtp_port}")
            logger.info(f"  Login: {self.smtp_username}")
            logger.info(f"  Password length: {len(self.smtp_password)}")
            logger.info(f"  From: {self.email_from}")
            logger.info(f"  To: {self.email_to}")
            
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                
                text = msg.as_string()
                server.sendmail(self.email_from, self.email_to, text)
            
            logger.info("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            logger.error(f"üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏: host={self.smtp_host}, port={self.smtp_port}")
            logger.error(f"üîç Username: {self.smtp_username}")
            logger.error(f"üîç Password: {self.smtp_password[:4]}...{self.smtp_password[-4:]} (len={len(self.smtp_password)})")
            return False
    
    async def send_application_email(self, application: Application) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∑–∞—è–≤–∫–æ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            msg = self._create_application_email(application)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ thread pool —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor, 
                self._send_email_sync, 
                msg
            )
            
            if result:
                logger.info(f"‚úÖ Email —Å –∑–∞—è–≤–∫–æ–π {application.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –∑–∞—è–≤–∫–æ–π {application.id}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —Å –∑–∞—è–≤–∫–æ–π {application.id}: {e}")
            return False
    
    def _send_notification_sync(self, subject: str, body: str, to_email: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML –∫–∞–∫ –µ—Å—Ç—å"""
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {subject}")
            logger.info(f"üìß –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {to_email}")
            logger.info(f"üìù HTML –¥–ª–∏–Ω–∞: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            msg = MIMEMultipart('alternative')
            msg['From'] = self.email_from
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è fallback)
            import re
            text_body = re.sub('<[^<]+?>', '', body)
            text_body = text_body.replace('&nbsp;', ' ').strip()
            
            # HTML –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º body –∫–∞–∫ –µ—Å—Ç—å, –ë–ï–ó –æ–±–µ—Ä—Ç–æ–∫
            html_body = body  # –í–æ—Ç –∏ –≤—Å—ë! –ù–∏–∫–∞–∫–∏—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏
            text_part = MIMEText(text_body, 'plain', 'utf-8')
            html_part = MIMEText(html_body, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                
                text = msg.as_string()
                server.sendmail(self.email_from, to_email, text)
            
            logger.info("‚úÖ HTML email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {str(e)}")
            return False

    def _fix_html_tags(self, html_content: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ HTML"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ–≥–∏
            html_content = html_content.replace('<ui>', '<ul>')
            html_content = html_content.replace('</ui>', '</ul>')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ <br/> –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–æ–≤
            html_content = html_content.replace('<ul><br/>', '<ul>')
            html_content = html_content.replace('<br/></ul>', '</ul>')
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–≤
            import re
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: —Å–ø–∏—Å–æ–∫ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è
            if '<ul>' in html_content and html_content.count('<ul>') > html_content.count('</ul>'):
                html_content += '</ul>' * (html_content.count('<ul>') - html_content.count('</ul>'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not html_content.strip().startswith('<'):
                html_content = f'<div>{html_content}</div>'
            
            # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
            html_content = re.sub(r'\s+', ' ', html_content)
            
            logger.info(f"HTML –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return html_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ HTML: {e}")
            return html_content
    async def send_notification_email(self, subject: str, body: str, to_email: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            target_email = to_email or self.email_to
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ thread pool
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._send_notification_sync,
                subject,
                body,
                target_email
            )
            
            if result:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{subject}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{subject}'")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{subject}': {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
email_service = EmailService()