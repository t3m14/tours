import asyncio
from typing import List

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.services.random_tours_service import random_tours_service
from app.config import settings
from app.models.tour import HotTourInfo, RandomTourRequest
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class RandomToursUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
    
    def __init__(self):
        self.countries = settings.POPULAR_COUNTRIES.copy()
        self.cities = settings.DEPARTURE_CITIES.copy()
        self.target_count = settings.RANDOM_TOURS_COUNT
    
    async def update_random_tours(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        logger.info("üîÑ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±)
            hot_tours_result = await self._try_hot_tours_method()
            
            if hot_tours_result and len(hot_tours_result) >= self.target_count:
                logger.info(f"üî• –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(hot_tours_result)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã")
                await self._save_tours_to_cache(hot_tours_result)
                return
            
            # –ï—Å–ª–∏ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            logger.info("üîç –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
            search_result = await self._try_search_method()
            
            if search_result and len(search_result) > 0:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(search_result)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
                await self._save_tours_to_cache(search_result)
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
                await self._create_fallback_mock_data()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º mock-–¥–∞–Ω–Ω—ã–µ
            await self._create_fallback_mock_data()
    
    async def _try_hot_tours_method(self) -> List[HotTourInfo]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã"""
        try:
            logger.info("üî• –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã")
            
            all_hot_tours = []
            
            for city in self.cities:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                    hot_tours_data = await tourvisor_client.get_hot_tours(
                        city=city,
                        items=10
                    )
                    
                    tours_list = hot_tours_data.get("hottours", [])
                    if not isinstance(tours_list, list):
                        tours_list = [tours_list] if tours_list else []
                    
                    logger.info(f"üî• –ì–æ—Ä–æ–¥ {city}: –Ω–∞–π–¥–µ–Ω–æ {len(tours_list)} –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HotTourInfo –æ–±—ä–µ–∫—Ç—ã
                    for tour_data in tours_list:
                        try:
                            tour = HotTourInfo(**tour_data)
                            all_hot_tours.append(tour)
                        except Exception as tour_error:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Ç—É—Ä–∞: {tour_error}")
                            continue
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as city_error:
                    logger.warning(f"üî• –û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {city_error}")
                    continue
            
            if not all_hot_tours:
                logger.info("‚ÑπÔ∏è –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            import random
            random.shuffle(all_hot_tours)
            selected_tours = all_hot_tours[:self.target_count]
            
            logger.info(f"üî• –û—Ç–æ–±—Ä–∞–Ω–æ {len(selected_tours)} –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤")
            return selected_tours
            
        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: {e}")
            return []
    
    async def _try_search_method(self) -> List[HotTourInfo]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
        try:
            logger.info("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π RandomToursService
            request = RandomTourRequest(count=self.target_count)
            result = await random_tours_service._generate_random_tours_via_search(request.count)
            
            if result:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
                return result
            else:
                logger.warning("üîç –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []
                
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤: {e}")
            return []
    
    async def _save_tours_to_cache(self, tours: List[HotTourInfo]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –≤ –∫—ç—à"""
        try:
            tours_data = [tour.dict() for tour in tours]
            
            await cache_service.set(
                "random_tours_from_search",
                tours_data,
                ttl=settings.POPULAR_TOURS_CACHE_TTL
            )
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤ –≤ –∫—ç—à")
            
        except Exception as e:
            logger.error(f"üíæ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à: {e}")
    
    async def _create_fallback_mock_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            logger.info("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-–¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            countries_data = await tourvisor_client.get_references("country")
            departures_data = await tourvisor_client.get_references("departure")
            
            countries_list = countries_data.get("lists", {}).get("countries", {}).get("country", [])
            departures_list = departures_data.get("lists", {}).get("departures", {}).get("departure", [])
            
            # –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not countries_list:
                countries_list = [
                    {"id": "1", "name": "–ï–≥–∏–ø–µ—Ç"},
                    {"id": "4", "name": "–¢—É—Ä—Ü–∏—è"},
                    {"id": "22", "name": "–¢–∞–∏–ª–∞–Ω–¥"}
                ]
            
            if not departures_list:
                departures_list = [
                    {"id": "1", "name": "–ú–æ—Å–∫–≤–∞", "namefrom": "–ú–æ—Å–∫–≤—ã"},
                    {"id": "2", "name": "–ü–µ—Ä–º—å", "namefrom": "–ü–µ—Ä–º–∏"},
                    {"id": "3", "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "namefrom": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"}
                ]
            
            mock_tours = []
            popular_countries = ["–ï–≥–∏–ø–µ—Ç", "–¢—É—Ä—Ü–∏—è", "–¢–∞–∏–ª–∞–Ω–¥", "–û–ê–≠", "–ì—Ä–µ—Ü–∏—è", "–ö–∏–ø—Ä"]
            
            for i in range(self.target_count):
                # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                country_name = popular_countries[i % len(popular_countries)]
                
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
                country_code = None
                for country in countries_list:
                    if country.get("name") == country_name:
                        country_code = country.get("id")
                        break
                
                city_data = departures_list[i % len(departures_list)] if departures_list else {}
                
                import random
                base_price = 40000 + (i * 15000) + random.randint(-8000, 20000)
                
                mock_tour_data = {
                    "countrycode": country_code or str(i + 1),
                    "countryname": country_name,
                    "departurecode": city_data.get("id", str((i % 3) + 1)),
                    "departurename": city_data.get("name", f"–ì–æ—Ä–æ–¥ {i+1}"),
                    "departurenamefrom": city_data.get("namefrom", f"–ì–æ—Ä–æ–¥–∞ {i+1}"),
                    "operatorcode": str(10 + i),
                    "operatorname": f"TourOperator {i+1}",
                    "hotelcode": str(200 + i),
                    "hotelname": f"RESORT {country_name.upper()} {i+1}",
                    "hotelstars": 3 + (i % 3),
                    "hotelregioncode": str(100 + i),
                    "hotelregionname": f"–ö—É—Ä–æ—Ä—Ç {country_name}",
                    "hotelpicture": f"https://via.placeholder.com/250x150/{'4a90e2' if i % 2 == 0 else 'e74c3c'}/ffffff?text=Resort+{i+1}",
                    "fulldesclink": f"https://example.com/hotel/{200+i}",
                    "flydate": f"{15 + i}.07.2025",
                    "nights": 7 + (i % 7),
                    "meal": ["All Inclusive", "Ultra All Inclusive", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω"][i % 3],
                    "price": float(base_price),
                    "priceold": float(base_price + random.randint(5000, 12000)),
                    "currency": "RUB"
                }
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç HotTourInfo
                try:
                    mock_tour = HotTourInfo(**mock_tour_data)
                    mock_tours.append(mock_tour)
                except Exception as tour_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mock —Ç—É—Ä–∞: {tour_error}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mock-–¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            await self._save_tours_to_cache(mock_tours)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {len(mock_tours)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-—Ç—É—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def update_random_tours():
    """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    service = RandomToursUpdateService()
    
    # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await service.update_random_tours()
    
    while True:
        try:
            logger.info("üò¥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–æ–≤ (24 —á–∞—Å–∞)")
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (24 —á–∞—Å–∞)
            await asyncio.sleep(86400)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã
            await service.update_random_tours()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(3600)