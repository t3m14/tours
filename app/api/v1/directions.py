# app/api/v1/directions.py
from fastapi import APIRouter, HTTPException, Query
from typing import List, Dict, Any, Optional
from app.services.directions_service import directions_service
from app.services.cache_service import cache_service  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

@router.get("/countries/list")
async def get_supported_countries():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω —Å –∏—Ö ID
    """
    countries = []
    for name, info in directions_service.COUNTRIES_MAPPING.items():
        if info["country_id"] is not None:  # –¢–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ ID
            countries.append({
                "country_name": name,
                "country_id": info["country_id"]
            })
    
    return {
        "countries": countries,
        "total": len(countries)
    }

@router.get("/debug/regions/{country_id}")
async def debug_regions_for_country(country_id: int):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    """
    try:
        logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
        from app.core.tourvisor_client import tourvisor_client
        
        regions_data = await tourvisor_client.get_references("region", regcountry=country_id)
        
        return {
            "country_id": country_id,
            "raw_response": regions_data,
            "regions_count": len(regions_data.get("lists", {}).get("regions", {}).get("region", []))
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
        return {
            "error": str(e),
            "country_id": country_id,
            "status": "error"
        }

@router.get("/country/{country_id}")
async def get_directions_by_country_id(country_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
    
    Args:
        country_id: ID —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4 –¥–ª—è –¢—É—Ä—Ü–∏–∏, 1 –¥–ª—è –ï–≥–∏–ø—Ç–∞)
        
    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ –∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        logger.info(f"üéØ API –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(status_code=404, detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        directions = await directions_service.get_directions_by_country(country_name)
        
        return {
            "country_name": country_name,
            "country_id": country_id,
            "total_directions": len(directions),
            "directions": directions
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id {country_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.get("/country/{country_id}/flat")
async def get_directions_flat_by_id(country_id: int) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ ID —Å—Ç—Ä–∞–Ω—ã (–∫–∞–∫ –≤ –¢–ó)
    
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    {
        country_name: "–¢—É—Ä—Ü–∏—è",
        country_id: 4,
        city_name: "–ê–Ω—Ç–∞–ª—å—è", 
        min_price: 45000
    }
    
    Args:
        country_id: ID —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4 –¥–ª—è –¢—É—Ä—Ü–∏–∏)
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –ø–æ–ª—è–º–∏ country_name, country_id, city_name, min_price
    """
    try:
        logger.info(f"üìã API –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(status_code=404, detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        directions = await directions_service.get_directions_by_country(country_name)
        
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏")
        return directions
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è country_id {country_id}: {e}")
@router.get("/country/{country_id}/quick")
async def get_directions_quick(country_id: int) -> List[Dict[str, Any]]:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    
    Args:
        country_id: ID —Å—Ç—Ä–∞–Ω—ã 
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ min_price
    """
    try:
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(status_code=404, detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
        cities = await directions_service._get_top_cities_for_country(country_id, limit=12)
        
        result = []
        for city in cities:
            city_name = city.get("name", "")
            if city_name:
                direction_item = {
                    "country_name": country_name,
                    "country_id": country_id,
                    "city_name": city_name,
                    "min_price": None  # –ë–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
                }
                result.append(direction_item)
        
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è country_id {country_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
async def get_directions_with_filter(
    country_id: Optional[int] = Query(None, description="ID —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"),
    limit: Optional[int] = Query(None, ge=1, le=100, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ country_id (–∫–∞–∫ –≤ –¢–ó)
    """
    try:
        logger.info(f"üîç API —Ñ–∏–ª—å—Ç—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: country_id={country_id}, limit={limit}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        all_directions = await directions_service.get_all_directions()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ country_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if country_id is not None:
            all_directions = [d for d in all_directions if d["country_id"] == country_id]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if limit is not None:
            all_directions = all_directions[:limit]
        
        return {
            "filter_applied": {
                "country_id": country_id,
                "limit": limit
            },
            "total_results": len(all_directions),
            "directions": all_directions
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.get("/test/{country_id}")
async def test_country_directions_by_id(country_id: int):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π –ø–æ ID
    """
    try:
        logger.info(f"üß™ –¢–µ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è country_id: {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            return {
                "error": f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "available_countries": {
                    name: info["country_id"] 
                    for name, info in directions_service.COUNTRIES_MAPPING.items() 
                    if info["country_id"] is not None
                }
            }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        directions = await directions_service.get_directions_by_country(country_name)
        
        return {
            "success": True,
            "country_name": country_name,
            "country_id": country_id,
            "directions_count": len(directions),
            "sample_directions": directions[:3] if directions else [],
            "status": "ok"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è country_id {country_id}: {e}")
        return {
            "error": str(e),
            "country_id": country_id,
            "status": "error"
        }
# –î–æ–±–∞–≤–∏—Ç—å –≤ app/api/v1/directions.py

@router.delete("/cache/clear")
async def clear_directions_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.info("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫—ç—à–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        cache_patterns = [
            "directions_with_prices_country_*",  # –ö—ç—à —Å —Ü–µ–Ω–∞–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            "directions_country_*",              # –û–±—ã—á–Ω—ã–π –∫—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            "top_cities_country_*",              # –ö—ç—à –≥–æ—Ä–æ–¥–æ–≤
            "regions_*",                         # –ö—ç—à —Ä–µ–≥–∏–æ–Ω–æ–≤
        ]
        
        total_deleted = 0
        deleted_by_pattern = {}
        
        for pattern in cache_patterns:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                keys = await cache_service.get_keys_pattern(pattern)
                
                if keys:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
                    for key in keys:
                        await cache_service.delete(key)
                    
                    deleted_by_pattern[pattern] = len(keys)
                    total_deleted += len(keys)
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                else:
                    deleted_by_pattern[pattern] = 0
                    logger.info(f"üîç –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}: {e}")
                deleted_by_pattern[pattern] = f"error: {str(e)}"
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {total_deleted} –∫–ª—é—á–µ–π –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        return {
            "success": True,
            "message": f"–ö—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "total_deleted": total_deleted,
            "details": deleted_by_pattern,
            "next_actions": [
                "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ /directions –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "–ö—ç—à –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}"
        )

@router.get("/cache/status")
async def get_cache_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    try:
        logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        cache_patterns = [
            "directions_with_prices_country_*",
            "directions_country_*", 
            "top_cities_country_*",
            "regions_*"
        ]
        
        cache_status = {}
        total_keys = 0
        
        for pattern in cache_patterns:
            try:
                keys = await cache_service.get_keys_pattern(pattern)
                
                if keys:
                    pattern_info = {
                        "count": len(keys),
                        "keys": keys[:10],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
                        "has_more": len(keys) > 10
                    }
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å TTL –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
                    if keys:
                        try:
                            ttl = await cache_service.get_ttl(keys[0])
                            if ttl:
                                pattern_info["example_ttl_seconds"] = ttl
                        except:
                            pass
                else:
                    pattern_info = {
                        "count": 0,
                        "keys": [],
                        "has_more": False
                    }
                
                cache_status[pattern] = pattern_info
                total_keys += pattern_info["count"]
                
            except Exception as e:
                cache_status[pattern] = {
                    "error": str(e),
                    "count": 0
                }
        
        return {
            "total_cached_keys": total_keys,
            "cache_patterns": cache_status,
            "recommendations": {
                "clear_cache": "POST /api/v1/directions/cache/clear",
                "force_refresh": "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ?force_refresh=true –∫ –ª—é–±–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {str(e)}"
        )

@router.post("/refresh/{country_id}")
async def force_refresh_country_directions(country_id: int):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    
    –û—á–∏—â–∞–µ—Ç –∫—ç—à –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã.
    """
    try:
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        country_name = None
        for name, info in directions_service.COUNTRIES_MAPPING.items():
            if info["country_id"] == country_id:
                country_name = name
                break
        
        if not country_name:
            raise HTTPException(
                status_code=404, 
                detail=f"–°—Ç—Ä–∞–Ω–∞ —Å ID {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
        cache_key = f"directions_with_prices_country_{country_id}"
        await cache_service.delete(cache_key)
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        directions = await directions_service.get_directions_by_country(country_name)
        
        return {
            "success": True,
            "country_name": country_name,
            "country_id": country_id,
            "directions_count": len(directions),
            "message": f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è {country_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "directions": directions[:3]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
        )