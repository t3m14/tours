import aiohttp
import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import xml.etree.ElementTree as ET
import json

from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class TourVisorClient:
    def __init__(self):
        self.base_url = settings.TOURVISOR_BASE_URL
        self.auth_params = {
            "authlogin": settings.TOURVISOR_AUTH_LOGIN,
            "authpass": settings.TOURVISOR_AUTH_PASS
        }
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def get_session(self):
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close(self):
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def _make_request(self, endpoint: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ TourVisor API"""
        session = await self.get_session()
        full_params = {**self.auth_params, **params}
        
        try:
            url = f"{self.base_url}/{endpoint}"
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ TourVisor: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {full_params}")
            
            async with session.get(url, params=full_params) as response:
                response_text = await response.text()
                logger.debug(f"–û—Ç–≤–µ—Ç TourVisor (—Å—Ç–∞—Ç—É—Å {response.status}): {response_text[:500]}...")
                
                response.raise_for_status()
                
                if params.get("format") == "json":
                    try:
                        return await response.json()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, –æ—Ç–≤–µ—Ç: {response_text}")
                        raise
                else:
                    # –ü–∞—Ä—Å–∏–Ω–≥ XML
                    return self._parse_xml(response_text)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ TourVisor {endpoint}: {e}")
            if hasattr(e, 'status') and e.status == 403:
                logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TOURVISOR_AUTH_LOGIN –∏ TOURVISOR_AUTH_PASS")
            raise
    
    def _parse_xml(self, xml_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        try:
            root = ET.fromstring(xml_content)
            return self._xml_to_dict(root)
        except ET.ParseError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            raise
    
    def _xml_to_dict(self, element) -> Dict[str, Any]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ XML —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        result = {}
        
        # –ê—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
        if element.attrib:
            result.update(element.attrib)
        
        # –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        children = list(element)
        if children:
            child_dict = {}
            for child in children:
                child_data = self._xml_to_dict(child)
                if child.tag in child_dict:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
                    if not isinstance(child_dict[child.tag], list):
                        child_dict[child.tag] = [child_dict[child.tag]]
                    child_dict[child.tag].append(child_data)
                else:
                    child_dict[child.tag] = child_data
            result.update(child_dict)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if element.text and element.text.strip():
            if children:
                result['text'] = element.text.strip()
            else:
                return element.text.strip()
        
        return result
    
    async def search_tours(self, search_params: Dict[str, Any]) -> str:
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id"""
        params = {
            "format": "xml",
            **search_params
        }
        
        session = await self.get_session()
        full_params = {**self.auth_params, **params}
        
        try:
            url = f"{self.base_url}/search.php"
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {full_params}")
            
            async with session.get(url, params=full_params) as response:
                response_text = await response.text()
                logger.debug(f"–û—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ (—Å—Ç–∞—Ç—É—Å {response.status}): {response_text}")
                
                response.raise_for_status()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º (request_id)
                response_text = response_text.strip()
                if response_text.isdigit():
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω request_id (—á–∏—Å–ª–æ): {response_text}")
                    return response_text
                
                # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å XML
                try:
                    result = self._parse_xml(response_text)
                    logger.debug(f"üìÑ –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML: {result}")
                    
                    # –ò—â–µ–º request_id –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    request_id = None
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ
                    if isinstance(result, dict) and "requestid" in result:
                        request_id = result["requestid"]
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 2: –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞ result
                    elif isinstance(result, dict) and "result" in result:
                        result_data = result["result"]
                        if isinstance(result_data, dict) and "requestid" in result_data:
                            request_id = result_data["requestid"]
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    if not request_id:
                        request_id = self._find_request_id_recursive(result)
                    
                    if request_id:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω request_id –∏–∑ XML: {request_id}")
                        return str(request_id)
                    else:
                        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω request_id –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {result}")
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å request_id –∏–∑ XML")
                        
                except Exception as parse_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {parse_error}, –æ—Ç–≤–µ—Ç: {response_text}")
                    raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {parse_error}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
            raise
    
    def _find_request_id_recursive(self, data) -> Optional[str]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ request_id –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, dict):
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–ª—é—á–∞ requestid
            if "requestid" in data:
                return str(data["requestid"])
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            for value in data.values():
                result = self._find_request_id_recursive(value)
                if result:
                    return result
        
        elif isinstance(data, list):
            # –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ
            for item in data:
                result = self._find_request_id_recursive(item)
                if result:
                    return result
        
        return None
    
    async def get_search_status(self, request_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
        params = {
            "requestid": request_id,
            "type": "status",
            "format": "xml"
        }
        
        return await self._make_request("result.php", params)
    
    async def get_search_results(self, request_id: str, page: int = 1, onpage: int = 25) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        params = {
            "requestid": request_id,
            "type": "result",
            "page": page,
            "onpage": onpage,
            "format": "xml"
        }
        
        return await self._make_request("result.php", params)
    
    async def continue_search(self, request_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        params = {
            "continue": request_id,
            "format": "xml"
        }
        
        return await self._make_request("search.php", params)
    
    async def get_hot_tours(self, city: int, items: int = 10, **filters) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤"""
        params = {
            "city": city,
            "items": items,
            "format": "json",
            **filters
        }
        
        return await self._make_request("hottours.php", params)
    
    async def get_references(self, ref_type: str, **filters) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        params = {
            "type": ref_type,
            "format": "json",
            **filters
        }
        
        return await self._make_request("list.php", params)
    
    async def get_hotel_info(self, hotel_code: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        params = {
            "hotelcode": hotel_code,
            "format": "json",
            "imgbig": 1,
            "reviews": 1
        }
        
        return await self._make_request("hotel.php", params)
    
    async def actualize_tour(self, tour_id: str, request_check: int = 0) -> Dict[str, Any]:
        """–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞"""
        params = {
            "tourid": tour_id,
            "request": request_check,
            "format": "json"
        }
        
        return await self._make_request("actualize.php", params)
    
    async def get_detailed_actualization(self, tour_id: str) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–∞—Ö"""
        params = {
            "tourid": tour_id,
            "format": "json"
        }
        
        return await self._make_request("actdetail.php", params)

# –°–∏–Ω–≥–ª—Ç–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
tourvisor_client = TourVisorClient()