import os
from typing import Dict, Any

class CacheUpdateConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    UPDATE_INTERVAL_HOURS: int = int(os.getenv("CACHE_UPDATE_INTERVAL_HOURS", "24"))
    BATCH_SIZE: int = int(os.getenv("CACHE_UPDATE_BATCH_SIZE", "3"))
    BATCH_PAUSE_SECONDS: int = int(os.getenv("CACHE_UPDATE_BATCH_PAUSE", "30"))
    
    # –¢–∞–π–º–∞—É—Ç—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    SEARCH_TIMEOUT_SECONDS: int = int(os.getenv("CACHE_SEARCH_TIMEOUT", "120"))
    SEARCH_DELAY_SECONDS: float = float(os.getenv("CACHE_SEARCH_DELAY", "1.0"))
    CACHE_TTL_HOURS: int = int(os.getenv("CACHE_TTL_HOURS", "2"))
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    REQUIRE_REAL_PRICES: bool = os.getenv("CACHE_REQUIRE_REAL_PRICES", "false").lower() == "true"
    MIN_SUCCESS_RATE: float = float(os.getenv("CACHE_MIN_SUCCESS_RATE", "80.0"))
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    ENABLE_NOTIFICATIONS: bool = os.getenv("CACHE_ENABLE_NOTIFICATIONS", "false").lower() == "true"
    NOTIFICATION_EMAIL: str = os.getenv("CACHE_NOTIFICATION_EMAIL", "")
    NOTIFICATION_WEBHOOK: str = os.getenv("CACHE_NOTIFICATION_WEBHOOK", "")
    
    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    AUTO_START: bool = os.getenv("CACHE_AUTO_START", "true").lower() == "true"
    RETRY_FAILED_COUNTRIES: bool = os.getenv("CACHE_RETRY_FAILED", "true").lower() == "true"
    
    @classmethod
    def get_all_settings(cls) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return {
            "update_interval_hours": cls.UPDATE_INTERVAL_HOURS,
            "batch_size": cls.BATCH_SIZE,
            "batch_pause_seconds": cls.BATCH_PAUSE_SECONDS,
            "search_timeout_seconds": cls.SEARCH_TIMEOUT_SECONDS,
            "search_delay_seconds": cls.SEARCH_DELAY_SECONDS,
            "cache_ttl_hours": cls.CACHE_TTL_HOURS,
            "require_real_prices": cls.REQUIRE_REAL_PRICES,
            "min_success_rate": cls.MIN_SUCCESS_RATE,
            "enable_notifications": cls.ENABLE_NOTIFICATIONS,
            "auto_start": cls.AUTO_START,
            "retry_failed_countries": cls.RETRY_FAILED_COUNTRIES
        }

# app/tasks/directions_cache_update.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import traceback

from app.services.directions_service import directions_service
from app.services.cache_service import cache_service
from app.config.cache_update import CacheUpdateConfig
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class DirectionsCacheUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = CacheUpdateConfig()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.update_interval = self.config.UPDATE_INTERVAL_HOURS * 3600  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.countries_batch_size = self.config.BATCH_SIZE
        self.batch_pause = self.config.BATCH_PAUSE_SECONDS
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.last_update = None
        self.update_stats = {}
        self.current_batch = None
        self.current_country = None
        
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {self.config.UPDATE_INTERVAL_HOURS}—á, "
                   f"–±–∞—Ç—á {self.config.BATCH_SIZE} —Å—Ç—Ä–∞–Ω, –ø–∞—É–∑–∞ {self.config.BATCH_PAUSE_SECONDS}—Å")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logger.info(f"üïí –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.config.UPDATE_INTERVAL_HOURS}—á)")
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        if self.config.AUTO_START:
            logger.info("üöÄ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á–µ–Ω - –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            try:
                await self._run_update_cycle()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–µ: {e}")
        
        while self.is_running:
            try:
                await asyncio.sleep(self.update_interval)
                
                if self.is_running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    await self._run_update_cycle()
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
                logger.error(traceback.format_exc())
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await self._send_error_notification(e)
                
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(3600)
    
    async def _run_update_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        start_time = datetime.now()
        logger.info(f"üîÑ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–≠–®–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô ({start_time.strftime('%Y-%m-%d %H:%M:%S')})")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
            countries_list = list(directions_service.COUNTRIES_MAPPING.items())
            total_countries = len(countries_list)
            
            logger.info(f"üåç –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_countries} —Å—Ç—Ä–∞–Ω (–±–∞—Ç—á–∞–º–∏ –ø–æ {self.countries_batch_size})")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_stats = {
                "start_time": start_time,
                "total_countries": total_countries,
                "processed_countries": 0,
                "successful_countries": 0,
                "failed_countries": 0,
                "total_directions": 0,
                "countries_details": {},
                "config": self.config.get_all_settings()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã –±–∞—Ç—á–∞–º–∏
            for i in range(0, total_countries, self.countries_batch_size):
                batch = countries_list[i:i + self.countries_batch_size]
                batch_num = i//self.countries_batch_size + 1
                total_batches = (total_countries + self.countries_batch_size - 1)//self.countries_batch_size
                
                logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num}/{total_batches} ({len(batch)} —Å—Ç—Ä–∞–Ω)")
                self.current_batch = batch_num
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞
                batch_tasks = []
                for country_name, country_info in batch:
                    task = asyncio.create_task(
                        self._update_country_directions_with_retry(country_name, country_info)
                    )
                    batch_tasks.append((country_name, task))
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
                for country_name, task in batch_tasks:
                    self.current_country = country_name
                    try:
                        result = await task
                        update_stats["processed_countries"] += 1
                        
                        if result["success"]:
                            update_stats["successful_countries"] += 1
                            update_stats["total_directions"] += result["directions_count"]
                        else:
                            update_stats["failed_countries"] += 1
                        
                        update_stats["countries_details"][country_name] = result
                        
                        logger.info(f"‚úÖ {country_name}: {result['directions_count']} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π "
                                  f"({result['execution_time_seconds']:.1f}—Å)")
                        
                    except Exception as e:
                        update_stats["processed_countries"] += 1
                        update_stats["failed_countries"] += 1
                        update_stats["countries_details"][country_name] = {
                            "success": False,
                            "error": str(e),
                            "directions_count": 0,
                            "execution_time_seconds": 0
                        }
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {country_name}: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + self.countries_batch_size < total_countries:
                    logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ ({self.batch_pause} —Å–µ–∫)")
                    await asyncio.sleep(self.batch_pause)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
            end_time = datetime.now()
            execution_time = end_time - start_time
            
            update_stats["end_time"] = end_time
            update_stats["execution_time_seconds"] = execution_time.total_seconds()
            update_stats["success_rate"] = (update_stats["successful_countries"] / total_countries * 100) if total_countries > 0 else 0
            
            self.last_update = end_time
            self.update_stats = update_stats
            self.current_batch = None
            self.current_country = None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—ç—à
            await cache_service.set("directions_cache_update_stats", update_stats, ttl=48*3600)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            success_rate = update_stats["success_rate"]
            if success_rate < self.config.MIN_SUCCESS_RATE:
                logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {success_rate:.1f}% < {self.config.MIN_SUCCESS_RATE}%")
                await self._send_warning_notification(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {success_rate:.1f}%")
            
            logger.info(f"üèÅ –¶–ò–ö–õ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù")
            logger.info(f"üìä –ò—Ç–æ–≥–æ: {update_stats['successful_countries']}/{total_countries} —Å—Ç—Ä–∞–Ω, "
                       f"{update_stats['total_directions']} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, "
                       f"–≤—Ä–µ–º—è: {execution_time.total_seconds():.1f} —Å–µ–∫, "
                       f"—É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await self._send_success_notification(update_stats)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            logger.error(traceback.format_exc())
            await self._send_error_notification(e)
            raise
    
    async def _update_country_directions_with_retry(self, country_name: str, country_info: Dict) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 2 if self.config.RETRY_FAILED_COUNTRIES else 1
        
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {country_name}")
                    await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                
                result = await self._update_country_directions(country_name, country_info)
                
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result["success"]:
                    return result
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –¥–ª—è {country_name}: {result.get('error', 'Unknown error')}")
                    continue
                
                return result
                
            except Exception as e:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è {country_name}: {e}")
                    continue
                else:
                    raise
    
    async def _update_country_directions(self, country_name: str, country_info: Dict) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
        country_id = country_info.get("country_id")
        
        if not country_id:
            return {
                "success": False,
                "error": "–ù–µ—Ç country_id",
                "directions_count": 0,
                "execution_time_seconds": 0
            }
        
        start_time = datetime.now()
        
        try:
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {country_name} (ID: {country_id})")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
            cache_key = f"directions_with_prices_country_{country_id}"
            await cache_service.delete(cache_key)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            directions = await directions_service.get_directions_by_country(country_name)
            
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            with_prices = len([d for d in directions if d.get("min_price")])
            with_images = len([d for d in directions if d.get("image_link")])
            real_prices = len([d for d in directions if d.get("min_price") and not str(d.get("min_price", "")).endswith("000")])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            quality_check_passed = True
            if self.config.REQUIRE_REAL_PRICES and directions:
                real_price_percentage = (real_prices / len(directions)) * 100
                if real_price_percentage < 50:  # –ú–µ–Ω–µ–µ 50% —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
                    quality_check_passed = False
            
            result = {
                "success": quality_check_passed,
                "directions_count": len(directions),
                "execution_time_seconds": execution_time,
                "quality_stats": {
                    "with_prices": with_prices,
                    "with_images": with_images,
                    "real_prices": real_prices,
                    "price_coverage": f"{(with_prices/len(directions)*100):.1f}%" if directions else "0%",
                    "image_coverage": f"{(with_images/len(directions)*100):.1f}%" if directions else "0%",
                    "real_price_coverage": f"{(real_prices/len(directions)*100):.1f}%" if directions else "0%"
                }
            }
            
            if not quality_check_passed:
                result["error"] = f"–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: {real_prices}/{len(directions)})"
            
            return result
            
        except Exception as e:
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {country_name}: {e}")
            
            return {
                "success": False,
                "error": str(e),
                "directions_count": 0,
                "execution_time_seconds": execution_time
            }
    
    async def _send_success_notification(self, stats: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        if not self.config.ENABLE_NOTIFICATIONS:
            return
        
        try:
            message = (f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n"
                      f"üìä {stats['successful_countries']}/{stats['total_countries']} —Å—Ç—Ä–∞–Ω\n"
                      f"üéØ {stats['total_directions']} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
                      f"‚è±Ô∏è {stats['execution_time_seconds']:.1f} —Å–µ–∫—É–Ω–¥\n"
                      f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
            
            await self._send_notification("–ö—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω", message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
    
    async def _send_warning_notification(self, warning: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        if not self.config.ENABLE_NOTIFICATIONS:
            return
        
        try:
            await self._send_notification("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞", f"‚ö†Ô∏è {warning}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
    
    async def _send_error_notification(self, error: Exception):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if not self.config.ENABLE_NOTIFICATIONS:
            return
        
        try:
            message = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {str(error)}"
            await self._send_notification("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞", message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def _send_notification(self, subject: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (email –∏–ª–∏ webhook)"""
        try:
            # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.config.NOTIFICATION_EMAIL:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
                logger.info(f"üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subject}")
            
            # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.config.NOTIFICATION_WEBHOOK:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É webhook
                logger.info(f"üîî Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subject}")
            
            logger.debug(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subject} - {message}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
# (get_update_status, force_update_now –∏ —Ç.–¥.)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
directions_cache_update_service = DirectionsCacheUpdateService()