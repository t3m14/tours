from fastapi import APIRouter, HTTPException, Query
from typing import List, Optional
import asyncio
import random
from datetime import datetime, timedelta

from app.models.tour import (
    TourSearchRequest, SearchResponse, SearchResult, SearchStatus,
    RandomTourRequest, HotTourInfo, DirectionInfo, TourActualizationRequest,
    DetailedTourInfo, HotelInfo
)
from app.services.tour_service import tour_service
from app.services.random_tours_service import random_tours_service
from app.services.directions_service import directions_service
from app.services.photo_service import photo_service
from app.services.price_service import price_service
from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

# ========== –û–°–ù–û–í–ù–´–ï ENDPOINTS –ü–û–ò–°–ö–ê –¢–£–†–û–í ==========

@router.post("/search", response_model=SearchResponse)
async def search_tours(search_request: TourSearchRequest):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    try:
        return await tour_service.search_tours(search_request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/status", response_model=SearchStatus)
async def get_search_status(request_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_status(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/results", response_model=SearchResult)
async def get_search_results(
    request_id: str,
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    onpage: int = Query(25, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_results(request_id, page, onpage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search/{request_id}/continue")
async def continue_search(request_id: str):
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        return await tour_service.continue_search(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –°–õ–£–ß–ê–ô–ù–´–ï –¢–£–†–´ ==========

@router.get("/random", response_model=List[HotTourInfo])
async def get_random_tours_get(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    """
    try:
        request = RandomTourRequest(count=count)
        logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å {request.count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random", response_model=List[HotTourInfo])
async def get_random_tours_post(request: RandomTourRequest = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (POST)
    """
    try:
        if request is None:
            request = RandomTourRequest()
        
        logger.info(f"üéØ POST –∑–∞–ø—Ä–æ—Å {request.count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/generate", response_model=List[HotTourInfo])
async def generate_random_tours(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    """
    try:
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {count} —Ç—É—Ä–æ–≤")
        
        result = await random_tours_service._generate_random_tours_via_search(count)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –° –§–û–¢–û–ì–†–ê–§–ò–Ø–ú–ò ==========

@router.get("/directions", response_model=List[DirectionInfo])
async def get_directions():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π
    """
    try:
        logger.info("üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π")
        result = await directions_service.get_directions_with_prices()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/refresh")
async def refresh_directions():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π
    """
    try:
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        result = await directions_service.refresh_directions()
        
        return {
            "success": True,
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏",
            "directions": [direction.dict() for direction in result]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/status")
async def get_directions_status():
    """
    –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        return await directions_service.get_directions_status()
    except Exception as e:
        return {
            "error": str(e),
            "recommendation": "use_refresh_endpoint"
        }

@router.get("/directions/fix-cache")
async def fix_directions_cache():
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        return await directions_service.fix_cache_issues()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô ==========

@router.get("/directions/test-photo/{country_code}")
async def test_country_photo(country_code: int):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    """
    try:
        country_name = tour_service._get_country_name(country_code)
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è {country_name} ({country_code})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
        results = {}
        
        # 1. –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã
        try:
            hot_tours_photo = await photo_service._get_photo_via_hot_tours(country_code, country_name)
            results["hot_tours"] = {
                "success": bool(hot_tours_photo),
                "photo_url": hot_tours_photo,
                "method": "Hot tours API"
            }
        except Exception as e:
            results["hot_tours"] = {
                "success": False,
                "error": str(e),
                "method": "Hot tours API"
            }
        
        # 2. –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ—Ç–µ–ª–µ–π  
        try:
            reference_photo = await photo_service._get_photo_from_hotels_reference(country_code, country_name)
            results["hotels_reference"] = {
                "success": bool(reference_photo),
                "photo_url": reference_photo,
                "method": "Hotels reference"
            }
        except Exception as e:
            results["hotels_reference"] = {
                "success": False,
                "error": str(e),
                "method": "Hotels reference"
            }
        
        # 3. –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
        try:
            search_photo = await photo_service._get_photo_via_search(country_code, country_name)
            results["tours_search"] = {
                "success": bool(search_photo),
                "photo_url": search_photo,
                "method": "Tours search"
            }
        except Exception as e:
            results["tours_search"] = {
                "success": False,
                "error": str(e),
                "method": "Tours search"
            }
        
        # 4. Fallback
        fallback_photo = photo_service.get_fallback_image(country_code, country_name)
        results["fallback"] = {
            "success": True,
            "photo_url": fallback_photo,
            "method": "Fallback placeholder"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_photo = None
        for method in ["hot_tours", "hotels_reference", "tours_search"]:
            if results[method]["success"] and results[method].get("photo_url"):
                best_photo = results[method]["photo_url"]
                break
        
        if not best_photo:
            best_photo = fallback_photo
        
        return {
            "country_code": country_code,
            "country_name": country_name,
            "best_photo": best_photo,
            "test_results": results,
            "recommendation": "Use the best_photo URL for this country"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/diagnose")
async def diagnose_directions_system():
    """
    –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        logger.info("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        diagnosis = {
            "timestamp": datetime.now().isoformat(),
            "countries": {},
            "summary": {},
            "recommendations": []
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É
        from app.config import settings
        countries_to_test = settings.POPULAR_COUNTRIES[:3]  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω—ã
        
        for country_code in countries_to_test:
            country_name = tour_service._get_country_name(country_code)
            logger.info(f"üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º {country_name} ({country_code})")
            
            country_diagnosis = {
                "country_code": country_code,
                "country_name": country_name,
                "photo_sources": {},
                "price_search": {},
                "issues": [],
                "working_methods": []
            }
            
            # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã
            try:
                hot_tours_start = datetime.now()
                hot_tours_data = await tourvisor_client.get_hot_tours(
                    city=1, items=5, countries=str(country_code)
                )
                hot_tours_time = (datetime.now() - hot_tours_start).total_seconds()
                
                tours_list = hot_tours_data.get("hottours", [])
                if not isinstance(tours_list, list):
                    tours_list = [tours_list] if tours_list else []
                
                photos_found = 0
                for tour in tours_list:
                    if tour.get("hotelpicture") and not photo_service.is_placeholder_image(tour.get("hotelpicture")):
                        photos_found += 1
                
                country_diagnosis["photo_sources"]["hot_tours"] = {
                    "success": True,
                    "response_time": hot_tours_time,
                    "tours_found": len(tours_list),
                    "photos_found": photos_found,
                    "working": photos_found > 0
                }
                
                if photos_found > 0:
                    country_diagnosis["working_methods"].append("hot_tours")
                else:
                    country_diagnosis["issues"].append("No photos in hot tours")
                    
            except Exception as e:
                country_diagnosis["photo_sources"]["hot_tours"] = {
                    "success": False,
                    "error": str(e),
                    "working": False
                }
                country_diagnosis["issues"].append(f"Hot tours error: {str(e)}")
            
            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            try:
                price_start = datetime.now()
                min_price = await price_service.get_country_min_price(country_code, country_name)
                price_time = (datetime.now() - price_start).total_seconds()
                
                country_diagnosis["price_search"] = {
                    "success": True,
                    "response_time": price_time,
                    "min_price": min_price,
                    "working": min_price > 0,
                    "is_default": min_price in price_service.get_default_prices().values()
                }
                
            except Exception as e:
                country_diagnosis["price_search"] = {
                    "success": False,
                    "error": str(e),
                    "working": False
                }
            
            diagnosis["countries"][country_code] = country_diagnosis
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
            await asyncio.sleep(1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_countries = len(diagnosis["countries"])
        working_countries = 0
        photo_issues = 0
        price_issues = 0
        
        for country_data in diagnosis["countries"].values():
            if country_data["working_methods"]:
                working_countries += 1
            if not country_data["working_methods"]:
                photo_issues += 1
            if not country_data["price_search"].get("working", False):
                price_issues += 1
        
        diagnosis["summary"] = {
            "total_countries_tested": total_countries,
            "countries_with_photos": working_countries,
            "countries_with_photo_issues": photo_issues,
            "countries_with_price_issues": price_issues,
            "success_rate": f"{(working_countries/total_countries)*100:.1f}%" if total_countries > 0 else "0%"
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if photo_issues > 0:
            diagnosis["recommendations"].append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API TourVisor")
        if price_issues > 0:
            diagnosis["recommendations"].append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ü–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ç—É—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã")
        if working_countries == total_countries:
            diagnosis["recommendations"].append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        logger.info(f"üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {diagnosis['summary']['success_rate']} —É—Å–ø–µ—Ö–∞")
        return diagnosis
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –¢–£–†–û–í ==========

@router.post("/actualize", response_model=DetailedTourInfo)
async def actualize_tour(request: TourActualizationRequest):
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–π—Å–æ–≤
    """
    try:
        return await tour_service.actualize_tour(request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/tour/{tour_id}", response_model=DetailedTourInfo)
async def get_tour_by_id(tour_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ –ø–æ –µ–≥–æ ID
    """
    try:
        result = await tour_service.search_tour_by_id(tour_id)
        if not result:
            raise HTTPException(status_code=404, detail="–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return result
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search-by-hotel", response_model=List[HotelInfo])
async def search_tours_by_hotel(
    hotel_name: str = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"),
    country_code: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")
):
    """
    –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è
    """
    try:
        return await tour_service.search_tours_by_hotel_name(hotel_name, country_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –æ—Ç–µ–ª—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –°–¢–ê–¢–£–° ==========

@router.get("/test-connection")
async def test_tourvisor_connection():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API
    """
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        result = await tourvisor_client.get_references("departure")
        
        if result:
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TourVisor API —É—Å–ø–µ—à–Ω–æ",
                "data_keys": list(result.keys()),
                "sample_data": str(result)[:200] + "..." if len(str(result)) > 200 else str(result)
            }
        else:
            return {
                "success": False,
                "message": "TourVisor API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TourVisor API: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        }

@router.get("/status")
async def get_system_status():
    """
    –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ç—É—Ä–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        status = {
            "timestamp": datetime.now().isoformat(),
            "components": {},
            "overall_health": "unknown"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TourVisor API
        try:
            test_result = await tourvisor_client.get_references("departure")
            status["components"]["tourvisor_api"] = {
                "status": "healthy" if test_result else "degraded",
                "response_time": "< 1s"
            }
        except Exception as e:
            status["components"]["tourvisor_api"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        try:
            test_key = "health_check_test"
            await tour_service.cache.set(test_key, "test", ttl=60)
            test_value = await tour_service.cache.get(test_key)
            await tour_service.cache.delete(test_key)
            
            status["components"]["cache"] = {
                "status": "healthy" if test_value == "test" else "degraded"
            }
        except Exception as e:
            status["components"]["cache"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        all_statuses = [comp["status"] for comp in status["components"].values()]
        if all(s == "healthy" for s in all_statuses):
            status["overall_health"] = "healthy"
        elif any(s == "unhealthy" for s in all_statuses):
            status["overall_health"] = "unhealthy"
        else:
            status["overall_health"] = "degraded"
        
        return status
        
    except Exception as e:
        return {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "unhealthy",
            "error": str(e)
        }