from fastapi import APIRouter, HTTPException, Query
from typing import List, Optional
import asyncio
import random
from datetime import datetime, timedelta

from app.models.tour import (
    TourSearchRequest, SearchResponse, SearchResult, SearchStatus,
    RandomTourRequest, HotTourInfo, DirectionInfo, TourActualizationRequest,
    DetailedTourInfo, HotelInfo
)
from app.services.tour_service import tour_service
from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

@router.post("/search", response_model=SearchResponse)
async def search_tours(search_request: TourSearchRequest):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    try:
        return await tour_service.search_tours(search_request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/status", response_model=SearchStatus)
async def get_search_status(request_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_status(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/results", response_model=SearchResult)
async def get_search_results(
    request_id: str,
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    onpage: int = Query(25, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_results(request_id, page, onpage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search/{request_id}/continue")
async def continue_search(request_id: str):
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        return await tour_service.continue_search(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random", response_model=List[HotTourInfo])
async def get_random_tours_get(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤–º–µ—Å—Ç–æ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤
    """
    try:
        request = RandomTourRequest(count=count)
        logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å {request.count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        result = await tour_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random", response_model=List[HotTourInfo])
async def get_random_tours_post(request: RandomTourRequest = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (POST)
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤–º–µ—Å—Ç–æ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤
    """
    try:
        if request is None:
            request = RandomTourRequest()
        
        logger.info(f"üéØ POST –∑–∞–ø—Ä–æ—Å {request.count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        result = await tour_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/generate", response_model=List[HotTourInfo])
async def generate_random_tours(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ (–±–µ–∑ –∫—ç—à–∞)
    """
    try:
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {count} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        result = await tour_service._generate_random_tours_via_search(count)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/mock", response_model=List[HotTourInfo])
async def get_mock_random_tours(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤")
):
    """
    Mock —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback)
    """
    try:
        mock_tours = [
            {
                "countrycode": "1",
                "countryname": "–ï–≥–∏–ø–µ—Ç",
                "departurecode": "1", 
                "departurename": "–ú–æ—Å–∫–≤–∞",
                "departurenamefrom": "–ú–æ—Å–∫–≤—ã",
                "operatorcode": "16",
                "operatorname": "Sunmar",
                "hotelcode": "470",
                "hotelname": "SULTANA BEACH RESORT",
                "hotelstars": 3,
                "hotelregioncode": "5",
                "hotelregionname": "–•—É—Ä–≥–∞–¥–∞",
                "hotelpicture": "https://via.placeholder.com/250x150/4a90e2/ffffff?text=Hotel+1",
                "fulldesclink": "https://example.com/hotel/470",
                "flydate": "20.06.2025",
                "nights": 7,
                "meal": "All Inclusive",
                "price": 45000.0,
                "priceold": 52000.0,
                "currency": "RUB"
            },
            {
                "countrycode": "4",
                "countryname": "–¢—É—Ä—Ü–∏—è",
                "departurecode": "1",
                "departurename": "–ú–æ—Å–∫–≤–∞", 
                "departurenamefrom": "–ú–æ—Å–∫–≤—ã",
                "operatorcode": "23",
                "operatorname": "Anex Tour",
                "hotelcode": "234",
                "hotelname": "CLUB HOTEL SERA",
                "hotelstars": 5,
                "hotelregioncode": "12",
                "hotelregionname": "–ê–Ω—Ç–∞–ª—å—è",
                "hotelpicture": "https://via.placeholder.com/250x150/e74c3c/ffffff?text=Hotel+2",
                "fulldesclink": "https://example.com/hotel/234",
                "flydate": "22.06.2025",
                "nights": 10,
                "meal": "Ultra All Inclusive",
                "price": 68000.0,
                "priceold": 75000.0,
                "currency": "RUB"
            },
            {
                "countrycode": "22",
                "countryname": "–¢–∞–∏–ª–∞–Ω–¥",
                "departurecode": "2",
                "departurename": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "departurenamefrom": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞", 
                "operatorcode": "45",
                "operatorname": "Pegas Touristik",
                "hotelcode": "567",
                "hotelname": "PHUKET PARADISE RESORT",
                "hotelstars": 4,
                "hotelregioncode": "34",
                "hotelregionname": "–ü—Ö—É–∫–µ—Ç",
                "hotelpicture": "https://via.placeholder.com/250x150/2ecc71/ffffff?text=Hotel+3",
                "fulldesclink": "https://example.com/hotel/567",
                "flydate": "25.06.2025",
                "nights": 12,
                "meal": "–ó–∞–≤—Ç—Ä–∞–∫–∏",
                "price": 95000.0,
                "priceold": 110000.0,
                "currency": "RUB"
            },
            {
                "countrycode": "15",
                "countryname": "–û–ê–≠",
                "departurecode": "1",
                "departurename": "–ú–æ—Å–∫–≤–∞",
                "departurenamefrom": "–ú–æ—Å–∫–≤—ã",
                "operatorcode": "67",
                "operatorname": "Coral Travel",
                "hotelcode": "789",
                "hotelname": "ATLANTIS THE PALM",
                "hotelstars": 5,
                "hotelregioncode": "56",
                "hotelregionname": "–î—É–±–∞–π",
                "hotelpicture": "https://via.placeholder.com/250x150/f39c12/ffffff?text=Hotel+4",
                "fulldesclink": "https://example.com/hotel/789",
                "flydate": "28.06.2025",
                "nights": 5,
                "meal": "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω",
                "price": 125000.0,
                "priceold": 140000.0,
                "currency": "RUB"
            },
            {
                "countrycode": "8",
                "countryname": "–ì—Ä–µ—Ü–∏—è",
                "departurecode": "3",
                "departurename": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                "departurenamefrom": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞",
                "operatorcode": "89",
                "operatorname": "TEZ TOUR",
                "hotelcode": "345",
                "hotelname": "BLUE PALACE RESORT",
                "hotelstars": 4,
                "hotelregioncode": "78",
                "hotelregionname": "–ö—Ä–∏—Ç",
                "hotelpicture": "https://via.placeholder.com/250x150/9b59b6/ffffff?text=Hotel+5",
                "fulldesclink": "https://example.com/hotel/345",
                "flydate": "30.06.2025",
                "nights": 8,
                "meal": "All Inclusive",
                "price": 58000.0,
                "priceold": 65000.0,
                "currency": "RUB"
            },
            {
                "countrycode": "35",
                "countryname": "–ú–∞–ª—å–¥–∏–≤—ã",
                "departurecode": "1",
                "departurename": "–ú–æ—Å–∫–≤–∞",
                "departurenamefrom": "–ú–æ—Å–∫–≤—ã",
                "operatorcode": "12",
                "operatorname": "ICS Travel Group",
                "hotelcode": "901",
                "hotelname": "SUN ISLAND RESORT",
                "hotelstars": 5,
                "hotelregioncode": "90",
                "hotelregionname": "–Æ–∂–Ω—ã–π –ú–∞–ª–µ –ê—Ç–æ–ª–ª",
                "hotelpicture": "https://via.placeholder.com/250x150/1abc9c/ffffff?text=Hotel+6",
                "fulldesclink": "https://example.com/hotel/901",
                "flydate": "02.07.2025",
                "nights": 9,
                "meal": "–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω",
                "price": 180000.0,
                "priceold": 200000.0,
                "currency": "RUB"
            }
        ]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤
        selected_tours = mock_tours[:count]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã HotTourInfo
        result = []
        for tour_data in selected_tours:
            try:
                tour = HotTourInfo(**tour_data)
                result.append(tour)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mock —Ç—É—Ä–∞: {e}")
                continue
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} mock —Ç—É—Ä–æ–≤")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mock —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/mock-with-real-data", response_model=List[HotTourInfo])
async def get_mock_tours_with_real_data(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤")
):
    """
    Mock —Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ TourVisor
    """
    try:
        logger.info(f"üé≠ –°–æ–∑–¥–∞–Ω–∏–µ {count} mock —Ç—É—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        countries_data = await tourvisor_client.get_references("country")
        departures_data = await tourvisor_client.get_references("departure")
        
        countries_list = countries_data.get("lists", {}).get("countries", {}).get("country", [])
        departures_list = departures_data.get("lists", {}).get("departures", {}).get("departure", [])
        
        # –°–æ–∑–¥–∞–µ–º mock —Ç—É—Ä—ã
        mock_tours = []
        popular_countries = ["–ï–≥–∏–ø–µ—Ç", "–¢—É—Ä—Ü–∏—è", "–¢–∞–∏–ª–∞–Ω–¥", "–û–ê–≠", "–ì—Ä–µ—Ü–∏—è", "–ö–∏–ø—Ä", "–ò—Å–ø–∞–Ω–∏—è", "–ò—Ç–∞–ª–∏—è"]
        popular_cities = ["–ú–æ—Å–∫–≤–∞", "–°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
        
        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            country_name = popular_countries[i % len(popular_countries)]
            city_name = popular_cities[i % len(popular_cities)]
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
            country_code = None
            for country in countries_list:
                if country.get("name") == country_name:
                    country_code = country.get("id")
                    break
            
            city_code = None
            city_name_from = None
            for departure in departures_list:
                if departure.get("name") == city_name:
                    city_code = departure.get("id")
                    city_name_from = departure.get("namefrom")
                    break
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
            base_price = 35000 + (i * 12000) + random.randint(-5000, 15000)
            
            mock_tour = {
                "countrycode": country_code or str(i + 1),
                "countryname": country_name,
                "departurecode": city_code or str((i % 5) + 1),
                "departurename": city_name,
                "departurenamefrom": city_name_from or f"{city_name[:-1]}—ã" if city_name.endswith('–∞') else f"{city_name}–∞",
                "operatorcode": str(i + 10),
                "operatorname": f"–û–ø–µ—Ä–∞—Ç–æ—Ä {i+1}",
                "hotelcode": str(100 + i),
                "hotelname": f"HOTEL {country_name.upper()} RESORT {i+1}",
                "hotelstars": 3 + (i % 3),
                "hotelregioncode": str(50 + i),
                "hotelregionname": f"–ö—É—Ä–æ—Ä—Ç {country_name}",
                "hotelpicture": f"https://via.placeholder.com/250x150/{['4a90e2', 'e74c3c', '2ecc71', 'f39c12', '9b59b6', '1abc9c', 'e67e22', '34495e'][i % 8]}/ffffff?text=Hotel+{i+1}",
                "fulldesclink": f"https://example.com/hotel/{100+i}",
                "flydate": (datetime.now() + timedelta(days=7 + i)).strftime("%d.%m.%Y"),
                "nights": 7 + (i % 8),
                "meal": ["–ó–∞–≤—Ç—Ä–∞–∫–∏", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", "All Inclusive", "Ultra All Inclusive", "–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω"][i % 5],
                "price": float(base_price),
                "priceold": float(base_price + random.randint(3000, 8000)),
                "currency": "RUB"
            }
            
            mock_tours.append(HotTourInfo(**mock_tour))
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(mock_tours)} mock —Ç—É—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
        return mock_tours
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mock —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/status")
async def get_random_tours_system_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_tours = await tour_service.cache.get("random_tours_from_search")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–æ–∏—Å–∫–∞
        search_working = False
        try:
            test_params = {
                "departure": 1,
                "country": 1,
                "datefrom": (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y"),
                "dateto": (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y"),
                "nightsfrom": 7,
                "nightsto": 10,
                "adults": 2,
                "child": 0
            }
            test_request_id = await tourvisor_client.search_tours(test_params)
            search_working = bool(test_request_id)
        except:
            pass
        
        return {
            "cache": {
                "has_data": bool(cached_tours),
                "tours_count": len(cached_tours) if cached_tours else 0,
                "cache_key": "random_tours_from_search"
            },
            "search_system": {
                "working": search_working,
                "method": "regular_search_instead_of_hot_tours"
            },
            "recommendations": {
                "primary_endpoint": "/api/v1/tours/random",
                "fallback_endpoint": "/api/v1/tours/random/mock",
                "force_regenerate": "/api/v1/tours/random/generate"
            }
        }
        
    except Exception as e:
        return {
            "error": str(e),
            "recommendation": "use_mock_endpoint"
        }

@router.get("/test-search")
async def test_search_functionality():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_params = {
            "departure": 1,  # –ú–æ—Å–∫–≤–∞
            "country": 1,    # –ï–≥–∏–ø–µ—Ç
            "datefrom": (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y"),
            "dateto": (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y"),
            "nightsfrom": 7,
            "nightsto": 10,
            "adults": 2,
            "child": 0
        }
        
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {search_params}")
        
        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        request_id = await tourvisor_client.search_tours(search_params)
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        statuses = []
        for i in range(5):
            await asyncio.sleep(1)
            status_result = await tourvisor_client.get_search_status(request_id)
            status_data = status_result.get("data", {}).get("status", {})
            statuses.append({
                "attempt": i + 1,
                "state": status_data.get("state"),
                "progress": status_data.get("progress"),
                "hotels_found": status_data.get("hotelsfound"),
                "tours_found": status_data.get("toursfound"),
                "min_price": status_data.get("minprice")
            })
            
            if status_data.get("state") == "finished":
                break
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await tourvisor_client.get_search_results(request_id, 1, 5)
        
        return {
            "success": True,
            "search_params": search_params,
            "request_id": request_id,
            "status_progression": statuses,
            "final_results": {
                "has_data": bool(results.get("data")),
                "has_hotels": bool(results.get("data", {}).get("result", {}).get("hotel")),
                "sample_keys": list(results.keys()) if results else []
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/test-connection")
async def test_tourvisor_connection():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API
    """
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        result = await tourvisor_client.get_references("departure")
        
        if result:
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TourVisor API —É—Å–ø–µ—à–Ω–æ",
                "data_keys": list(result.keys()),
                "sample_data": str(result)[:200] + "..." if len(str(result)) > 200 else str(result)
            }
        else:
            return {
                "success": False,
                "message": "TourVisor API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TourVisor API: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        }

@router.get("/directions", response_model=List[DirectionInfo])
async def get_directions():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤
    """
    try:
        logger.info("üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        result = await tour_service.get_directions_with_prices()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/actualize", response_model=DetailedTourInfo)
async def actualize_tour(request: TourActualizationRequest):
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–π—Å–æ–≤
    """
    try:
        return await tour_service.actualize_tour(request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/tour/{tour_id}", response_model=DetailedTourInfo)
async def get_tour_by_id(tour_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ –ø–æ –µ–≥–æ ID
    """
    try:
        result = await tour_service.search_tour_by_id(tour_id)
        if not result:
            raise HTTPException(status_code=404, detail="–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return result
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search-by-hotel", response_model=List[HotelInfo])
async def search_tours_by_hotel(
    hotel_name: str = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"),
    country_code: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")
):
    """
    –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è
    """
    try:
        return await tour_service.search_tours_by_hotel_name(hotel_name, country_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –æ—Ç–µ–ª—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ —Ñ–∞–π–ª app/api/v1/tours.py

@router.get("/debug/search-status/{request_id}")
async def debug_search_status(request_id: str):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    try:
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ {request_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç TourVisor
        raw_status = await tourvisor_client.get_search_status(request_id)
        logger.info(f"üìÑ –°—ã—Ä–æ–π —Å—Ç–∞—Ç—É—Å: {raw_status}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        raw_results = await tourvisor_client.get_search_results(request_id, 1, 5)
        logger.info(f"üìÑ –°—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {str(raw_results)[:500]}...")
        
        return {
            "request_id": request_id,
            "raw_status": raw_status,
            "raw_results_preview": str(raw_results)[:1000],
            "parsed_status": {
                "has_data": bool(raw_status.get("data")),
                "has_status": bool(raw_status.get("data", {}).get("status")),
                "status_keys": list(raw_status.get("data", {}).get("status", {}).keys()) if raw_status.get("data", {}).get("status") else []
            },
            "parsed_results": {
                "has_data": bool(raw_results.get("data")),
                "has_result": bool(raw_results.get("data", {}).get("result")),
                "has_hotels": bool(raw_results.get("data", {}).get("result", {}).get("hotel")),
                "result_keys": list(raw_results.get("data", {}).keys()) if raw_results.get("data") else []
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return {"error": str(e), "request_id": request_id}

@router.post("/debug/test-search")
async def debug_test_search():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        search_params = {
            "departure": 1,  # –ú–æ—Å–∫–≤–∞
            "country": 1,    # –ï–≥–∏–ø–µ—Ç
            "datefrom": (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y"),
            "dateto": (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y"),
            "nightsfrom": 7,
            "nightsto": 10,
            "adults": 2,
            "child": 0
        }
        
        logger.info(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {search_params}")
        
        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        request_id = await tourvisor_client.search_tours(search_params)
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
        
        # 2. –°–ª–µ–¥–∏–º –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
        statuses = []
        for i in range(20):  # 20 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 40 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(2)
            
            try:
                status_result = await tourvisor_client.get_search_status(request_id)
                status_data = status_result.get("data", {}).get("status", {})
                
                status_info = {
                    "attempt": i + 1,
                    "timestamp": datetime.now().isoformat(),
                    "state": status_data.get("state", "unknown"),
                    "progress": status_data.get("progress", 0),
                    "hotels_found": status_data.get("hotelsfound", 0),
                    "tours_found": status_data.get("toursfound", 0),
                    "min_price": status_data.get("minprice"),
                    "time_passed": status_data.get("timepassed", 0)
                }
                
                statuses.append(status_info)
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {status_info}")
                
                # –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                if status_data.get("state") == "finished":
                    logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
                    break
                    
                # –ò–ª–∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                if status_data.get("hotelsfound", 0) > 0 and status_data.get("progress", 0) >= 50:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
                    break
                    
            except Exception as status_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i+1}: {status_error}")
                statuses.append({
                    "attempt": i + 1,
                    "error": str(status_error)
                })
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        try:
            final_results = await tourvisor_client.get_search_results(request_id, 1, 5)
            results_summary = {
                "has_data": bool(final_results.get("data")),
                "has_hotels": bool(final_results.get("data", {}).get("result", {}).get("hotel")),
                "hotels_count": len(final_results.get("data", {}).get("result", {}).get("hotel", [])) if isinstance(final_results.get("data", {}).get("result", {}).get("hotel", []), list) else (1 if final_results.get("data", {}).get("result", {}).get("hotel") else 0),
                "sample_hotel": final_results.get("data", {}).get("result", {}).get("hotel", [{}])[0] if isinstance(final_results.get("data", {}).get("result", {}).get("hotel", []), list) and final_results.get("data", {}).get("result", {}).get("hotel", []) else final_results.get("data", {}).get("result", {}).get("hotel", {}) if final_results.get("data", {}).get("result", {}).get("hotel") else {}
            }
        except Exception as results_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_error}")
            results_summary = {"error": str(results_error)}
        
        return {
            "success": True,
            "search_params": search_params,
            "request_id": request_id,
            "status_progression": statuses,
            "final_results": results_summary,
            "summary": {
                "total_attempts": len(statuses),
                "final_state": statuses[-1].get("state", "unknown") if statuses else "no_status",
                "max_progress": max([s.get("progress", 0) for s in statuses if "progress" in s], default=0),
                "max_hotels": max([s.get("hotels_found", 0) for s in statuses if "hotels_found" in s], default=0)
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/debug/cache-status")
async def debug_cache_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
    """
    try:
        cache_keys = [
            "random_tours_from_search",
            "reference:departure",
            "reference:country", 
            "reference:meal",
            "reference:stars",
            "hot_tours:city_1",
            "directions_with_prices_search"
        ]
        
        cache_status = {}
        for key in cache_keys:
            try:
                exists = await cache_service.exists(key)
                data = await cache_service.get(key) if exists else None
                
                cache_status[key] = {
                    "exists": exists,
                    "data_type": type(data).__name__ if data else None,
                    "data_size": len(data) if isinstance(data, (list, dict, str)) else None,
                    "preview": str(data)[:100] if data else None
                }
            except Exception as key_error:
                cache_status[key] = {"error": str(key_error)}
        
        return {
            "cache_status": cache_status,
            "redis_info": "Connected" if await cache_service.exists("health_check") else "Disconnected"
        }
        
    except Exception as e:
        return {"error": str(e)}

@router.post("/debug/force-regenerate-tours")
async def debug_force_regenerate():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    try:
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–æ–≤...")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        await cache_service.delete("random_tours_from_search")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä—ã
        from app.tasks.random_tours_update import RandomToursService
        service = RandomToursService()
        await service.update_random_tours()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_tours = await cache_service.get("random_tours_from_search")
        
        return {
            "success": True,
            "tours_generated": len(new_tours) if new_tours else 0,
            "tours_preview": new_tours[:2] if new_tours else None
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": str(e)}

@router.get("/debug/tourvisor-raw/{endpoint}")
async def debug_tourvisor_raw(endpoint: str, params: str = ""):
    """
    –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ TourVisor API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parsed_params = {}
        if params:
            for param in params.split("&"):
                if "=" in param:
                    key, value = param.split("=", 1)
                    parsed_params[key] = value
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await tourvisor_client._make_request(f"{endpoint}.php", parsed_params)
        
        return {
            "endpoint": endpoint,
            "params": parsed_params,
            "result": result,
            "result_preview": str(result)[:500]
        }
        
    except Exception as e:
        return {
            "endpoint": endpoint,
            "error": str(e)
        }