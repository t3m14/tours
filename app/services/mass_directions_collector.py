"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à
"""

import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

from app.services.cache_service import cache_service
from app.services.photo_service import photo_service
from app.services.price_service import price_service
from app.core.tourvisor_client import tourvisor_client
from app.models.tour import DirectionInfo
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class MassDirectionsCollector:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.cache = cache_service
        self.photo_service = photo_service
        self.price_service = price_service
        
        # –ö–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.MASTER_DIRECTIONS_KEY = "master_directions_all_countries"
        self.DIRECTIONS_METADATA_KEY = "directions_metadata"
        self.COUNTRY_PROGRESS_KEY = "directions_collection_progress"
        
        # TTL –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (30 –¥–Ω–µ–π)
        self.LONG_TERM_TTL = 2592000  # 30 –¥–Ω–µ–π
        
    async def collect_all_directions(self, force_rebuild: bool = False) -> List[DirectionInfo]:
        """
        –ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        
        Args:
            force_rebuild: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä –¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        logger.info("üåç –ù–ê–ß–ò–ù–ê–ï–ú –ú–ê–°–°–û–í–´–ô –°–ë–û–† –í–°–ï–• –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
        if not force_rebuild:
            cached_directions = await self._get_cached_master_directions()
            if cached_directions and len(cached_directions) > 10:
                logger.info(f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫—ç—à–∞")
                return cached_directions
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
        all_countries = await self._get_all_available_countries()
        logger.info(f"üåé –ù–∞–π–¥–µ–Ω–æ {len(all_countries)} —Å—Ç—Ä–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        if not all_countries:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω")
            return await self._get_fallback_directions()
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º
        all_directions = await self._collect_directions_from_countries(all_countries)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à
        if all_directions:
            await self._save_master_directions(all_directions, all_countries)
            logger.info(f"‚úÖ –ú–ê–°–°–û–í–´–ô –°–ë–û–† –ó–ê–í–ï–†–®–ï–ù: {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            all_directions = await self._get_fallback_directions()
        
        return all_directions
    
    async def _get_all_available_countries(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ API"""
        try:
            logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω...")
            
            countries_data = await tourvisor_client.get_references("country")
            countries_list = countries_data.get("country", [])
            
            if not isinstance(countries_list, list):
                countries_list = [countries_list] if countries_list else []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
            valid_countries = []
            for country in countries_list:
                country_id = country.get("id")
                country_name = country.get("name")
                
                if country_id and country_name:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID - —ç—Ç–æ —á–∏—Å–ª–æ
                        int(country_id)
                        valid_countries.append({
                            "id": int(country_id),
                            "name": country_name
                        })
                    except (ValueError, TypeError):
                        continue
            
            logger.info(f"üìã –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: {len(valid_countries)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –ø–µ—Ä–≤—ã–º–∏)
            popular_countries = [1, 4, 22, 8, 15, 35, 9, 11]  # –ï–≥–∏–ø–µ—Ç, –¢—É—Ä—Ü–∏—è, –¢–∞–∏–ª–∞–Ω–¥ –∏ —Ç.–¥.
            
            def country_priority(country):
                return 0 if country["id"] in popular_countries else 1
            
            valid_countries.sort(key=country_priority)
            
            return valid_countries
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: {e}")
            return []
    
    async def _collect_directions_from_countries(self, countries: List[Dict[str, Any]]) -> List[DirectionInfo]:
        """–°–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
        all_directions = []
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(countries)} —Å—Ç—Ä–∞–Ω...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await self._save_collection_progress(0, len(countries), "starting")
        
        for i, country in enumerate(countries):
            country_id = country["id"]
            country_name = country["name"]
            
            try:
                logger.info(f"üåç [{i+1}/{len(countries)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {country_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await self._save_collection_progress(i+1, len(countries), f"processing_{country_name}")
                
                direction = await self._collect_single_direction(country_id, country_name)
                
                if direction:
                    all_directions.append(direction)
                    logger.info(f"‚úÖ {country_name}: —Ü–µ–Ω–∞ {direction.min_price}, —Ñ–æ—Ç–æ: {'‚úì' if not direction.image_link.startswith('https://via.placeholder.com') else '‚úó'}")
                else:
                    logger.warning(f"‚ö†Ô∏è {country_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
                await asyncio.sleep(0.5)
                
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω
                if (i + 1) % 10 == 0:
                    logger.info(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                    await self._save_partial_directions(all_directions)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {country_name}: {e}")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await self._save_collection_progress(len(countries), len(countries), "completed")
        
        logger.info(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ {len(countries)} —Å—Ç—Ä–∞–Ω")
        return all_directions
    
    async def _collect_single_direction(self, country_id: int, country_name: str) -> Optional[DirectionInfo]:
        """–°–±–æ—Ä –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ —Ü–µ–Ω—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            photo_task = self.photo_service.get_country_hotel_photo_fast(country_id, country_name)
            price_task = self.price_service.get_country_min_price(country_id, country_name)
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                hotel_photo, min_price = await asyncio.wait_for(
                    asyncio.gather(photo_task, price_task, return_exceptions=True),
                    timeout=15.0  # 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å—Ç—Ä–∞–Ω—É
                )
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {country_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                hotel_photo = None
                min_price = 50000.0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if isinstance(hotel_photo, Exception):
                logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è {country_name}: {hotel_photo}")
                hotel_photo = None
            
            if isinstance(min_price, Exception):
                logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {country_name}: {min_price}")
                min_price = self.price_service.get_default_prices().get(country_id, 50000.0)
            
            # Fallback –¥–ª—è —Ñ–æ—Ç–æ
            if not hotel_photo:
                hotel_photo = self.photo_service.get_fallback_image(country_id, country_name)
            
            return DirectionInfo(
                name=country_name,
                image_link=hotel_photo,
                min_price=float(min_price)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {country_name}: {e}")
            return None
    
    async def _save_master_directions(self, directions: List[DirectionInfo], countries: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            directions_data = [direction.dict() for direction in directions]
            await self.cache.set(
                self.MASTER_DIRECTIONS_KEY,
                directions_data,
                ttl=self.LONG_TERM_TTL
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "collection_date": datetime.now().isoformat(),
                "total_countries_processed": len(countries),
                "total_directions_collected": len(directions),
                "countries_with_real_photos": len([d for d in directions if not d.image_link.startswith("https://via.placeholder.com")]),
                "average_price": sum(d.min_price for d in directions) / len(directions) if directions else 0,
                "price_range": {
                    "min": min(d.min_price for d in directions) if directions else 0,
                    "max": max(d.min_price for d in directions) if directions else 0
                },
                "countries_list": [c["name"] for c in countries],
                "ttl_days": self.LONG_TERM_TTL // 86400
            }
            
            await self.cache.set(
                self.DIRECTIONS_METADATA_KEY,
                metadata,
                ttl=self.LONG_TERM_TTL
            )
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à: {e}")
    
    async def _save_partial_directions(self, directions: List[DirectionInfo]):
        """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            partial_key = f"{self.MASTER_DIRECTIONS_KEY}_partial"
            directions_data = [direction.dict() for direction in directions]
            await self.cache.set(partial_key, directions_data, ttl=86400)  # 24 —á–∞—Å–∞
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    async def _save_collection_progress(self, current: int, total: int, status: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞"""
        try:
            progress_data = {
                "current": current,
                "total": total,
                "percentage": (current / total * 100) if total > 0 else 0,
                "status": status,
                "last_update": datetime.now().isoformat()
            }
            
            await self.cache.set(
                self.COUNTRY_PROGRESS_KEY,
                progress_data,
                ttl=86400  # 24 —á–∞—Å–∞
            )
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    async def _get_cached_master_directions(self) -> Optional[List[DirectionInfo]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫—ç—à–∞"""
        try:
            cached_data = await self.cache.get(self.MASTER_DIRECTIONS_KEY)
            if cached_data:
                return [DirectionInfo(**item) for item in cached_data]
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
            return None
    
    async def _get_fallback_directions(self) -> List[DirectionInfo]:
        """Fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∏–∑ API"""
        logger.info("üé≠ –°–æ–∑–¥–∞–µ–º fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        fallback_countries = [
            {"id": 1, "name": "–ï–≥–∏–ø–µ—Ç", "price": 45000},
            {"id": 4, "name": "–¢—É—Ä—Ü–∏—è", "price": 35000},
            {"id": 22, "name": "–¢–∞–∏–ª–∞–Ω–¥", "price": 95000},
            {"id": 8, "name": "–ì—Ä–µ—Ü–∏—è", "price": 55000},
            {"id": 15, "name": "–û–ê–≠", "price": 75000},
            {"id": 35, "name": "–ú–∞–ª—å–¥–∏–≤—ã", "price": 180000},
            {"id": 9, "name": "–ö–∏–ø—Ä", "price": 45000},
            {"id": 11, "name": "–ë–æ–ª–≥–∞—Ä–∏—è", "price": 40000},
            {"id": 16, "name": "–¢—É–Ω–∏—Å", "price": 50000},
            {"id": 17, "name": "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è", "price": 60000},
            {"id": 19, "name": "–ò—Å–ø–∞–Ω–∏—è", "price": 70000},
            {"id": 20, "name": "–ò—Ç–∞–ª–∏—è", "price": 80000},
            {"id": 23, "name": "–ò–Ω–¥–∏—è", "price": 85000},
            {"id": 24, "name": "–®—Ä–∏-–õ–∞–Ω–∫–∞", "price": 90000},
            {"id": 25, "name": "–í—å–µ—Ç–Ω–∞–º", "price": 75000},
        ]
        
        directions = []
        for country in fallback_countries:
            direction = DirectionInfo(
                name=country["name"],
                image_link=self.photo_service.get_fallback_image(country["id"], country["name"]),
                min_price=float(country["price"])
            )
            directions.append(direction)
        
        return directions
    
    async def get_collection_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à
            master_directions = await self.cache.get(self.MASTER_DIRECTIONS_KEY)
            metadata = await self.cache.get(self.DIRECTIONS_METADATA_KEY)
            progress = await self.cache.get(self.COUNTRY_PROGRESS_KEY)
            
            return {
                "master_cache": {
                    "exists": bool(master_directions),
                    "directions_count": len(master_directions) if master_directions else 0,
                    "last_collection": metadata.get("collection_date") if metadata else None,
                    "countries_processed": metadata.get("total_countries_processed") if metadata else 0,
                    "real_photos_count": metadata.get("countries_with_real_photos") if metadata else 0
                },
                "current_progress": progress,
                "cache_info": {
                    "master_key": self.MASTER_DIRECTIONS_KEY,
                    "ttl_days": self.LONG_TERM_TTL // 86400,
                    "metadata_available": bool(metadata)
                },
                "statistics": metadata if metadata else {},
                "recommendations": self._get_recommendations(master_directions, metadata, progress)
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "recommendations": ["–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"]
            }
    
    def _get_recommendations(self, master_directions, metadata, progress) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        recommendations = []
        
        if not master_directions:
            recommendations.append("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: /api/v1/tours/directions/collect-all")
            
        elif metadata:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
            try:
                collection_date = datetime.fromisoformat(metadata["collection_date"])
                days_old = (datetime.now() - collection_date).days
                
                if days_old > 30:
                    recommendations.append(f"üîÑ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ ({days_old} –¥–Ω–µ–π), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                elif days_old > 7:
                    recommendations.append(f"üìä –î–∞–Ω–Ω—ã–µ {days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, –≤ –ø–æ—Ä—è–¥–∫–µ")
                else:
                    recommendations.append("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ")
                    
            except:
                pass
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            directions_count = metadata.get("total_directions_collected", 0)
            if directions_count < 10:
                recommendations.append("‚ö†Ô∏è –ú–∞–ª–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å")
            elif directions_count < 20:
                recommendations.append("üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            else:
                recommendations.append(f"üéØ –û—Ç–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {directions_count} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        return recommendations
    
    async def clear_all_directions_cache(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            keys_to_clear = [
                self.MASTER_DIRECTIONS_KEY,
                self.DIRECTIONS_METADATA_KEY,
                self.COUNTRY_PROGRESS_KEY,
                f"{self.MASTER_DIRECTIONS_KEY}_partial",
                "directions_with_prices_and_photos"  # –°—Ç–∞—Ä—ã–π –∫–ª—é—á
            ]
            
            cleared_keys = []
            for key in keys_to_clear:
                if await self.cache.delete(key):
                    cleared_keys.append(key)
            
            return {
                "success": True,
                "message": f"–û—á–∏—â–µ–Ω–æ {len(cleared_keys)} –∫–ª—é—á–µ–π –∫—ç—à–∞",
                "cleared_keys": cleared_keys
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
mass_directions_collector = MassDirectionsCollector()