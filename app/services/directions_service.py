# app/services/directions_service.py

import asyncio
from typing import List
from datetime import datetime

from app.services.cache_service import cache_service
from app.services.mass_directions_collector import mass_directions_collector
from app.models.tour import DirectionInfo
from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class DirectionsService:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞"""
    
    def __init__(self):
        self.cache = cache_service
        self.mass_collector = mass_directions_collector
        
        # –ö–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à)
        self.API_CACHE_KEY = "api_directions_response"
        self.API_CACHE_TTL = 3600  # 1 —á–∞—Å
    
    async def get_directions_with_prices(self) -> List[DirectionInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç API –∫—ç—à, –ø–æ—Ç–æ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à, –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä
        """
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π API –∫—ç—à
        api_cached = await self.cache.get(self.API_CACHE_KEY)
        if api_cached:
            logger.info(f"üì∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(api_cached)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ API –∫—ç—à–∞")
            return [DirectionInfo(**item) for item in api_cached]
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à –∏–∑ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞
        master_directions = await self.mass_collector._get_cached_master_directions()
        if master_directions and len(master_directions) >= 10:
            logger.info(f"üåç –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(master_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫—ç—à–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            await self._cache_api_response(master_directions)
            return master_directions
        
        # 3. –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä
        logger.info("üîÑ –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä...")
        return await self.collect_all_directions()

    async def collect_all_directions(self, force_rebuild: bool = False) -> List[DirectionInfo]:
        """
        –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        
        Args:
            force_rebuild: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä –¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        logger.info("üåç –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        try:
            directions = await self.mass_collector.collect_all_directions(force_rebuild)
            
            if directions:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                await self._cache_api_response(directions)
                logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            return directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            return await self.mass_collector._get_fallback_directions()

    async def refresh_directions(self) -> List[DirectionInfo]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º API –∫—ç—à
        await self.cache.delete(self.API_CACHE_KEY)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä
        return await self.collect_all_directions(force_rebuild=True)

    async def get_directions_subset(self, limit: int = None) -> List[DirectionInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        """
        all_directions = await self.get_directions_with_prices()
        
        if limit and len(all_directions) > limit:
            # –ë–µ—Ä–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –ø–µ—Ä–≤—ã–º–∏
            popular_countries = ["–ï–≥–∏–ø–µ—Ç", "–¢—É—Ä—Ü–∏—è", "–¢–∞–∏–ª–∞–Ω–¥", "–ì—Ä–µ—Ü–∏—è", "–û–ê–≠", "–ú–∞–ª—å–¥–∏–≤—ã"]
            
            popular_directions = []
            other_directions = []
            
            for direction in all_directions:
                if direction.name in popular_countries:
                    popular_directions.append(direction)
                else:
                    other_directions.append(direction)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            limited_directions = (popular_directions + other_directions)[:limit]
            
            logger.info(f"üìä –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(limited_directions)} –∏–∑ {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            return limited_directions
        
        return all_directions

    async def get_directions_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞
            mass_status = await self.mass_collector.get_collection_status()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API –∫—ç—à–µ
            api_cached = await self.cache.get(self.API_CACHE_KEY)
            
            return {
                **mass_status,
                "api_cache": {
                    "exists": bool(api_cached),
                    "directions_count": len(api_cached) if api_cached else 0,
                    "ttl_hours": self.API_CACHE_TTL // 3600
                },
                "endpoints": {
                    "get_directions": "/api/v1/tours/directions",
                    "collect_all": "/api/v1/tours/directions/collect-all",
                    "refresh_directions": "/api/v1/tours/directions/refresh", 
                    "check_status": "/api/v1/tours/directions/status",
                    "clear_cache": "/api/v1/tours/directions/clear-cache"
                },
                "features": {
                    "mass_country_collection": True,
                    "long_term_caching": True,
                    "real_hotel_photos": True,
                    "min_prices_from_search": True,
                    "api_cache_ttl_hours": self.API_CACHE_TTL // 3600,
                    "master_cache_ttl_days": mass_status.get("cache_info", {}).get("ttl_days", 30),
                    "parallel_processing": True,
                    "progress_tracking": True
                }
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "recommendation": "use_collect_all_endpoint"
            }

    async def fix_cache_issues(self) -> dict:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            # 1. –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            clear_result = await self.mass_collector.clear_all_directions_cache()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä
            logger.info("üîß –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            new_directions = await self.collect_all_directions(force_rebuild=True)
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            api_cache_check = await self.cache.get(self.API_CACHE_KEY)
            master_cache_check = await self.mass_collector._get_cached_master_directions()
            
            return {
                "success": True,
                "actions_performed": [
                    f"–û—á–∏—â–µ–Ω—ã –∫–ª—é—á–∏ –∫—ç—à–∞: {clear_result.get('cleared_keys', [])}",
                    f"–í—ã–ø–æ–ª–Ω–µ–Ω –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä: {len(new_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
                    f"API –∫—ç—à {'—Å–æ–∑–¥–∞–Ω' if api_cache_check else '–ù–ï —Å–æ–∑–¥–∞–Ω'}",
                    f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à {'—Å–æ–∑–¥–∞–Ω' if master_cache_check else '–ù–ï —Å–æ–∑–¥–∞–Ω'}"
                ],
                "generated_directions": [
                    {
                        "name": d.name,
                        "has_real_photo": not d.image_link.startswith("https://via.placeholder.com"),
                        "price": d.min_price
                    }
                    for d in new_directions[:10]  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                ],
                "statistics": {
                    "total_directions": len(new_directions),
                    "with_real_photos": len([d for d in new_directions if not d.image_link.startswith("https://via.placeholder.com")]),
                    "average_price": sum(d.min_price for d in new_directions) / len(new_directions) if new_directions else 0
                },
                "recommendations": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ endpoints /api/v1/tours/directions",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/v1/tours/directions/status –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    "–ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "recommendations": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TourVisor API",
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /api/v1/tours/directions/collect-all",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                ]
            }

    async def clear_all_cache(self) -> dict:
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            # –û—á–∏—â–∞–µ–º API –∫—ç—à
            await self.cache.delete(self.API_CACHE_KEY)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞
            mass_clear_result = await self.mass_collector.clear_all_directions_cache()
            
            return {
                "success": True,
                "message": "–í—Å–µ –∫—ç—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω—ã",
                "details": mass_clear_result
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    async def _cache_api_response(self, directions: List[DirectionInfo]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ API –∫—ç—à"""
        try:
            directions_data = [direction.dict() for direction in directions]
            await self.cache.set(
                self.API_CACHE_KEY,
                directions_data,
                ttl=self.API_CACHE_TTL
            )
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ API –∫—ç—à")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ API –∫—ç—à: {e}")

    def _get_country_name(self, country_code: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)"""
        country_map = {
            1: "–ï–≥–∏–ø–µ—Ç", 4: "–¢—É—Ä—Ü–∏—è", 8: "–ì—Ä–µ—Ü–∏—è", 9: "–ö–∏–ø—Ä", 11: "–ë–æ–ª–≥–∞—Ä–∏—è",
            15: "–û–ê–≠", 16: "–¢—É–Ω–∏—Å", 17: "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è", 19: "–ò—Å–ø–∞–Ω–∏—è", 20: "–ò—Ç–∞–ª–∏—è",
            22: "–¢–∞–∏–ª–∞–Ω–¥", 23: "–ò–Ω–¥–∏—è", 24: "–®—Ä–∏-–õ–∞–Ω–∫–∞", 25: "–í—å–µ—Ç–Ω–∞–º", 26: "–ö–∏—Ç–∞–π",
            27: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", 28: "–ú–∞–ª–∞–π–∑–∏—è", 29: "–°–∏–Ω–≥–∞–ø—É—Ä", 30: "–§–∏–ª–∏–ø–ø–∏–Ω—ã",
            31: "–ú–∞–≤—Ä–∏–∫–∏–π", 32: "–°–µ–π—à–µ–ª—ã", 33: "–¢–∞–Ω–∑–∞–Ω–∏—è", 34: "–ö–µ–Ω–∏—è", 35: "–ú–∞–ª—å–¥–∏–≤—ã"
        }
        return country_map.get(country_code, f"–°—Ç—Ä–∞–Ω–∞ {country_code}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
directions_service = DirectionsService()