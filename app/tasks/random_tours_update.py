import asyncio
from typing import List
from datetime import datetime, timedelta
import random

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.config import settings
from app.models.tour import HotTourInfo
from app.services.tour_service import tour_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class RandomToursService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
    
    def __init__(self):
        self.countries = settings.POPULAR_COUNTRIES.copy()
        self.cities = settings.DEPARTURE_CITIES.copy()
        self.target_count = settings.RANDOM_TOURS_COUNT
    
    async def update_random_tours(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
        logger.info("üîÑ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–±—ã—Å—Ç—Ä–µ–µ)
            random_tours = await self._try_hot_tours_approach()
            
            # –ï—Å–ª–∏ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            if not random_tours or len(random_tours) < 3:
                logger.info("üîç –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
                search_tours = await tour_service._generate_random_tours_via_search(self.target_count)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                all_tours = (random_tours or []) + search_tours
                random_tours = all_tours[:self.target_count]
            
            if random_tours and len(random_tours) >= 3:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(random_tours)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                await cache_service.set(
                    "random_tours_from_search",
                    [tour.dict() for tour in random_tours],
                    ttl=settings.POPULAR_TOURS_CACHE_TTL
                )
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—É—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ")
                await self._create_fallback_mock_data()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º mock-–¥–∞–Ω–Ω—ã–µ
            await self._create_fallback_mock_data()
    
    async def _try_hot_tours_approach(self) -> List[HotTourInfo]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã"""
        try:
            logger.info("üî• –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã...")
            
            all_hot_tours = []
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
            for city in self.cities:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
                    hot_tours_data = await tourvisor_client.get_hot_tours(
                        city=city,
                        items=10,
                        maxdays=30  # –¢—É—Ä—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü
                    )
                    
                    tours_list = hot_tours_data.get("hottours", [])
                    hot_count = hot_tours_data.get("hotcount", 0)
                    
                    logger.info(f"üî• –ì–æ—Ä–æ–¥ {city}: –Ω–∞–π–¥–µ–Ω–æ {hot_count} –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤")
                    
                    if tours_list and hot_count > 0:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        for tour_data in tours_list[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ç—É—Ä–∞ —Å –≥–æ—Ä–æ–¥–∞
                            try:
                                hot_tour = HotTourInfo(**tour_data)
                                all_hot_tours.append(hot_tour)
                            except Exception as conv_error:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç—É—Ä–∞: {conv_error}")
                                continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as city_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {city_error}")
                    continue
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if all_hot_tours:
                random.shuffle(all_hot_tours)
                selected_tours = all_hot_tours[:self.target_count]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(selected_tours)} —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã")
                return selected_tours
            
            logger.info("‚ÑπÔ∏è –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: {e}")
            return []
    
    async def _create_fallback_mock_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            logger.info("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-–¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            countries_data = await tourvisor_client.get_references("country")
            departures_data = await tourvisor_client.get_references("departure")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–∫–∏
            countries_list = self._extract_reference_list(countries_data, "country")
            departures_list = self._extract_reference_list(departures_data, "departure")
            
            mock_tours = []
            popular_countries = ["–ï–≥–∏–ø–µ—Ç", "–¢—É—Ä—Ü–∏—è", "–¢–∞–∏–ª–∞–Ω–¥", "–û–ê–≠", "–ì—Ä–µ—Ü–∏—è", "–ö–∏–ø—Ä"]
            
            for i, country_name in enumerate(popular_countries[:self.target_count]):
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
                country_code = self._find_country_code(countries_list, country_name)
                city_data = departures_list[i % len(departures_list)] if departures_list else {}
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                base_price = self._generate_realistic_price(country_name)
                nights = random.choice([7, 10, 12, 14])
                stars = random.choice([3, 4, 5])
                
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã
                days_offset = random.randint(7, 30)
                fly_date = (datetime.now() + timedelta(days=days_offset)).strftime("%d.%m.%Y")
                
                mock_tour_data = {
                    "countrycode": country_code or str(i + 1),
                    "countryname": country_name,
                    "departurecode": city_data.get("id", str(i + 1)),
                    "departurename": city_data.get("name", f"–ì–æ—Ä–æ–¥ {i+1}"),
                    "departurenamefrom": city_data.get("namefrom", f"–ì–æ—Ä–æ–¥–∞ {i+1}"),
                    "operatorcode": str(10 + i),
                    "operatorname": self._get_realistic_operator_name(i),
                    "hotelcode": str(200 + i),
                    "hotelname": self._generate_hotel_name(country_name, i),
                    "hotelstars": stars,
                    "hotelregioncode": str(100 + i),
                    "hotelregionname": self._get_popular_resort(country_name),
                    "hotelpicture": f"https://via.placeholder.com/250x150/{self._get_country_color(i)}/ffffff?text=Resort+{i+1}",
                    "fulldesclink": f"https://example.com/hotel/{200+i}",
                    "flydate": fly_date,
                    "nights": nights,
                    "meal": self._get_realistic_meal(stars),
                    "price": float(base_price),
                    "priceold": float(base_price + random.randint(5000, 15000)),
                    "currency": "RUB"
                }
                
                mock_tours.append(mock_tour_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mock-–¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            await cache_service.set(
                "random_tours_from_search",
                mock_tours,
                ttl=settings.POPULAR_TOURS_CACHE_TTL
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {len(mock_tours)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö mock-—Ç—É—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _extract_reference_list(self, data: dict, ref_type: str) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if ref_type in data:
                items = data[ref_type]
            elif "lists" in data:
                lists_data = data["lists"]
                ref_key = f"{ref_type}s" if not ref_type.endswith('y') else f"{ref_type[:-1]}ies"
                if ref_key in lists_data:
                    items = lists_data[ref_key].get(ref_type, [])
                else:
                    items = lists_data.get(ref_type, [])
            else:
                items = []
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if not isinstance(items, list):
                items = [items] if items else []
            
            return items
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {ref_type}: {e}")
            return []
    
    def _find_country_code(self, countries_list: list, country_name: str) -> str:
        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        for country in countries_list:
            if isinstance(country, dict) and country.get("name") == country_name:
                return str(country.get("id", ""))
        return ""
    
    def _generate_realistic_price(self, country_name: str) -> int:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ü–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ"""
        price_ranges = {
            "–ï–≥–∏–ø–µ—Ç": (35000, 65000),
            "–¢—É—Ä—Ü–∏—è": (40000, 80000),
            "–¢–∞–∏–ª–∞–Ω–¥": (70000, 120000),
            "–û–ê–≠": (80000, 150000),
            "–ì—Ä–µ—Ü–∏—è": (50000, 90000),
            "–ö–∏–ø—Ä": (45000, 85000),
        }
        
        min_price, max_price = price_ranges.get(country_name, (40000, 80000))
        return random.randint(min_price, max_price)
    
    def _get_realistic_operator_name(self, index: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        operators = [
            "Anex Tour", "Pegas Touristik", "TUI", "Coral Travel", 
            "TEZ TOUR", "Sunmar", "ICS Travel Group", "Biblio Globus"
        ]
        return operators[index % len(operators)]
    
    def _generate_hotel_name(self, country_name: str, index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è"""
        prefixes = {
            "–ï–≥–∏–ø–µ—Ç": ["SULTANA", "PHARAOH", "PYRAMIDS", "NILE"],
            "–¢—É—Ä—Ü–∏—è": ["CLUB", "ROYAL", "SULTAN", "PALACE"],
            "–¢–∞–∏–ª–∞–Ω–¥": ["PARADISE", "TROPICAL", "BAMBOO", "GOLDEN"],
            "–û–ê–≠": ["ATLANTIS", "EMIRATES", "LUXURY", "PEARL"],
            "–ì—Ä–µ—Ü–∏—è": ["BLUE", "AEGEAN", "OLYMPIA", "MEDITERRANEAN"],
            "–ö–∏–ø—Ä": ["VENUS", "APHRODITE", "CRYSTAL", "SUNSHINE"]
        }
        
        country_prefixes = prefixes.get(country_name, ["RESORT", "HOTEL", "PALACE"])
        prefix = country_prefixes[index % len(country_prefixes)]
        
        return f"{prefix} {country_name.upper()} RESORT"
    
    def _get_popular_resort(self, country_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞"""
        resorts = {
            "–ï–≥–∏–ø–µ—Ç": "–•—É—Ä–≥–∞–¥–∞",
            "–¢—É—Ä—Ü–∏—è": "–ê–Ω—Ç–∞–ª—å—è", 
            "–¢–∞–∏–ª–∞–Ω–¥": "–ü—Ö—É–∫–µ—Ç",
            "–û–ê–≠": "–î—É–±–∞–π",
            "–ì—Ä–µ—Ü–∏—è": "–ö—Ä–∏—Ç",
            "–ö–∏–ø—Ä": "–ü–∞—Ñ–æ—Å"
        }
        return resorts.get(country_name, f"–ö—É—Ä–æ—Ä—Ç {country_name}")
    
    def _get_realistic_meal(self, stars: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏"""
        if stars >= 5:
            return random.choice(["All Inclusive", "Ultra All Inclusive"])
        elif stars >= 4:
            return random.choice(["All Inclusive", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", "–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω"])
        else:
            return random.choice(["–ó–∞–≤—Ç—Ä–∞–∫–∏", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", "All Inclusive"])
    
    def _get_country_color(self, index: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã"""
        colors = ["4a90e2", "e74c3c", "2ecc71", "f39c12", "9b59b6", "1abc9c"]
        return colors[index % len(colors)]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def update_random_tours():
    """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
    service = RandomToursService()
    
    # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await service.update_random_tours()
    
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (24 —á–∞—Å–∞)
            logger.info("üò¥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞...")
            await asyncio.sleep(86400)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã
            await service.update_random_tours()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(3600)