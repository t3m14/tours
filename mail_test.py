#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞—è–≤–æ–∫
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
API_URL = f"{BASE_URL}/api/v1/applications"

def test_create_application():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    test_data = {
        "type": "–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
        "phone": "+7 (900) 123-45-67",
        "email": "test@example.com",
        "nearest_office": "–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è 1",
        "communication_time": "—Å 10:00 –¥–æ 18:00",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–∞ –≤ –¢—É—Ä—Ü–∏—é"
    }
    
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏...")
    print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(test_data, ensure_ascii=False, indent=2)}")
    
    try:
        response = requests.post(
            f"{API_URL}/submit",
            json=test_data,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üìù –û—Ç–≤–µ—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            return result.get("application_id")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def test_get_application(app_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    if not app_id:
        print("‚ö†Ô∏è –ù–µ—Ç ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {app_id}...")
    
    try:
        response = requests.get(f"{API_URL}/{app_id}")
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(result, ensure_ascii=False, indent=2)}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

def test_get_all_applications():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫...")
    
    try:
        response = requests.get(f"{API_URL}/")
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞—è–≤–æ–∫")
            
            if result:
                print("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:")
                for app in result[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    print(f"  - {app['id']}: {app['name']} ({app['type']}) - {app['created_at']}")
            else:
                print("üìù –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫!")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")

def test_update_status(app_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    if not app_id:
        print("‚ö†Ô∏è –ù–µ—Ç ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {app_id}...")
    
    try:
        response = requests.patch(
            f"{API_URL}/{app_id}/status",
            params={"status": "processed"}
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            print(f"üìù –û—Ç–≤–µ—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ó–ê–Ø–í–û–ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    app_id = test_create_application()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID
    test_get_application(app_id)
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
    test_get_all_applications()
    
    # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    test_update_status(app_id)
    
    print("\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 50)

if __name__ == "__main__":
    main()