# app/api/v1/random_tours_cache.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° HOTELTYPES

from fastapi import APIRouter, HTTPException, BackgroundTasks
from typing import Dict, Any, List
from datetime import datetime

from app.tasks.random_tours_cache_update import random_tours_cache_update_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter(prefix="/random-tours/cache", tags=["Random Tours Cache Management"])

@router.get("/hotel-types")
async def get_supported_hotel_types() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π —Å –∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–º –Ω–∞ API TourVisor.
    """
    try:
        logger.info("üè® –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π")
        
        hotel_types_info = random_tours_cache_update_service.get_supported_hotel_types()
        
        return {
            "success": True,
            "message": "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π",
            **hotel_types_info
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π: {str(e)}"
        )

@router.get("/status")
async def get_random_tours_cache_status() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
    - –¢–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    - –í—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–∞—Ö –æ—Ç–µ–ª–µ–π
    - API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TourVisor
    """
    try:
        logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        status = await random_tours_cache_update_service.get_update_status()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        current_time = datetime.now()
        status["current_time"] = current_time
        status["scheduler_info"] = {
            "update_interval_hours": random_tours_cache_update_service.update_interval / 3600,
            "tours_per_type": random_tours_cache_update_service.tours_per_type,
            "strategies": random_tours_cache_update_service.generation_strategies,
            "countries": random_tours_cache_update_service.countries_to_update,
            "hotel_types_count": len(random_tours_cache_update_service.hotel_types_mapping)
        }
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )

@router.post("/force-update")
async def force_random_tours_cache_update(background_tasks: BackgroundTasks) -> Dict[str, Any]:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ hoteltypes –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    try:
        logger.info("üöÄ API –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        status = await random_tours_cache_update_service.get_update_status()
        
        if status.get("is_running") and status.get("current_hotel_type"):
            return {
                "success": False,
                "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                "current_hotel_type": status.get("current_hotel_type"),
                "supported_hotel_types": status.get("hotel_types_supported", []),
                "current_status": status
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(random_tours_cache_update_service.force_update_now)
        
        return {
            "success": True,
            "message": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            "hotel_types_to_update": list(random_tours_cache_update_service.hotel_types_mapping.keys()),
            "api_integration": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è hoteltypes API TourVisor",
            "estimated_duration": "10-20 –º–∏–Ω—É—Ç",
            "note": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GET /status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
            "started_at": datetime.now()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
        )

@router.get("/stats")
async def get_random_tours_cache_stats() -> Dict[str, Any]:
    """
    –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏,
    –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É –æ—Ç–µ–ª—è –∏ API –≤—ã–∑–æ–≤–∞–º.
    """
    try:
        logger.info("üìà –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        status = await random_tours_cache_update_service.get_update_status()
        update_stats = status.get("update_stats")
        
        if not update_stats:
            return {
                "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ",
                "recommendation": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /force-update",
                "supported_hotel_types": list(random_tours_cache_update_service.hotel_types_mapping.keys())
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π
        hotel_types_details = update_stats.get("hotel_types_details", {})
        
        # –¢–æ–ø —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–æ–≤
        top_hotel_types = sorted(
            [(hotel_type, data) for hotel_type, data in hotel_types_details.items() if data.get("success")],
            key=lambda x: x[1].get("tours_count", 0),
            reverse=True
        )
        
        # –¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        failed_hotel_types = [
            hotel_type for hotel_type, data in hotel_types_details.items() 
            if not data.get("success")
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        strategies_used = update_stats.get("strategies_used", {})
        
        # API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        api_calls_total = update_stats.get("api_calls_made", 0)
        real_api_tours = update_stats.get("real_api_tours", 0)
        mock_tours = update_stats.get("mock_tours", 0)
        
        return {
            "last_update": update_stats.get("end_time"),
            "execution_summary": {
                "total_hotel_types": update_stats.get("total_hotel_types", 0),
                "successful_hotel_types": update_stats.get("successful_types", 0),
                "failed_hotel_types": update_stats.get("failed_types", 0),
                "success_rate": f"{update_stats.get('success_rate', 0):.1f}%",
                "total_tours_generated": update_stats.get("total_tours_generated", 0),
                "execution_time": f"{update_stats.get('execution_time_seconds', 0):.1f} —Å–µ–∫"
            },
            "api_integration_stats": {
                "total_api_calls": api_calls_total,
                "real_api_tours": real_api_tours,
                "mock_tours": mock_tours,
                "api_success_rate": f"{(real_api_tours/(real_api_tours+mock_tours)*100):.1f}%" if (real_api_tours+mock_tours) > 0 else "0%",
                "hoteltypes_filter_used": True
            },
            "quality_summary": {
                "real_tours_percentage": f"{update_stats.get('real_tours_percentage', 0):.1f}%",
                "total_real_tours": real_api_tours,
                "total_mock_tours": mock_tours
            },
            "strategies_breakdown": {
                "strategies_used": strategies_used,
                "most_successful_strategy": max(strategies_used.items(), key=lambda x: x[1])[0] if strategies_used else None
            },
            "top_hotel_types": [
                {
                    "hotel_type": hotel_type,
                    "tours_count": data.get("tours_count", 0),
                    "execution_time": f"{data.get('execution_time_seconds', 0):.1f}s",
                    "quality": data.get("quality_stats", {}).get("real_tours_percentage", "0%"),
                    "api_param": data.get("hotel_type_api_param"),
                    "api_calls": data.get("api_calls_made", 0)
                }
                for hotel_type, data in top_hotel_types
            ],
            "failed_hotel_types": failed_hotel_types,
            "hotel_types_details": hotel_types_details
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.get("/health")
async def get_random_tours_cache_health() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π,
    –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        health_info = await random_tours_cache_update_service.get_cache_health()
        
        return health_info
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}"
        )

@router.delete("/clear")
async def clear_random_tours_cache() -> Dict[str, Any]:
    """
    –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π.
    """
    try:
        logger.info("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        result = await random_tours_cache_update_service.clear_all_cache()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}"
        )

@router.post("/scheduler/start")
async def start_random_tours_scheduler(background_tasks: BackgroundTasks) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,
    –∏—Å–ø–æ–ª—å–∑—É—è API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π.
    """
    try:
        logger.info("‚ñ∂Ô∏è API –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        if random_tours_cache_update_service.is_running:
            return {
                "success": False,
                "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
                "status": "running",
                "supported_hotel_types": list(random_tours_cache_update_service.hotel_types_mapping.keys())
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(random_tours_cache_update_service.start_scheduler)
        
        return {
            "success": True,
            "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω",
            "schedule": "–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤",
            "hotel_types_supported": list(random_tours_cache_update_service.hotel_types_mapping.keys()),
            "api_integration": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TourVisor hoteltypes —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è",
            "started_at": datetime.now()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}"
        )

@router.post("/scheduler/stop")
async def stop_random_tours_scheduler() -> Dict[str, Any]:
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        logger.info("‚èπÔ∏è API –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        if not random_tours_cache_update_service.is_running:
            return {
                "success": False,
                "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "status": "stopped"
            }
        
        await random_tours_cache_update_service.stop_scheduler()
        
        return {
            "success": True,
            "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "stopped_at": datetime.now()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}"
        )

@router.post("/generate/{hotel_type}")
async def generate_tours_for_hotel_type(
    hotel_type: str,
    background_tasks: BackgroundTasks,
    count: int = 8
) -> Dict[str, Any]:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
    
    Args:
        hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8)
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π:
    - –ª—é–±–æ–π: –ª—é–±—ã–µ –æ—Ç–µ–ª–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    - –∞–∫—Ç–∏–≤–Ω—ã–π: active –æ—Ç–µ–ª–∏ (hoteltypes=active)
    - —Ä–µ–ª–∞–∫—Å: relax –æ—Ç–µ–ª–∏ (hoteltypes=relax)
    - —Å–µ–º–µ–π–Ω—ã–π: family –æ—Ç–µ–ª–∏ (hoteltypes=family)
    - –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π: health –æ—Ç–µ–ª–∏ (hoteltypes=health)
    - –≥–æ—Ä–æ–¥—Å–∫–æ–π: city –æ—Ç–µ–ª–∏ (hoteltypes=city)
    - –ø–ª—è–∂–Ω—ã–π: beach –æ—Ç–µ–ª–∏ (hoteltypes=beach)
    - –¥–µ–ª—é–∫—Å: deluxe –æ—Ç–µ–ª–∏ (hoteltypes=deluxe)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        supported_types = random_tours_cache_update_service.hotel_types_mapping
        
        if hotel_type not in supported_types:
            available_types = list(supported_types.keys())
            raise HTTPException(
                status_code=400,
                detail={
                    "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–µ–ª—è: {hotel_type}",
                    "available_types": available_types,
                    "api_mapping": {
                        key: {
                            "display_name": info["display_name"],
                            "api_param": info["api_param"]
                        }
                        for key, info in supported_types.items()
                    }
                }
            )
        
        hotel_type_info = supported_types[hotel_type]
        display_name = hotel_type_info["display_name"]
        api_param = hotel_type_info["api_param"]
        
        logger.info(f"üé≤ API –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {count} —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞: {display_name} (API: {api_param})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        async def generate_specific_tours():
            try:
                result = await random_tours_cache_update_service._update_tours_for_hotel_type(hotel_type, hotel_type_info)
                logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {display_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {display_name}: {e}")
        
        background_tasks.add_task(generate_specific_tours)
        
        return {
            "success": True,
            "message": f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{display_name}' –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            "hotel_type": {
                "key": hotel_type,
                "display_name": display_name,
                "api_param": api_param,
                "api_integration": f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä hoteltypes={api_param}" if api_param else "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ API"
            },
            "count": count,
            "estimated_duration": "3-8 –º–∏–Ω—É—Ç",
            "api_calls_expected": "2-5 –≤—ã–∑–æ–≤–æ–≤ TourVisor API",
            "started_at": datetime.now()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@router.get("/preview/{hotel_type}")
async def preview_cached_tours(hotel_type: str, limit: int = 3) -> Dict[str, Any]:
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
    
    Args:
        hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        supported_types = random_tours_cache_update_service.hotel_types_mapping
        
        if hotel_type not in supported_types:
            raise HTTPException(
                status_code=400,
                detail={
                    "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–µ–ª—è: {hotel_type}",
                    "available_types": list(supported_types.keys())
                }
            )
        
        hotel_type_info = supported_types[hotel_type]
        display_name = hotel_type_info["display_name"]
        cache_key_suffix = hotel_type_info["cache_key"]
        api_param = hotel_type_info["api_param"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
        from app.services.cache_service import cache_service
        cache_key = f"random_tours_{cache_key_suffix.replace(' ', '_')}"
        cached_tours = await cache_service.get(cache_key)
        
        if not cached_tours:
            return {
                "success": False,
                "message": f"–ù–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{display_name}'",
                "hotel_type": {
                    "key": hotel_type,
                    "display_name": display_name,
                    "api_param": api_param
                },
                "recommendation": f"–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: POST /generate/{hotel_type}",
                "cache_key": cache_key
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        real_tours = len([t for t in cached_tours if t.get("generation_strategy") in ["search", "hot_tours"]])
        mock_tours = len(cached_tours) - real_tours
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = {}
        for tour in cached_tours:
            source = tour.get("search_source", "unknown")
            source_stats[source] = source_stats.get(source, 0) + 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ limit —Ç—É—Ä–æ–≤
        preview_tours = cached_tours[:limit]
        
        # –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–∞—Ö
        enriched_tours = []
        for tour in preview_tours:
            enriched_tour = {
                **tour,
                "api_filter_used": api_param,
                "hotel_type_display": display_name
            }
            enriched_tours.append(enriched_tour)
        
        return {
            "success": True,
            "hotel_type": {
                "key": hotel_type,
                "display_name": display_name,
                "api_param": api_param,
                "api_integration": f"–§–∏–ª—å—Ç—Ä hoteltypes={api_param}" if api_param else "–ë–µ–∑ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
            },
            "total_cached": len(cached_tours),
            "showing": len(preview_tours),
            "quality_stats": {
                "real_tours": real_tours,
                "mock_tours": mock_tours,
                "real_percentage": f"{(real_tours/len(cached_tours)*100):.1f}%"
            },
            "source_breakdown": source_stats,
            "preview_tours": enriched_tours,
            "cache_info": {
                "cache_key": cache_key,
                "last_updated": cached_tours[0].get("cached_at") if cached_tours else None
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è {hotel_type}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}"
        )

@router.get("/compare-strategies/{hotel_type}")
async def compare_generation_strategies(hotel_type: str) -> Dict[str, Any]:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (search, hot_tours, mock)
    –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–µ–ª—è.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        supported_types = random_tours_cache_update_service.hotel_types_mapping
        
        if hotel_type not in supported_types:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–µ–ª—è: {hotel_type}"
            )
        
        hotel_type_info = supported_types[hotel_type]
        display_name = hotel_type_info["display_name"]
        cache_key_suffix = hotel_type_info["cache_key"]
        api_param = hotel_type_info["api_param"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã
        from app.services.cache_service import cache_service
        cache_key = f"random_tours_{cache_key_suffix.replace(' ', '_')}"
        cached_tours = await cache_service.get(cache_key)
        
        if not cached_tours:
            return {
                "success": False,
                "message": f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–∞ '{display_name}'",
                "recommendation": f"–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: POST /generate/{hotel_type}"
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_analysis = {}
        
        for tour in cached_tours:
            strategy = tour.get("generation_strategy", "unknown")
            source = tour.get("search_source", "unknown")
            
            if strategy not in strategy_analysis:
                strategy_analysis[strategy] = {
                    "count": 0,
                    "avg_price": 0,
                    "sources": {},
                    "sample_tour": None
                }
            
            strategy_analysis[strategy]["count"] += 1
            strategy_analysis[strategy]["avg_price"] += tour.get("price", 0)
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if source not in strategy_analysis[strategy]["sources"]:
                strategy_analysis[strategy]["sources"][source] = 0
            strategy_analysis[strategy]["sources"][source] += 1
            
            # –ü—Ä–∏–º–µ—Ä —Ç—É—Ä–∞
            if not strategy_analysis[strategy]["sample_tour"]:
                strategy_analysis[strategy]["sample_tour"] = {
                    "hotel_name": tour.get("hotel_name"),
                    "price": tour.get("price"),
                    "region_name": tour.get("region_name")
                }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        for strategy in strategy_analysis:
            if strategy_analysis[strategy]["count"] > 0:
                strategy_analysis[strategy]["avg_price"] = int(
                    strategy_analysis[strategy]["avg_price"] / strategy_analysis[strategy]["count"]
                )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        recommendations = []
        
        search_count = strategy_analysis.get("search", {}).get("count", 0)
        hot_tours_count = strategy_analysis.get("hot_tours", {}).get("count", 0)
        mock_count = strategy_analysis.get("mock", {}).get("count", 0)
        
        total = search_count + hot_tours_count + mock_count
        
        if total > 0:
            real_percentage = ((search_count + hot_tours_count) / total) * 100
            
            if real_percentage < 50:
                recommendations.append("–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            
            if search_count == 0 and api_param:
                recommendations.append(f"API —Ñ–∏–ª—å—Ç—Ä hoteltypes={api_param} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ, –º–∞–ª–æ –æ—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞")
            
            if hot_tours_count == 0:
                recommendations.append("–ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã")
        
        return {
            "success": True,
            "hotel_type": {
                "key": hotel_type,
                "display_name": display_name,
                "api_param": api_param
            },
            "total_tours_analyzed": len(cached_tours),
            "strategy_breakdown": strategy_analysis,
            "effectiveness_summary": {
                "real_tours_percentage": f"{((search_count + hot_tours_count) / total * 100):.1f}%" if total > 0 else "0%",
                "most_effective_strategy": max(strategy_analysis.items(), key=lambda x: x[1]["count"])[0] if strategy_analysis else None,
                "api_filter_effectiveness": f"hoteltypes={api_param} –¥–∞–ª {search_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" if api_param else "API —Ñ–∏–ª—å—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
            },
            "recommendations": recommendations
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è {hotel_type}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}"
        )# app/api/v1/random_tours_cache.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø PREVIEW ENDPOINT

@router.get("/preview/{hotel_type}")
async def preview_cached_tours(hotel_type: str, limit: int = 3) -> Dict[str, Any]:
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–µ–ª—è
    
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—è hoteldescriptions –∏ tours –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –ø–æ–∏—Å–∫–µ
    
    Args:
        hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è (any, active, relax, family, health, city, beach, deluxe)
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
        
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –æ—Ç–µ–ª—è –∏ preview —Ç—É—Ä–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        supported_types = random_tours_cache_update_service.get_supported_hotel_types()["hotel_types"]
        
        if hotel_type not in supported_types:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–µ–ª—è: {hotel_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {list(supported_types.keys())}"
            )
        
        hotel_type_info = supported_types[hotel_type]
        display_name = hotel_type_info["display_name"]
        cache_key_suffix = hotel_type_info["cache_key"]
        
        logger.info(f"üé≠ Preview –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–µ–ª—è: {display_name} (–ª–∏–º–∏—Ç: {limit})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä—ã –∏–∑ –∫—ç—à–∞
        cache_key = f"random_tours_{cache_key_suffix}"
        cached_tours = await cache_service.get(cache_key)
        
        if not cached_tours:
            return {
                "success": False,
                "message": f"–ù–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{display_name}'",
                "hotel_type": {
                    "key": hotel_type,
                    "display_name": display_name,
                    "api_param": hotel_type_info["api_param"]
                },
                "preview_tours": [],
                "total_cached": 0,
                "recommendation": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—É—Ä–æ–≤: POST /api/v1/random-tours/cache/generate/{hotel_type}",
                "cache_key": cache_key,
                "enhanced_features": {
                    "includes_descriptions": False,
                    "includes_tours_data": False
                }
            }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –¥–ª—è preview
        preview_tours = cached_tours[:limit]
        
        # –û–±–æ–≥–∞—â–∞–µ–º —Ç—É—Ä—ã –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –æ–±–æ–≥–∞—â–µ–Ω—ã
        enriched_tours = []
        for tour in preview_tours:
            enriched_tour = await _enrich_preview_tour(tour)
            enriched_tours.append(enriched_tour)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫—ç—à–∞
        total_tours = len(cached_tours)
        real_tours_count = len([t for t in cached_tours if t.get("generation_strategy") in ["search", "hot_tours"]])
        mock_tours_count = total_tours - real_tours_count
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        has_descriptions = any(t.get("hoteldescriptions") for t in cached_tours)
        has_tours_data = any(t.get("tours") for t in cached_tours)
        
        return {
            "success": True,
            "message": f"–ù–∞–π–¥–µ–Ω–æ {total_tours} —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{display_name}'",
            "hotel_type": {
                "key": hotel_type,
                "display_name": display_name,
                "api_param": hotel_type_info["api_param"],
                "cache_key": cache_key_suffix
            },
            "preview_tours": enriched_tours,
            "total_cached": total_tours,
            "cache_stats": {
                "real_tours": real_tours_count,
                "mock_tours": mock_tours_count,
                "quality_percentage": f"{(real_tours_count/total_tours*100):.1f}%" if total_tours > 0 else "0%"
            },
            "enhanced_features": {
                "includes_descriptions": has_descriptions,
                "includes_tours_data": has_tours_data,
                "tourvisor_api_integration": hotel_type_info["api_param"] is not None
            },
            "api_integration": {
                "uses_hoteltypes_filter": hotel_type_info["api_param"] is not None,
                "api_parameter": hotel_type_info["api_param"]
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ preview —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ preview: {str(e)}"
        )


async def _enrich_preview_tour(tour: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ç—É—Ä–∞ –¥–ª—è preview —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º hoteldescriptions –∏ tours
    
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –æ–±—ã—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É —Ç—É—Ä–æ–≤
    """
    try:
        from app.core.tourvisor_client import tourvisor_client
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç—É—Ä–∞ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        enriched_tour = tour.copy()
        
        # –ë–õ–û–ö 1: –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–¢–ï–õ–ï
        hotel_info = {
            "hotelcode": tour.get("hotelcode", ""),
            "hotelname": tour.get("hotel_name", ""),
            "hotelstars": tour.get("hotel_stars", 0),
            "hotelrating": tour.get("hotel_rating", 0.0),
            "countryname": tour.get("country_name", ""),
            "regionname": tour.get("region_name", ""),
            "seadistance": tour.get("seadistance", 0),
            "picturelink": tour.get("picture_link", ""),
            "fulldesclink": tour.get("fulldesclink", ""),
            "reviewlink": tour.get("reviewlink", "")
        }
        
        # –ë–õ–û–ö 2: –ü–û–õ–£–ß–ï–ù–ò–ï HOTELDESCRIPTIONS
        hotel_description = ""
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—ç—à–µ
        if tour.get("hoteldescriptions"):
            hotel_description = tour["hoteldescriptions"]
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
            hotel_code = tour.get("hotelcode")
            if hotel_code and not hotel_code.startswith("MOCK_"):
                try:
                    hotel_details = await tourvisor_client.get_hotel_info(hotel_code)
                    if hotel_details and isinstance(hotel_details, dict):
                        hotel_description = (
                            hotel_details.get("hoteldescription", "") or
                            hotel_details.get("description", "") or
                            f"–û—Ç–µ–ª—å {tour.get('hotel_name', 'Unknown Hotel')}"
                        )
                except Exception as api_error:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è {hotel_code}: {api_error}")
            
            # Fallback –æ–ø–∏—Å–∞–Ω–∏–µ
            if not hotel_description:
                stars_text = "‚≠ê" * tour.get("hotel_stars", 0)
                hotel_description = f"–û—Ç–µ–ª—å {tour.get('hotel_name', 'Unknown Hotel')} {stars_text} —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ {tour.get('region_name', '–∫—É—Ä–æ—Ä—Ç–Ω–æ–π –∑–æ–Ω–µ')}."
        
        enriched_tour["hoteldescriptions"] = hotel_description
        
        # –ë–õ–û–ö 3: –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ TOURS
        tours_data = []
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å tours –≤ –∫—ç—à–µ
        if tour.get("tours"):
            tours_data = tour["tours"]
        else:
            # –°–æ–∑–¥–∞–µ–º tours —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∞
            tour_data = {
                "operatorcode": tour.get("operator_code", ""),
                "operatorname": tour.get("operator_name", ""),
                "flydate": tour.get("fly_date", ""),
                "nights": tour.get("nights", 7),
                "price": tour.get("price", 0),
                "currency": tour.get("currency", "RUB"),
                "placement": tour.get("placement", "DBL"),
                "adults": tour.get("adults", 2),
                "children": tour.get("children", 0),
                "meal": tour.get("meal", ""),
                "mealrussian": tour.get("meal", ""),
                "tourname": tour.get("tour_name", ""),
                "tourid": tour.get("tour_id", f"preview_tour_{random.randint(1000, 9999)}")
            }
            tours_data = [tour_data]
        
        enriched_tour["tours"] = tours_data
        
        # –ë–õ–û–ö 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
        enriched_tour.update({
            # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –ø–æ–∏—Å–∫–∞
            "price": tour.get("price", 0),  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ –æ—Ç–µ–ª—é
            "countrycode": tour.get("countrycode", ""),
            "regioncode": tour.get("regioncode", ""),
            "subregioncode": tour.get("subregioncode", ""),
            
            # –§–ª–∞–≥–∏ –Ω–∞–ª–∏—á–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            "isphoto": 1 if tour.get("picture_link") else 0,
            "iscoords": 0,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            "isdescription": 1 if hotel_description else 0,
            "isreviews": 1 if tour.get("reviewlink") else 0,
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            "preview_enhanced": True,
            "data_source": tour.get("generation_strategy", "unknown"),
            "enhanced_at": datetime.now().isoformat()
        })
        
        return enriched_tour
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è preview —Ç—É—Ä–∞: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π —Ç—É—Ä
        fallback_tour = tour.copy()
        fallback_tour.update({
            "hoteldescriptions": f"–û—Ç–µ–ª—å {tour.get('hotel_name', 'Unknown Hotel')}",
            "tours": [{
                "price": tour.get("price", 0),
                "nights": tour.get("nights", 7),
                "meal": tour.get("meal", ""),
                "placement": tour.get("placement", "DBL"),
                "tourid": f"fallback_tour_{random.randint(1000, 9999)}"
            }],
            "preview_enhanced": False,
            "fallback_used": True
        })
        
        return fallback_tour


# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô ENDPOINT –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –¢–£–†–ê
@router.get("/preview/{hotel_type}/detailed")
async def get_detailed_preview_tour(
    hotel_type: str, 
    tour_index: int = 0,
    include_api_data: bool = True
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—É—Ä–µ –∏–∑ preview
    
    Args:
        hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è
        tour_index: –ò–Ω–¥–µ–∫—Å —Ç—É—Ä–∞ –≤ –∫—ç—à–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 - –ø–µ—Ä–≤—ã–π —Ç—É—Ä)
        include_api_data: –í–∫–ª—é—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ TourVisor API
        
    Returns:
        –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        supported_types = random_tours_cache_update_service.get_supported_hotel_types()["hotel_types"]
        
        if hotel_type not in supported_types:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–µ–ª—è: {hotel_type}"
            )
        
        hotel_type_info = supported_types[hotel_type]
        cache_key_suffix = hotel_type_info["cache_key"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä—ã –∏–∑ –∫—ç—à–∞
        cache_key = f"random_tours_{cache_key_suffix}"
        cached_tours = await cache_service.get(cache_key)
        
        if not cached_tours:
            raise HTTPException(
                status_code=404,
                detail=f"–ù–µ—Ç —Ç—É—Ä–æ–≤ –≤ –∫—ç—à–µ –¥–ª—è —Ç–∏–ø–∞ {hotel_type}"
            )
        
        if tour_index >= len(cached_tours):
            raise HTTPException(
                status_code=404,
                detail=f"–¢—É—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º {tour_index} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ —Ç—É—Ä–æ–≤: {len(cached_tours)}"
            )
        
        tour = cached_tours[tour_index]
        
        # –ü–æ–ª–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Ç—É—Ä–∞
        detailed_tour = await _enrich_preview_tour(tour)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
        if include_api_data:
            hotel_code = tour.get("hotelcode")
            if hotel_code and not hotel_code.startswith("MOCK_"):
                try:
                    from app.core.tourvisor_client import tourvisor_client
                    hotel_details = await tourvisor_client.get_hotel_info(
                        hotel_code, 
                        include_reviews=True, 
                        big_images=True
                    )
                    if hotel_details:
                        detailed_tour["api_hotel_details"] = hotel_details
                except Exception as api_error:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –¥–∞–Ω–Ω—ã–µ: {api_error}")
        
        return {
            "success": True,
            "hotel_type": hotel_type_info,
            "tour_index": tour_index,
            "detailed_tour": detailed_tour,
            "structure_info": {
                "hotel_fields": ["hotelcode", "hotelname", "hotelstars", "hotelrating", "countryname", "regionname"],
                "tour_fields": ["operatorname", "flydate", "nights", "price", "meal", "placement"],
                "enhanced_fields": ["hoteldescriptions", "tours"],
                "compatibility": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ TourVisor"
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ preview: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
        )