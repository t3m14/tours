# app/tasks/mass_directions_update.py

import asyncio
from datetime import datetime, timedelta

from app.services.mass_directions_collector import mass_directions_collector
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class MassDirectionsUpdateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    
    def __init__(self):
        self.collector = mass_directions_collector
        
    async def check_and_update_directions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        try:
            logger.info("üåç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            status = await self.collector.get_collection_status()
            master_cache = status.get("master_cache", {})
            
            should_update = False
            reason = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
            if not master_cache.get("exists"):
                should_update = True
                reason = "–ö—ç—à –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
            elif master_cache.get("last_collection"):
                try:
                    collection_date = datetime.fromisoformat(master_cache["last_collection"])
                    days_old = (datetime.now() - collection_date).days
                    
                    if days_old > 30:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
                        should_update = True
                        reason = f"–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ ({days_old} –¥–Ω–µ–π)"
                except:
                    should_update = True
                    reason = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            elif master_cache.get("directions_count", 0) < 10:
                should_update = True
                reason = f"–ú–∞–ª–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ({master_cache.get('directions_count', 0)})"
            
            if should_update:
                logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                await self._perform_directions_update()
            else:
                directions_count = master_cache.get("directions_count", 0)
                logger.info(f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã ({directions_count} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
    
    async def _perform_directions_update(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            logger.info("üåç –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä
            directions = await self.collector.collect_all_directions(force_rebuild=True)
            
            if directions:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                real_photos = len([d for d in directions if not d.image_link.startswith("https://via.placeholder.com")])
                avg_price = sum(d.min_price for d in directions) / len(directions) if directions else 0
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ {real_photos}/{len(directions)}, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {avg_price:.0f}")
            else:
                logger.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def periodic_directions_update():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    service = MassDirectionsUpdateService()
    
    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å—Ç–∞—Ä—Ç)
    await asyncio.sleep(600)
    
    while True:
        try:
            await service.check_and_update_directions()
            
            # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            logger.info("üò¥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞")
            await asyncio.sleep(86400)
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 2 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(7200)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def initial_directions_collection():
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        
        service = MassDirectionsUpdateService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞
        status = await mass_directions_collector.get_collection_status()
        master_cache = status.get("master_cache", {})
        
        if not master_cache.get("exists") or master_cache.get("directions_count", 0) < 5:
            logger.info("üåç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            asyncio.create_task(service._perform_directions_update())
            
            logger.info("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
        else:
            directions_count = master_cache.get("directions_count", 0)
            logger.info(f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({directions_count} —à—Ç.), —Å–±–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —Å–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º fallback —Å–±–æ—Ä
        try:
            logger.info("üé≠ –ó–∞–ø—É—Å–∫–∞–µ–º fallback —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            fallback_directions = await mass_directions_collector._get_fallback_directions()
            
            await mass_directions_collector._save_master_directions(
                fallback_directions, 
                [{"id": i, "name": d.name} for i, d in enumerate(fallback_directions, 1)]
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(fallback_directions)} fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
        except Exception as fallback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ fallback –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fallback_error}")