# app/api/v1/tours.py - –û–ß–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

from fastapi import APIRouter, HTTPException, Query
from typing import List, Optional, Dict, Any
import asyncio
from datetime import datetime, timedelta

from app.models.tour import (
    TourSearchRequest, SearchResponse, SearchResult, SearchStatus,
    RandomTourRequest, HotTourInfo, TourActualizationRequest,
    DetailedTourInfo, HotelInfo
)
from app.services.tour_service import tour_service
from app.services.random_tours_service import random_tours_service
from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

# ========== –û–°–ù–û–í–ù–´–ï ENDPOINTS –ü–û–ò–°–ö–ê –¢–£–†–û–í ==========

@router.post("/search", response_model=SearchResponse)
async def search_tours(search_request: TourSearchRequest):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    try:
        return await tour_service.search_tours(search_request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/status", response_model=SearchStatus)
async def get_search_status(request_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_status(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/results", response_model=SearchResult)
async def get_search_results(
    request_id: str,
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    onpage: int = Query(25, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_results(request_id, page, onpage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search/{request_id}/continue")
async def continue_search(request_id: str):
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        return await tour_service.continue_search(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –°–õ–£–ß–ê–ô–ù–´–ï –¢–£–†–´ –ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ==========

@router.get("/random", response_model=List[HotTourInfo])
async def get_random_tours_get(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"),
    hotel_types: Optional[str] = Query(
        None, 
        description="–¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: active,relax,family,health,city,beach,deluxe"
    )
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ (GET –º–µ—Ç–æ–¥)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ (1-20)
    - hotel_types: —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - /api/v1/tours/random?count=8
    - /api/v1/tours/random?count=6&hotel_types=beach,relax
    - /api/v1/tours/random?count=10&hotel_types=deluxe
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        hotel_types_list = None
        if hotel_types:
            hotel_types_list = [ht.strip() for ht in hotel_types.split(",") if ht.strip()]
        
        request = RandomTourRequest(count=count, hotel_types=hotel_types_list)
        logger.info(f"üéØ GET –∑–∞–ø—Ä–æ—Å {request.count} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random", response_model=List[HotTourInfo])
async def get_random_tours_post(request: RandomTourRequest = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ (POST –º–µ—Ç–æ–¥)
    
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    {
        "count": 8,
        "hotel_types": ["beach", "relax", "deluxe"]
    }
    """
    try:
        if request is None:
            request = RandomTourRequest()
        
        logger.info(f"üéØ POST –∑–∞–ø—Ä–æ—Å {request.count} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/generate", response_model=List[HotTourInfo])
async def generate_random_tours(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"),
    hotel_types: Optional[str] = Query(
        None,
        description="–¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: active,relax,family,health,city,beach,deluxe"
    )
):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    
    –≠—Ç–æ—Ç endpoint –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ç—É—Ä—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        hotel_types_list = None
        if hotel_types:
            hotel_types_list = [ht.strip() for ht in hotel_types.split(",") if ht.strip()]
        
        request = RandomTourRequest(count=count, hotel_types=hotel_types_list)
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {request.count} —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service._generate_fully_random_tours(request)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –¢–£–†–û–í ==========

@router.post("/actualize", response_model=DetailedTourInfo)
async def actualize_tour(request: TourActualizationRequest):
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–π—Å–æ–≤
    """
    try:
        return await tour_service.actualize_tour(request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/tour/{tour_id}", response_model=DetailedTourInfo)
async def get_tour_by_id(tour_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ –ø–æ –µ–≥–æ ID
    """
    try:
        result = await tour_service.search_tour_by_id(tour_id)
        if not result:
            raise HTTPException(status_code=404, detail="–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return result
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search-by-hotel", response_model=List[HotelInfo])
async def search_tours_by_hotel(
    hotel_name: str = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"),
    country_code: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")
):
    """
    –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è
    """
    try:
        return await tour_service.search_tours_by_hotel_name(hotel_name, country_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –æ—Ç–µ–ª—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –û–¢–õ–ê–î–û–ß–ù–´–ï ENDPOINTS ==========

@router.post("/debug-raw-actualize")
async def debug_raw_actualize(request: TourActualizationRequest):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Pydantic
    """
    try:
        logger.info(f"üêõ RAW DEBUG: –ó–∞–ø—Ä–æ—Å —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∞ {request.tour_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç TourVisor
        basic_info = await tourvisor_client.actualize_tour(
            request.tour_id,
            request.request_check
        )
        
        detailed_info = await tourvisor_client.get_detailed_actualization(
            request.tour_id
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        response = {
            "tour_id": request.tour_id,
            "basic_info": basic_info,
            "detailed_info": detailed_info,
            "basic_info_type": str(type(basic_info)),
            "detailed_info_type": str(type(detailed_info)),
            "basic_keys": list(basic_info.keys()) if isinstance(basic_info, dict) else "not dict",
            "detailed_keys": list(detailed_info.keys()) if isinstance(detailed_info, dict) else "not dict"
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å flights, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if isinstance(detailed_info, dict) and "flights" in detailed_info:
            flights = detailed_info["flights"]
            response["flights_analysis"] = {
                "flights_type": str(type(flights)),
                "flights_count": len(flights) if isinstance(flights, list) else "not list",
                "first_flight_structure": {}
            }
            
            if isinstance(flights, list) and len(flights) > 0:
                first_flight = flights[0]
                response["flights_analysis"]["first_flight_structure"] = {
                    "type": str(type(first_flight)),
                    "keys": list(first_flight.keys()) if isinstance(first_flight, dict) else "not dict"
                }
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É forward/backward
                if isinstance(first_flight, dict):
                    for direction in ["forward", "backward"]:
                        if direction in first_flight:
                            segments = first_flight[direction]
                            response["flights_analysis"][f"{direction}_analysis"] = {
                                "type": str(type(segments)),
                                "count": len(segments) if isinstance(segments, list) else "not list"
                            }
                            
                            if isinstance(segments, list) and len(segments) > 0:
                                first_segment = segments[0]
                                response["flights_analysis"][f"{direction}_segment_structure"] = {
                                    "type": str(type(first_segment)),
                                    "keys": list(first_segment.keys()) if isinstance(first_segment, dict) else "not dict"
                                }
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º departure/arrival
                                if isinstance(first_segment, dict):
                                    for point in ["departure", "arrival"]:
                                        if point in first_segment:
                                            point_data = first_segment[point]
                                            response["flights_analysis"][f"{direction}_{point}_structure"] = {
                                                "type": str(type(point_data)),
                                                "keys": list(point_data.keys()) if isinstance(point_data, dict) else "not dict"
                                            }
                                            
                                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º port
                                            if isinstance(point_data, dict) and "port" in point_data:
                                                port_data = point_data["port"]
                                                response["flights_analysis"][f"{direction}_{point}_port"] = {
                                                    "type": str(type(port_data)),
                                                    "value": port_data,
                                                    "keys": list(port_data.keys()) if isinstance(port_data, dict) else "not dict"
                                                }
        
        return response
        
    except Exception as e:
        logger.error(f"üêõ RAW DEBUG ERROR: {e}")
        return {
            "error": str(e),
            "error_type": str(type(e)),
            "tour_id": request.tour_id
        }

@router.get("/test-random-search")
async def test_random_search():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        test_request = RandomTourRequest(count=3)
        result = await random_tours_service.get_random_tours(test_request)
        
        return {
            "success": True,
            "tours_generated": len(result),
            "sample_tours": [
                {
                    "hotel_name": tour.hotelname,
                    "country": tour.countryname,
                    "price": tour.price,
                    "operator": tour.operatorname
                }
                for tour in result[:3]
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/test-api-connection")
async def test_api_connection():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        countries_data = await tourvisor_client.get_references("country")
        regions_data = await tourvisor_client.get_references("region", regcountry=1)
        
        return {
            "success": True,
            "message": "API TourVisor —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "countries_response": {
                "keys": list(countries_data.keys()) if countries_data else [],
                "sample_data": str(countries_data)[:500] if countries_data else "No data",
                "type": type(countries_data).__name__
            },
            "regions_response": {
                "keys": list(regions_data.keys()) if regions_data else [],
                "sample_data": str(regions_data)[:500] if regions_data else "No data", 
                "type": type(regions_data).__name__
            }
        }
        
    except Exception as e:
        return {"error": str(e)}