# app/services/specific_tour_service.py

import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.models.tour import FoundTourInfo, SpecificTourSearchRequest
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class SpecificTourService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    
    def __init__(self):
        self.cache = cache_service
    
    async def find_specific_tour(self, search_request: SpecificTourSearchRequest) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å hotel_info –∏ tours"""
        try:
            logger.info(f"üîé –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
            tour = await self._execute_tour_search(search_request)
            
            if tour:
                logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω")
                return tour
            
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º fallback
            logger.info(f"üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º fallback")
            tour = await self._execute_fallback_search(search_request)
            
            if tour:
                logger.info(f"‚úÖ Fallback –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω")
                return tour
            else:
                raise ValueError("–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞: {e}")
            raise

    async def find_single_tour(self, search_request: SpecificTourSearchRequest) -> FoundTourInfo:
        """–ü–æ–∏—Å–∫ –û–î–ù–û–ì–û –ª—É—á—à–µ–≥–æ —Ç—É—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FoundTourInfo"""
        try:
            logger.info(f"üéØ –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –ª—É—á—à–µ–≥–æ —Ç—É—Ä–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–µ–ª—å —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–∞–º–∏
            hotel_with_tours = await self.find_specific_tour(search_request)
            
            if not hotel_with_tours or not hotel_with_tours.get('tours'):
                raise ValueError("–¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ç—É—Ä (–ø–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
            best_tour = hotel_with_tours['tours'][0]
            hotel_info = hotel_with_tours['hotel_info']
            
            logger.info(f"üéØ –°–æ–∑–¥–∞–µ–º FoundTourInfo –∏–∑ –æ—Ç–µ–ª—è: {hotel_info.get('hotel_name', 'Unknown')}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FoundTourInfo —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            found_tour_info = FoundTourInfo(
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
                hotel_name=hotel_info.get('hotel_name') or '',
                hotel_stars=hotel_info.get('hotel_stars') or 0,
                country_name=hotel_info.get('country_name') or '',
                region_name=hotel_info.get('region_name') or '',
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
                operator_name=best_tour.get('operator_name') or '',
                fly_date=best_tour.get('fly_date') or '',
                nights=best_tour.get('nights') or search_request.nights or 7,
                price=best_tour.get('price') or 0.0,
                meal=best_tour.get('meal') or '',
                room_type=best_tour.get('room_type') or '',
                adults=best_tour.get('adults') or search_request.adults,
                children=best_tour.get('children') or search_request.children,
                currency=best_tour.get('currency') or 'RUB',
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–µ–ª—è
                hotel_id=hotel_info.get('hotel_id'),
                hotel_rating=hotel_info.get('hotel_rating'),
                hotel_description=hotel_info.get('hotel_description'),
                hotel_picture=hotel_info.get('hotel_picture'),
                sea_distance=hotel_info.get('sea_distance'),
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç—É—Ä–∞
                tour_id=best_tour.get('tour_id'),
                fuel_charge=best_tour.get('fuel_charge'),
                tour_link=best_tour.get('tour_link'),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                is_regular=best_tour.get('is_regular', False),
                is_promo=best_tour.get('is_promo', False),
                is_on_request=best_tour.get('is_on_request', False),
                search_results_count=hotel_with_tours.get('search_results_count', 1),
                hotels_found=hotel_with_tours.get('hotels_found', 1),
                is_fallback=hotel_with_tours.get('is_fallback', False),
                fallback_strategy=hotel_with_tours.get('fallback_strategy')
            )
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω FoundTourInfo –¥–ª—è –æ—Ç–µ–ª—è: {found_tour_info.hotel_name}")
            return found_tour_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FoundTourInfo: {e}")
            raise

    async def find_tour_by_hotel_name(self, hotel_name: str, departure: int, country: int, 
                                nights: int = 7, adults: int = 2, children: int = 0) -> FoundTourInfo:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è"""
        logger.info(f"üè® –ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –æ—Ç–µ–ª—é '{hotel_name}' –≤ —Å—Ç—Ä–∞–Ω–µ {country}")
        
        search_request = SpecificTourSearchRequest(
            departure=departure,
            country=country,
            hotel_name=hotel_name,
            nights=nights,
            adults=adults,
            children=children
        )
        
        return await self.find_single_tour(search_request)

    async def find_tour_by_criteria(self, departure: int, country: int, hotel_stars: int,
                                  meal_type: int, max_price: Optional[int] = None,
                                  nights: int = 7, adults: int = 2) -> FoundTourInfo:
        """–ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FoundTourInfo"""
        search_request = SpecificTourSearchRequest(
            departure=departure,
            country=country,
            hotel_stars=hotel_stars,
            meal_type=meal_type,
            max_price=max_price,
            nights=nights,
            adults=adults
        )
        return await self.find_single_tour(search_request)

    def get_search_suggestions(self, search_request: SpecificTourSearchRequest) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
        suggestions = []
        
        if search_request.hotel_stars and search_request.hotel_stars > 3:
            suggestions.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –∑–≤–µ–∑–¥–Ω–æ—Å—Ç—å –¥–æ {search_request.hotel_stars - 1} –∑–≤–µ–∑–¥")
        
        if search_request.max_price and search_request.max_price < 100000:
            suggestions.append(f"–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–æ {search_request.max_price + 20000} —Ä—É–±–ª–µ–π")
        
        if search_request.meal_type and search_request.meal_type > 2:
            suggestions.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ '–ó–∞–≤—Ç—Ä–∞–∫' –∏–ª–∏ '–ë–µ–∑ –ø–∏—Ç–∞–Ω–∏—è'")
        
        if search_request.nights and search_request.nights > 7:
            suggestions.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –¥–æ {search_request.nights - 1}")
        
        if search_request.rating and search_request.rating > 4.0:
            suggestions.append("–°–Ω–∏–∑—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è")
        
        suggestions.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏")
        suggestions.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫—É—Ä–æ—Ä—Ç—ã –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ")
        
        return suggestions

    async def _execute_tour_search(self, search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞"""
        try:
            logger.info(f"üöÄ EXECUTE_TOUR_SEARCH: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫")
            
            # –°—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è TourVisor API
            search_params = self._build_search_params(search_request)
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è, –Ω–∞–π–¥–µ–º –µ–≥–æ ID
            if search_request.hotel_name and not search_request.hotel_id:
                logger.info(f"üîç –ò—â–µ–º ID –æ—Ç–µ–ª—è '{search_request.hotel_name}'")
                
                hotel_id = await self._find_hotel_id_by_name(
                    search_request.hotel_name, 
                    search_request.country
                )
                
                if hotel_id:
                    search_params["hotels"] = hotel_id
                    logger.info(f"üè® ‚úÖ –ù–∞–π–¥–µ–Ω ID –æ—Ç–µ–ª—è: {hotel_id}")
                else:
                    logger.warning(f"üè® ‚ùå –û—Ç–µ–ª—å '{search_request.hotel_name}' –ù–ï –ù–ê–ô–î–ï–ù!")
                    return None
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤ TourVisor...")
            request_id = await tourvisor_client.search_tours(search_params)
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥)
            logger.info(f"‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
            for attempt in range(15):
                await asyncio.sleep(1)
                
                try:
                    status = await tourvisor_client.get_search_status(request_id)
                    status_data = status.get("data", {}).get("status", {})
                    
                    state = status_data.get("state", "searching")
                    hotels_found = int(status_data.get("hotelsfound", 0)) if status_data.get("hotelsfound") else 0
                    
                    logger.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: state={state}, hotels={hotels_found}")
                    
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                    if state == "finished" or (hotels_found > 0 and attempt >= 3):
                        logger.info(f"üéØ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: state={state}, hotels={hotels_found}")
                        break
                        
                except Exception as status_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}: {status_error}")
                    continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"üì• –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...")
            results = await tourvisor_client.get_search_results(request_id, 1, 10)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–µ–ª—å —Å —Ç—É—Ä–∞–º–∏
            hotel_with_tours = await self._extract_hotel_with_all_tours(results, search_request)
            
            if hotel_with_tours:
                hotel_name = hotel_with_tours.get('hotel_info', {}).get('hotel_name', 'Unknown')
                tours_count = len(hotel_with_tours.get('tours', []))
                logger.info(f"‚úÖ –£—Å–ø–µ—Ö! –û—Ç–µ–ª—å: {hotel_name}, —Ç—É—Ä–æ–≤: {tours_count}")
                return hotel_with_tours
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ç–µ–ª—å —Å —Ç—É—Ä–∞–º–∏")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _execute_tour_search: {e}")
            return None

    async def _execute_fallback_search(self, search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ fallback –ø–æ–∏—Å–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è fallback –ø–æ–∏—Å–∫")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è fallback
            fallback_request = SpecificTourSearchRequest(**search_request.dict())
            
            # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            fallback_strategies = [
                {"remove": ["meal_type"], "description": "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é"},
                {"remove": ["hotel_stars"], "description": "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏"},
                {"remove": ["nights"], "description": "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ—á–µ–π"},
                {"modify": {"max_price": None}, "description": "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ü–µ–Ω–µ"},
            ]
            
            for strategy in fallback_strategies:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if "remove" in strategy:
                    for field in strategy["remove"]:
                        setattr(fallback_request, field, None)
                
                if "modify" in strategy:
                    for field, value in strategy["modify"].items():
                        setattr(fallback_request, field, value)
                
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy['description']}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = await self._execute_tour_search(fallback_request)
                
                if result:
                    result["is_fallback"] = True
                    result["fallback_strategy"] = strategy["description"]
                    logger.info(f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω: {strategy['description']}")
                    return result
            
            logger.warning("‚ùå –í—Å–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø–æ–∏—Å–∫–∞: {e}")
            return None
    
    async def _extract_hotel_with_all_tours(self, results: Dict[str, Any], 
                                          search_request: SpecificTourSearchRequest) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–∞–º–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            data = results.get("data", {})
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            if not hotel_list:
                logger.warning("‚ùå –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                return None
            
            logger.info(f"üè® –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {len(hotel_list)}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–µ–ª—å –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            best_hotel = self._select_best_hotel(hotel_list, search_request)
            
            if not best_hotel:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–µ–ª—å")
                return None
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–µ–ª—è
            tours_data = best_hotel.get("tours", {}).get("tour", [])
            
            if not isinstance(tours_data, list):
                tours_data = [tours_data] if tours_data else []
            
            logger.info(f"üé´ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–µ–ª—è: {len(tours_data)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ
            hotel_info = self._create_hotel_info(best_hotel)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤
            all_tours = []
            for tour_data in tours_data:
                tour_info = self._create_tour_info(best_hotel, tour_data)
                all_tours.append(tour_info)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä—ã –ø–æ —Ü–µ–Ω–µ
            all_tours.sort(key=lambda x: x.get("price", 0))
            
            return {
                "hotel_info": hotel_info,
                "tours": all_tours,
                "tours_count": len(all_tours),
                "search_results_count": len(hotel_list),
                "is_fallback": False,
                "fallback_strategy": None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–µ–ª—è —Å —Ç—É—Ä–∞–º–∏: {e}")
            return None
    
    def _select_best_hotel(self, hotel_list: List[Dict], search_request: SpecificTourSearchRequest) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –æ—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        if not hotel_list:
            return None
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–µ–ª—å –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏, –∏—â–µ–º –µ–≥–æ
        if search_request.hotel_id:
            for hotel in hotel_list:
                if str(hotel.get("hotelcode")) == str(search_request.hotel_id):
                    return hotel
        
        if search_request.hotel_name:
            search_name = search_request.hotel_name.lower()
            for hotel in hotel_list:
                hotel_name = hotel.get("hotelname", "").lower()
                if search_name in hotel_name:
                    return hotel
        
        # –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        scored_hotels = []
        for hotel in hotel_list:
            score = self._calculate_hotel_score(hotel, search_request)
            scored_hotels.append((score, hotel))
        
        scored_hotels.sort(key=lambda x: x[0], reverse=True)
        return scored_hotels[0][1] if scored_hotels else None
    
    def _calculate_hotel_score(self, hotel: Dict, search_request: SpecificTourSearchRequest) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–µ–ª—è"""
        score = 0.0
        
        # –ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è
        if search_request.hotel_stars:
            hotel_stars = int(hotel.get("hotelstars", 0))
            if hotel_stars == search_request.hotel_stars:
                score += 10
            elif abs(hotel_stars - search_request.hotel_stars) == 1:
                score += 5
        
        # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è
        hotel_rating = float(hotel.get("hotelrating", 0))
        if hotel_rating > 0:
            score += hotel_rating * 2
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–æ—Ä—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        sea_distance = int(hotel.get("seadistance", 1000))
        if sea_distance <= 100:
            score += 5
        elif sea_distance <= 300:
            score += 3
        elif sea_distance <= 500:
            score += 1
        
        return score
    
    def _create_hotel_info(self, hotel_data: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        return {
            "hotel_id": self._safe_string(hotel_data.get("hotelcode")),
            "hotel_name": self._safe_string(hotel_data.get("hotelname", "")),
            "hotel_stars": self._safe_int(hotel_data.get("hotelstars")) or 3,
            "hotel_rating": self._safe_float(hotel_data.get("hotelrating")),
            "hotel_description": self._safe_string(hotel_data.get("hoteldescription")),
            "hotel_picture": self._safe_string(hotel_data.get("picturelink")),
            "country_name": self._safe_string(hotel_data.get("countryname", "")),
            "region_name": self._safe_string(hotel_data.get("regionname", "")),
            "sea_distance": self._safe_int(hotel_data.get("seadistance")) or 0,
        }
    
    def _create_tour_info(self, hotel_data: Dict, tour_data: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ"""
        return {
            "tour_id": self._safe_string(tour_data.get("tourid")),
            "operator_name": self._safe_string(tour_data.get("operatorname", "")),
            "fly_date": self._safe_string(tour_data.get("flydate")),
            "nights": self._safe_int(tour_data.get("nights")) or 7,
            "price": self._safe_int(tour_data.get("price")) or 0,
            "fuel_charge": self._safe_int(tour_data.get("fuelcharge")) or 0,
            "meal": self._safe_string(tour_data.get("meal", "")),
            "room_type": self._safe_string(tour_data.get("room", "")),
            "adults": self._safe_int(tour_data.get("adults")) or 2,
            "children": self._safe_int(tour_data.get("child")) or 0,
            "tour_link": self._safe_string(tour_data.get("tourlink")),
            "currency": self._safe_string(tour_data.get("currency", "RUB")),
            "is_regular": bool(tour_data.get("regular", 0)),
            "is_promo": bool(tour_data.get("promo", 0)),
            "is_on_request": bool(tour_data.get("onrequest", 0)),
        }

    def _build_search_params(self, search_request: SpecificTourSearchRequest) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è TourVisor API"""
        
        # –ë–∞–∑–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            "departure": search_request.departure,
            "country": search_request.country,
            "adults": search_request.adults,
            "child": search_request.children,
            "format": "json"
        }
        
        # –î–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏)
        if search_request.date_from:
            params["datefrom"] = search_request.date_from
        else:
            start_date = datetime.now() + timedelta(days=3)
            params["datefrom"] = start_date.strftime("%d.%m.%Y")
        
        if search_request.date_to:
            params["dateto"] = search_request.date_to
        else:
            end_date = datetime.now() + timedelta(days=17)
            params["dateto"] = end_date.strftime("%d.%m.%Y")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
        if search_request.nights:
            params["nightsfrom"] = search_request.nights
            params["nightsto"] = search_request.nights
        else:
            params["nightsfrom"] = 7
            params["nightsto"] = 10
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if search_request.hotel_stars:
            params["stars"] = search_request.hotel_stars
            params["starsbetter"] = 1
        
        if search_request.meal_type:
            params["meal"] = search_request.meal_type
            params["mealbetter"] = 1
        
        if search_request.region_code:
            params["regions"] = search_request.region_code
        
        if search_request.min_price:
            params["pricefrom"] = search_request.min_price
        
        if search_request.max_price:
            params["priceto"] = search_request.max_price
        
        if search_request.rating:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∫–æ–¥ TourVisor
            if search_request.rating >= 4.5:
                params["rating"] = 5
            elif search_request.rating >= 4.0:
                params["rating"] = 4
            elif search_request.rating >= 3.5:
                params["rating"] = 3
            elif search_request.rating >= 3.0:
                params["rating"] = 2
            else:
                params["rating"] = 0
        
        if search_request.hotel_type:
            params["hoteltypes"] = search_request.hotel_type
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        params["pricetype"] = 0  # –¶–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
        
        return params

    async def _find_hotel_id_by_name(self, hotel_name: str, country_code: int) -> Optional[str]:
        """–ü–æ–∏—Å–∫ ID –æ—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –æ—Ç–µ–ª—è '{hotel_name}' –≤ —Å—Ç—Ä–∞–Ω–µ {country_code}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
            hotels_data = await tourvisor_client.get_references(
                "hotel",
                hotcountry=country_code
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            hotels = []
            if "lists" in hotels_data and "hotels" in hotels_data["lists"]:
                hotels_nested = hotels_data["lists"]["hotels"].get("hotel", [])
                if isinstance(hotels_nested, list):
                    hotels = hotels_nested
                elif hotels_nested:
                    hotels = [hotels_nested]
            elif "hotel" in hotels_data:
                hotels_direct = hotels_data.get("hotel", [])
                if isinstance(hotels_direct, list):
                    hotels = hotels_direct
                elif hotels_direct:
                    hotels = [hotels_direct]
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä–∞–Ω–µ {country_code}")
            
            if not hotels:
                logger.warning(f"‚ùå –ù–µ—Ç –æ—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}!")
                return None
            
            # –ò—â–µ–º –æ—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
            search_name = hotel_name.lower().strip()
            
            # –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for hotel in hotels:
                hotel_name_full = hotel.get("name", "").lower().strip()
                if search_name == hotel_name_full:
                    logger.info(f"‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {hotel.get('name')} (ID: {hotel.get('id')})")
                    return hotel.get("id")
            
            # –ó–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for hotel in hotels:
                hotel_name_full = hotel.get("name", "").lower().strip()
                if search_name in hotel_name_full:
                    logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {hotel.get('name')} (ID: {hotel.get('id')})")
                    return hotel.get("id")
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for hotel in hotels:
                hotel_name_full = hotel.get("name", "").lower().strip()
                if hotel_name_full in search_name:
                    logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {hotel.get('name')} (ID: {hotel.get('id')})")
                    return hotel.get("id")
            
            logger.warning(f"‚ùå –û—Ç–µ–ª—å '{hotel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(hotels)} –æ—Ç–µ–ª–µ–π")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª—è: {e}")
            return None

    def _safe_string(self, value: Any) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É"""
        try:
            if value is None:
                return ""
            elif isinstance(value, (dict, list, tuple)):
                return ""
            else:
                return str(value).strip()
        except (ValueError, TypeError):
            return ""

    def _safe_int(self, value: Any) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            return int(value) if value is not None and str(value).strip() else None
        except (ValueError, TypeError):
            return None
    
    def _safe_float(self, value: Any) -> Optional[float]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            return float(value) if value is not None and str(value).strip() else None
        except (ValueError, TypeError):
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
specific_tour_service = SpecificTourService()