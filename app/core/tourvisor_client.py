import aiohttp
import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import xml.etree.ElementTree as ET
import json
import re

from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class TourVisorClient:
    def __init__(self):
        self.base_url = settings.TOURVISOR_BASE_URL
        self.auth_params = {
            "authlogin": settings.TOURVISOR_AUTH_LOGIN,
            "authpass": settings.TOURVISOR_AUTH_PASS
        }
        self.session: Optional[aiohttp.ClientSession] = None
        self.request_timeout = 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def get_session(self):
        if self.session is None or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=self.request_timeout)
            self.session = aiohttp.ClientSession(timeout=timeout)
        return self.session
    
    async def close(self):
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def _make_request_with_retry(self, endpoint: str, params: Dict[str, Any], max_retries: int = 3) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        last_error = None
        
        for attempt in range(max_retries):
            try:
                return await self._make_request(endpoint, params)
            except Exception as e:
                last_error = e
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –∂–¥–µ–º {wait_time}—Å: {e}")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        
        raise last_error
    
    async def _make_request(self, endpoint: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ TourVisor API"""
        session = await self.get_session()
        full_params = {**self.auth_params, **params}
        
        try:
            url = f"{self.base_url}/{endpoint}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –ø–∞—Ä–æ–ª—è
            safe_params = {k: v for k, v in full_params.items() if k != "authpass"}
            logger.debug(f"üåê –ó–∞–ø—Ä–æ—Å –∫ TourVisor: {url}")
            logger.debug(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {safe_params}")
            
            async with session.get(url, params=full_params) as response:
                response_text = await response.text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status != 200:
                    logger.error(f"‚ùå HTTP {response.status}: {response_text[:200]}")
                    response.raise_for_status()
                
                logger.debug(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
                if "error" in response_text.lower() or "–æ—à–∏–±–∫–∞" in response_text.lower():
                    logger.warning(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {response_text[:200]}")
                
                if params.get("format") == "json":
                    try:
                        return await response.json()
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        logger.error(f"üìÑ –û—Ç–≤–µ—Ç: {response_text[:500]}")
                        raise
                else:
                    # –ü–∞—Ä—Å–∏–Ω–≥ XML
                    return self._parse_xml(response_text)
                    
        except aiohttp.ClientTimeout:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint} ({self.request_timeout}—Å)")
            raise
        except aiohttp.ClientError as e:
            logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {endpoint}: {e}")
            raise
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {endpoint}: {e}")
            if hasattr(e, 'status') and e.status == 403:
                logger.error("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TOURVISOR_AUTH_LOGIN –∏ TOURVISOR_AUTH_PASS")
            raise
    
    def _parse_xml(self, xml_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        try:
            # –û—á–∏—â–∞–µ–º XML –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            xml_content = xml_content.strip()
            if not xml_content:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π XML –æ—Ç–≤–µ—Ç")
                return {}
            
            root = ET.fromstring(xml_content)
            result = self._xml_to_dict(root)
            
            logger.debug(f"üìä XML –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(result.keys())}")
            return result
            
        except ET.ParseError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            logger.error(f"üìÑ XML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {xml_content[:500]}")
            raise
    
    def _xml_to_dict(self, element) -> Dict[str, Any]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ XML —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        result = {}
        
        # –ê—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
        if element.attrib:
            result.update(element.attrib)
        
        # –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        children = list(element)
        if children:
            child_dict = {}
            for child in children:
                child_data = self._xml_to_dict(child)
                if child.tag in child_dict:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
                    if not isinstance(child_dict[child.tag], list):
                        child_dict[child.tag] = [child_dict[child.tag]]
                    child_dict[child.tag].append(child_data)
                else:
                    child_dict[child.tag] = child_data
            result.update(child_dict)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if element.text and element.text.strip():
            if children:
                result['text'] = element.text.strip()
            else:
                return element.text.strip()
        
        return result
    
    async def search_tours(self, search_params: Dict[str, Any]) -> str:
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_params = ["departure", "country"]
        for param in required_params:
            if param not in search_params:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        default_params = {
            "format": "xml",
            "adults": 2,
            "child": 0,
            "nightsfrom": 7,
            "nightsto": 10
        }
        
        params = {**default_params, **search_params}
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = self._validate_search_params(params)
        
        session = await self.get_session()
        full_params = {**self.auth_params, **params}
        
        try:
            url = f"{self.base_url}/search.php"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            safe_params = {k: v for k, v in full_params.items() if k != "authpass"}
            logger.info(f"üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {safe_params}")
            
            async with session.get(url, params=full_params) as response:
                response_text = await response.text()
                
                logger.info(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")
                logger.info(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.debug(f"üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response_text[:500]}")
                
                if response.status != 200:
                    logger.error(f"‚ùå HTTP {response.status} –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
                    logger.error(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text}")
                    raise ValueError(f"HTTP {response.status}: {response_text}")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                analysis_result = self._analyze_search_response(response_text)
                
                if analysis_result["request_id"]:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω request_id: {analysis_result['request_id']}")
                    return analysis_result["request_id"]
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å request_id")
                    logger.error(f"üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞: {analysis_result}")
                    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å request_id: {analysis_result['error']}")
                    
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            await self._diagnose_search_failure(params, str(e))
            raise
    
    def _validate_search_params(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        validated_params = params.copy()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        if not validated_params.get("datefrom"):
            tomorrow = datetime.now() + timedelta(days=7)
            validated_params["datefrom"] = tomorrow.strftime("%d.%m.%Y")
            
        if not validated_params.get("dateto"):
            date_to = datetime.now() + timedelta(days=14)
            validated_params["dateto"] = date_to.strftime("%d.%m.%Y")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç
        try:
            date_from = datetime.strptime(validated_params["datefrom"], "%d.%m.%Y")
            date_to = datetime.strptime(validated_params["dateto"], "%d.%m.%Y")
            
            if date_from >= date_to:
                logger.warning("‚ö†Ô∏è –î–∞—Ç–∞ –æ—Ç >= –¥–∞—Ç—ã –¥–æ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º")
                validated_params["dateto"] = (date_from + timedelta(days=7)).strftime("%d.%m.%Y")
                
        except ValueError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞—Ç—ã
            validated_params["datefrom"] = (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y")
            validated_params["dateto"] = (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        int_params = ["departure", "country", "adults", "child", "nightsfrom", "nightsto"]
        for param in int_params:
            if param in validated_params:
                try:
                    value = validated_params[param]
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
                    if isinstance(value, str):
                        if value.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                            validated_params[param] = int(value.strip())
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param}, —É–¥–∞–ª—è–µ–º")
                            del validated_params[param]
                    elif isinstance(value, (int, float)):
                        validated_params[param] = int(value)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è {param}: {type(value)}")
                        del validated_params[param]
                except (ValueError, TypeError) as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {param}: {validated_params[param]} -> {e}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    del validated_params[param]
        
        logger.debug(f"‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {validated_params}")
        return validated_params
    
    def _analyze_search_response(self, response_text: str) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è request_id"""
        
        analysis = {
            "request_id": None,
            "response_type": "unknown",
            "error": None,
            "raw_length": len(response_text),
            "contains_error": False
        }
        
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            response_text = response_text.strip()
            
            if not response_text:
                analysis["error"] = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                return analysis
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            error_indicators = ["error", "–æ—à–∏–±–∫–∞", "exception", "invalid", "forbidden", "unauthorized"]
            response_lower = response_text.lower()
            
            for indicator in error_indicators:
                if indicator in response_lower:
                    analysis["contains_error"] = True
                    analysis["error"] = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏: {indicator}"
                    logger.warning(f"‚ö†Ô∏è {analysis['error']} –≤ –æ—Ç–≤–µ—Ç–µ: {response_text[:200]}")
            
            # –°–ª—É—á–∞–π 1: –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π request_id)
            if response_text.isdigit():
                analysis["request_id"] = response_text
                analysis["response_type"] = "simple_number"
                return analysis
            
            # –°–ª—É—á–∞–π 2: XML –æ—Ç–≤–µ—Ç
            if response_text.startswith('<'):
                analysis["response_type"] = "xml"
                try:
                    parsed_xml = self._parse_xml(response_text)
                    analysis["request_id"] = self._find_request_id_recursive(parsed_xml)
                    
                    if not analysis["request_id"]:
                        analysis["error"] = "request_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ XML"
                        analysis["xml_structure"] = self._describe_xml_structure(parsed_xml)
                    
                except Exception as xml_error:
                    analysis["error"] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {xml_error}"
                    analysis["xml_preview"] = response_text[:200]
                
                return analysis
            
            # –°–ª—É—á–∞–π 3: JSON –æ—Ç–≤–µ—Ç
            if response_text.startswith('{') or response_text.startswith('['):
                analysis["response_type"] = "json"
                try:
                    parsed_json = json.loads(response_text)
                    analysis["request_id"] = self._find_request_id_in_json(parsed_json)
                    
                    if not analysis["request_id"]:
                        analysis["error"] = "request_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON"
                        analysis["json_keys"] = list(parsed_json.keys()) if isinstance(parsed_json, dict) else "not_dict"
                    
                except Exception as json_error:
                    analysis["error"] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}"
                    analysis["json_preview"] = response_text[:200]
                
                return analysis
            
            # –°–ª—É—á–∞–π 4: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å request_id
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            numbers = re.findall(r'\d{8,}', response_text)  # –ò—â–µ–º –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ (8+ —Ü–∏—Ñ—Ä)
            
            if numbers:
                analysis["request_id"] = numbers[0]
                analysis["response_type"] = "text_with_numbers"
                return analysis
            
            # –°–ª—É—á–∞–π 5: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            analysis["response_type"] = "unknown_format"
            analysis["error"] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:100]}"
            
        except Exception as e:
            analysis["error"] = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}"
        
        return analysis
    
    def _find_request_id_recursive(self, data) -> Optional[str]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ request_id –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, dict):
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–ª—é—á–∞ requestid
            if "requestid" in data:
                return str(data["requestid"])
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            for value in data.values():
                result = self._find_request_id_recursive(value)
                if result:
                    return result
        
        elif isinstance(data, list):
            # –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ
            for item in data:
                result = self._find_request_id_recursive(item)
                if result:
                    return result
        
        return None
    
    def _find_request_id_in_json(self, json_data: Any) -> Optional[str]:
        """–ü–æ–∏—Å–∫ request_id –≤ JSON –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(json_data, dict):
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫
            for key in ["requestid", "request_id", "id", "searchId"]:
                if key in json_data:
                    return str(json_data[key])
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            for value in json_data.values():
                result = self._find_request_id_in_json(value)
                if result:
                    return result
        
        elif isinstance(json_data, list):
            for item in json_data:
                result = self._find_request_id_in_json(item)
                if result:
                    return result
        
        return None
    
    def _describe_xml_structure(self, parsed_xml: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            return {
                "top_level_keys": list(parsed_xml.keys()) if isinstance(parsed_xml, dict) else "not_dict",
                "type": type(parsed_xml).__name__,
                "sample_content": str(parsed_xml)[:200] if parsed_xml else "empty"
            }
        except:
            return {"error": "cannot_describe"}
    
    async def _diagnose_search_failure(self, params: Dict[str, Any], error_message: str):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        logger.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ï–£–î–ê–ß–ù–û–ì–û –ü–û–ò–°–ö–ê:")
        logger.error(f"  üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        logger.error(f"  üí• –û—à–∏–±–∫–∞: {error_message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            test_result = await self.test_connection()
            logger.error(f"  üåê –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_result}")
        except Exception as conn_error:
            logger.error(f"  üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {conn_error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        try:
            simple_ref = await self.get_references("departure")
            ref_status = "OK" if simple_ref else "Empty"
            logger.error(f"  üìö –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {ref_status}")
        except Exception as ref_error:
            logger.error(f"  üìö –û—à–∏–±–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {ref_error}")
    
    async def get_search_status(self, request_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            params = {
                "requestid": request_id,
                "type": "status",
                "format": "xml"
            }
            
            logger.debug(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ {request_id}")
            result = await self._make_request("result.php", params)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.debug(f"üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞: {result}")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            normalized_result = self._normalize_status_response(result, request_id)
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            self._diagnose_status_response(normalized_result, request_id)
            
            return normalized_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {request_id}: {e.with_traceback}")
            raise
    
    def _normalize_status_response(self, result: Dict[str, Any], request_id: str) -> Dict[str, Any]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        if "data" in result and "status" in result["data"]:
            return result
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: —Å—Ç–∞—Ç—É—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ
        if "status" in result:
            logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç–∞—Ç—É—Å –≤ –∫–æ—Ä–Ω–µ –¥–ª—è {request_id}")
            return {
                "data": {
                    "status": result["status"]
                }
            }
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏)
        status_fields = ["state", "hotelsfound", "toursfound", "minprice", "progress", "timepassed"]
        if any(field in result for field in status_fields):
            logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç–∞—Ç—É—Å –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ –¥–ª—è {request_id}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
            status_data = {}
            for field in status_fields:
                if field in result:
                    value = result[field]
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                        if field in ["hotelsfound", "toursfound", "progress", "timepassed"]:
                            # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
                            if isinstance(value, str):
                                status_data[field] = int(value) if value.strip() else 0
                            elif isinstance(value, (int, float)):
                                status_data[field] = int(value)
                            else:
                                status_data[field] = 0
                        elif field == "minprice":
                            # –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
                            if isinstance(value, str):
                                status_data[field] = float(value) if value.strip() else None
                            elif isinstance(value, (int, float)):
                                status_data[field] = float(value)
                            else:
                                status_data[field] = None
                        else:  # state
                            status_data[field] = str(value) if value is not None else ""
                    except (ValueError, TypeError) as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {field}: {value} -> {e}")
                        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if field in ["hotelsfound", "toursfound", "progress", "timepassed"]:
                            status_data[field] = 0
                        elif field == "minprice":
                            status_data[field] = None
                        else:
                            status_data[field] = ""
            
            return {
                "data": {
                    "status": status_data
                }
            }
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: XML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–≥–∞–º–∏
        # –ò—â–µ–º –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        status_data = self._extract_status_from_structure(result)
        
        if status_data:
            logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è {request_id}")
            return {
                "data": {
                    "status": status_data
                }
            }
        
        # –í–∞—Ä–∏–∞–Ω—Ç 4: —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—É—Å, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–ª—è {request_id}")
        logger.warning(f"üîç –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(result.keys())}")
        
        return {
            "data": {
                "status": {
                    "state": "searching",
                    "hotelsfound": 0,
                    "toursfound": 0,
                    "minprice": None,
                    "progress": 0,
                    "timepassed": 0
                }
            }
        }
    
    def _extract_status_from_structure(self, data: Any, path: str = "") -> Dict[str, Any]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ª—é–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        status_fields = {
            "state": str,
            "hotelsfound": int,
            "toursfound": int, 
            "minprice": float,
            "progress": int,
            "timepassed": int
        }
        
        found_data = {}
        
        if isinstance(data, dict):
            # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
            for field, field_type in status_fields.items():
                if field in data:
                    try:
                        value = data[field]
                        if field_type == int:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º
                            if isinstance(value, str):
                                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
                                if not value.strip():
                                    found_data[field] = 0
                                else:
                                    found_data[field] = int(value)
                            elif isinstance(value, (int, float)):
                                found_data[field] = int(value)
                            else:
                                found_data[field] = 0
                        elif field_type == float:
                            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è float
                            if isinstance(value, str):
                                if not value.strip():
                                    found_data[field] = None
                                else:
                                    found_data[field] = float(value)
                            elif isinstance(value, (int, float)):
                                found_data[field] = float(value)
                            else:
                                found_data[field] = None
                        else:  # str
                            found_data[field] = str(value) if value is not None else ""
                    except (ValueError, TypeError) as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {field}: {data[field]} -> {e}")
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                        if field_type == int:
                            found_data[field] = 0
                        elif field_type == float:
                            found_data[field] = None
                        else:
                            found_data[field] = ""
                        continue
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            if len(found_data) >= 2:
                logger.debug(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤ {path}: {list(found_data.keys())}")
                return found_data
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            for key, value in data.items():
                child_result = self._extract_status_from_structure(value, f"{path}.{key}")
                if child_result and len(child_result) >= 2:
                    return child_result
        
        elif isinstance(data, list):
            # –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ
            for i, item in enumerate(data):
                child_result = self._extract_status_from_structure(item, f"{path}[{i}]")
                if child_result and len(child_result) >= 2:
                    return child_result
        
        return {}
    
    def _diagnose_status_response(self, result: Dict[str, Any], request_id: str):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        logger.debug(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ {request_id}:")
        logger.debug(f"  üìã –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(result.keys())}")
        
        if "data" in result:
            data = result["data"]
            logger.debug(f"  üìä –ö–ª—é—á–∏ data: {list(data.keys()) if isinstance(data, dict) else type(data)}")
            
            if isinstance(data, dict) and "status" in data:
                status = data["status"]
                logger.debug(f"  ‚≠ê –°—Ç–∞—Ç—É—Å: {status}")
                
                if isinstance(status, dict):
                    state = status.get("state", "unknown")
                    progress = status.get("progress", 0)
                    hotels = status.get("hotelsfound", 0)
                    tours = status.get("toursfound", 0)
                    
                    logger.info(f"üìà –ü–æ–∏—Å–∫ {request_id}: {state}, {progress}%, –æ—Ç–µ–ª–µ–π: {hotels}, —Ç—É—Ä–æ–≤: {tours}")
                else:
                    logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(status)}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –±–ª–æ–∫–∞ 'status' –≤ data –¥–ª—è {request_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –±–ª–æ–∫–∞ 'data' –≤ –æ—Ç–≤–µ—Ç–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {request_id}")
    
    async def get_search_results(self, request_id: str, page: int = 1, onpage: int = 25) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            params = {
                "requestid": request_id,
                "type": "result",
                "page": page,
                "onpage": onpage,
                "format": "xml"
            }
            
            logger.debug(f"üì• –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ {request_id} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")
            result = await self._make_request("result.php", params)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.debug(f"üîç –ö–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {list(result.keys())}")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            normalized_result = self._normalize_results_response(result, request_id)
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self._diagnose_results_response(normalized_result, request_id)
            
            return normalized_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {request_id}: {e}")
            raise
    
    def _normalize_results_response(self, result: Dict[str, Any], request_id: str) -> Dict[str, Any]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        
        # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        if "data" in result:
            return result
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        normalized = {"data": {}}
        
        # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
        status_data = self._extract_status_from_structure(result)
        if status_data:
            normalized["data"]["status"] = status_data
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_data = self._extract_results_from_structure(result)
        if result_data:
            normalized["data"]["result"] = result_data
        
        logger.debug(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {request_id}")
        return normalized
    
    def _extract_results_from_structure(self, data: Any) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        
        if isinstance(data, dict):
            # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–µ–ª–µ–π
            if "hotel" in data:
                return {"hotel": data["hotel"]}
            
            # –ü–æ–∏—Å–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if "result" in data:
                return data["result"]
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            for key, value in data.items():
                if isinstance(value, dict):
                    child_result = self._extract_results_from_structure(value)
                    if child_result:
                        return child_result
        
        return {}
    
    def _diagnose_results_response(self, result: Dict[str, Any], request_id: str):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        logger.debug(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {request_id}:")
        
        if "data" in result:
            data = result["data"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if "status" in data:
                status = data["status"]
                if isinstance(status, dict):
                    state = status.get("state", "unknown")
                    hotels_found = status.get("hotelsfound", 0)
                    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {request_id}: {state}, –æ—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: {hotels_found}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if "result" in data:
                result_data = data["result"]
                if isinstance(result_data, dict) and "hotel" in result_data:
                    hotels = result_data["hotel"]
                    hotels_count = len(hotels) if isinstance(hotels, list) else (1 if hotels else 0)
                    logger.info(f"üè® –û—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {hotels_count}")
                    
                    if hotels_count > 0:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–µ–ª—è
                        sample_hotel = hotels[0] if isinstance(hotels, list) else hotels
                        if isinstance(sample_hotel, dict):
                            logger.debug(f"üè® –ü—Ä–∏–º–µ—Ä –æ—Ç–µ–ª—è: {sample_hotel.get('hotelname', 'No name')} - {sample_hotel.get('price', 'No price')}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–ª—è {request_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –±–ª–æ–∫–∞ 'result' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {request_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –±–ª–æ–∫–∞ 'data' –≤ –æ—Ç–≤–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {request_id}")
    
    async def continue_search(self, request_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        params = {
            "continue": request_id,
            "format": "xml"
        }
        
        return await self._make_request("search.php", params)
    
    async def get_hot_tours(self, city: int, items: int = 10, **filters) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤"""
        params = {
            "city": city,
            "items": items,
            "format": "json",
            **filters
        }
        
        try:
            result = await self._make_request_with_retry("hottours.php", params)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤
            hot_count = result.get("hotcount", 0)
            logger.debug(f"üî• –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: –Ω–∞–π–¥–µ–Ω–æ {hot_count}")
            
            return result
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            return {"hotcount": 0, "hottours": []}
    
    async def get_references(self, ref_type: str, **filters) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        params = {
            "type": ref_type,
            "format": "json",
            **filters
        }
        
        return await self._make_request_with_retry("list.php", params)
    
    async def get_hotel_info(self, hotel_code: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ"""
        params = {
            "hotelcode": hotel_code,
            "format": "json",
            "imgbig": 1,
            "reviews": 1
        }
        
        return await self._make_request("hotel.php", params)

    async def actualize_tour(self, tour_id: str, request_check: int = 0) -> Dict[str, Any]:
        """–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞"""
        params = {
            "tourid": tour_id,
            "request": request_check,
            "format": "json"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"üîç –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ {tour_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        try:
            result = await self._make_request("actualize.php", params)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è {tour_id}:")
            logger.info(f"   - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"   - –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(result.keys()) if isinstance(result, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}")
            
            if isinstance(result, dict):
                if "tour" in result:
                    tour_data = result["tour"]
                    logger.info(f"   - –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞: {len(str(tour_data))} —Å–∏–º–≤–æ–ª–æ–≤")
                    if isinstance(tour_data, dict):
                        logger.info(f"   - –ö–ª—é—á–∏ —Ç—É—Ä–∞: {list(tour_data.keys())}")
                    else:
                        logger.info(f"   - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∞: {type(tour_data)}")
                
                if "error" in result:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ TourVisor: {result['error']}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞ {tour_id}: {e}")
            raise

    async def get_detailed_actualization(self, tour_id: str) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–∞—Ö"""
        params = {
            "tourid": tour_id,
            "format": "json"
        }
        
        return await self._make_request("actdetail.php", params)
    
    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API...")
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            result = await self.get_references("departure")
            
            if result:
                departures_count = 0
                if "departure" in result:
                    departures = result["departure"]
                    departures_count = len(departures) if isinstance(departures, list) else 1
                
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –≥–æ—Ä–æ–¥–æ–≤ –≤—ã–ª–µ—Ç–∞: {departures_count}")
                return {
                    "success": True,
                    "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TourVisor API —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    "departures_count": departures_count
                }
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
                return {
                    "success": False,
                    "message": "API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            }
    
    async def debug_raw_status_response(self, request_id: str) -> Dict[str, Any]:
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            params = {
                "requestid": request_id,
                "type": "status",
                "format": "xml"
            }
            
            session = await self.get_session()
            full_params = {**self.auth_params, **params}
            url = f"{self.base_url}/result.php"
            
            async with session.get(url, params=full_params) as response:
                response_text = await response.text()
                
                logger.info(f"üîç –°—ã—Ä–æ–π XML –æ—Ç–≤–µ—Ç –¥–ª—è {request_id}:")
                logger.info(f"üìÑ –î–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response_text[:500]}...")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                try:
                    parsed = self._parse_xml(response_text)
                    logger.info(f"üìä –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {parsed}")
                    return {
                        "raw_text": response_text,
                        "parsed": parsed,
                        "length": len(response_text)
                    }
                except Exception as parse_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_error}")
                    return {
                        "raw_text": response_text,
                        "parse_error": str(parse_error),
                        "length": len(response_text)
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            raise
    
    async def debug_search_step_by_step(self, search_params: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ—à–∞–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞"""
        
        debug_info = {
            "original_params": search_params.copy(),
            "steps": [],
            "final_result": None,
            "error": None
        }
        
        try:
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            try:
                validated_params = self._validate_search_params(search_params.copy())
                debug_info["steps"].append({
                    "step": "validation",
                    "success": True,
                    "validated_params": validated_params
                })
            except Exception as val_error:
                debug_info["steps"].append({
                    "step": "validation",
                    "success": False,
                    "error": str(val_error)
                })
                raise
            
            # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            session = await self.get_session()
            full_params = {**self.auth_params, **validated_params}
            url = f"{self.base_url}/search.php"
            
            debug_info["steps"].append({
                "step": "request_preparation",
                "success": True,
                "url": url,
                "param_count": len(full_params)
            })
            
            # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            async with session.get(url, params=full_params) as response:
                response_text = await response.text()
                
                debug_info["steps"].append({
                    "step": "http_request",
                    "success": True,
                    "status_code": response.status,
                    "response_length": len(response_text),
                    "response_preview": response_text[:200]
                })
                
                # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                analysis = self._analyze_search_response(response_text)
                debug_info["steps"].append({
                    "step": "response_analysis",
                    "success": bool(analysis["request_id"]),
                    "analysis": analysis
                })
                
                debug_info["final_result"] = analysis["request_id"]
                
        except Exception as e:
            debug_info["error"] = str(e)
            debug_info["steps"].append({
                "step": "error",
                "error": str(e)
            })
        
        return debug_info
    # –î–æ–±–∞–≤–∏—Ç—å –≤ app/core/tourvisor_client.py

    async def get_hotel_info(self, hotel_code: str, include_reviews: bool = True, 
                           big_images: bool = True, remove_tags: bool = True) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ
        
        Args:
            hotel_code: –ö–æ–¥ –æ—Ç–µ–ª—è
            include_reviews: –í–∫–ª—é—á–∞—Ç—å –æ—Ç–∑—ã–≤—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            big_images: –ë–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 800px (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            remove_tags: –£–±–∏—Ä–∞—Ç—å HTML —Ç–µ–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """
        try:
            params = {
                "format": "json",
                "hotelcode": hotel_code,
                "authlogin": self.login,
                "authpass": self.password
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if include_reviews:
                params["reviews"] = 1
            
            if big_images:
                params["imgbig"] = 1
            
            if remove_tags:
                params["removetags"] = 1
            
            logger.info(f"üè® –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ {hotel_code}")
            
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                async with session.get(
                    f"{self.base_url}/xml/hotel.php",
                    params=params
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ {hotel_code}")
                        return data
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ {hotel_code}: {response.status} - {error_text}")
                        raise Exception(f"HTTP {response.status}: {error_text}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ {hotel_code}: {e}")
            raise
# –°–∏–Ω–≥–ª—Ç–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
tourvisor_client = TourVisorClient()