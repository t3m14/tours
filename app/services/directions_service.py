# app/services/directions_service.py

import logging
from typing import List, Dict, Any, Optional
from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service

logger = logging.getLogger(__name__)

class DirectionsService:
    """–ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    
    def __init__(self):
        pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π tourvisor_client
        
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω –∏–∑ –¢–ó (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ API)
    COUNTRIES_MAPPING = {
        "–†–æ—Å—Å–∏—è": {"country_id": 47, "country_code": 47},
        "–¢—É—Ä—Ü–∏—è": {"country_id": 4, "country_code": 4},
        "–¢–∞–∏–ª–∞–Ω–¥": {"country_id": 2, "country_code": 2},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 22, —Å—Ç–∞–ª–æ 2
        "–û–ê–≠": {"country_id": 9, "country_code": 9},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 15, —Å—Ç–∞–ª–æ 9
        "–ï–≥–∏–ø–µ—Ç": {"country_id": 1, "country_code": 1},
        "–ú–∞–ª—å–¥–∏–≤—ã": {"country_id": 8, "country_code": 8},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 35, —Å—Ç–∞–ª–æ 8
        "–ö–∏—Ç–∞–π": {"country_id": 13, "country_code": 13},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 26, —Å—Ç–∞–ª–æ 13
        "–®—Ä–∏-–õ–∞–Ω–∫–∞": {"country_id": 12, "country_code": 12},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 24, —Å—Ç–∞–ª–æ 12
        "–ê–±—Ö–∞–∑–∏—è": {"country_id": 46, "country_code": 46},
        "–ö—É–±–∞": {"country_id": 10, "country_code": 10},
        "–ò–Ω–¥–∏—è": {"country_id": 3, "country_code": 3},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 23, —Å—Ç–∞–ª–æ 3
        "–í—å–µ—Ç–Ω–∞–º": {"country_id": 16, "country_code": 16},  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 25, —Å—Ç–∞–ª–æ 16
        "–ö–∞–º–±–æ–¥–∂–∞": {"country_id": 40, "country_code": 40},
    }

    async def get_directions_by_country(self, country_name: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –°—Ç—Ä–∞–Ω–∞ > –ø–æ–ª—É—á–∞–µ–º 12 —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã 
        2. –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ country_id
        3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        4. –ü–æ–ª—É—á–∞–µ–º min_price –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
        
        Args:
            country_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å country_name, country_id, city_name, min_price
        """
        try:
            logger.info(f"üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã: {country_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∞ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–ø–ø–∏–Ω–≥–µ
            if country_name not in self.COUNTRIES_MAPPING:
                raise ValueError(f"–°—Ç—Ä–∞–Ω–∞ '{country_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω")
            
            country_info = self.COUNTRIES_MAPPING[country_name]
            country_id = country_info["country_id"]
            
            if country_id is None:
                logger.warning(f"‚ö†Ô∏è –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è '{country_name}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                return []
            
            logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è country_id: {country_id}")
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 2 —á–∞—Å–∞ (–ø–æ–∏—Å–∫–∏ –¥–æ—Ä–æ–≥–∏–µ)
            cache_key = f"directions_with_prices_country_{country_id}"
            cached_result = await cache_service.get(cache_key)
            if cached_result:
                logger.info(f"üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è {country_name}: {len(cached_result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                return cached_result
            
            # –ü–æ–ª—É—á–∞–µ–º 12 —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            cities = await self._get_top_cities_for_country(country_id, limit=12)
            logger.info(f"üèôÔ∏è –ü–æ–ª—É—á–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ API")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–∏—Å–∫–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
            result = []
            for i, city in enumerate(cities):
                city_name = city.get("name", "")
                region_id = city.get("id")
                
                if not city_name or not region_id:
                    continue
                
                logger.info(f"üîç [{i+1}/{len(cities)}] –ü–æ–∏—Å–∫ —Ü–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                min_price, image_link = await self._get_min_price_and_image_for_region(country_id, region_id, city_name)
                
                direction_item = {
                    "country_name": country_name,
                    "country_id": country_id,
                    "city_name": city_name,
                    "min_price": min_price,
                    "image_link": image_link
                }
                result.append(direction_item)
                logger.debug(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {city_name}, —Ü–µ–Ω–∞: {min_price}, –∫–∞—Ä—Ç–∏–Ω–∫–∞: {'‚úÖ' if image_link else '‚ùå'}")
                
                # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                if i < len(cities) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    import asyncio
                    await asyncio.sleep(0.5)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1 —Å–µ–∫ –¥–æ 0.5 —Å–µ–∫
            
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 2 —á–∞—Å–∞ (–ø–æ–∏—Å–∫–∏ –¥–æ—Ä–æ–≥–∏–µ)
            await cache_service.set(cache_key, result, ttl=7200)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è {country_name}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {country_name}: {e}")
            raise

    async def get_all_directions(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ country_id
        """
        try:
            logger.info("üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            all_directions = []
            
            for country_name in self.COUNTRIES_MAPPING.keys():
                try:
                    country_directions = await self.get_directions_by_country(country_name)
                    all_directions.extend(country_directions)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤—Å–µ–≥–æ")
            return all_directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            raise

    async def _get_top_cities_for_country(self, country_id: int, limit: int = 12) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-N —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API
        
        Args:
            country_id: ID —Å—Ç—Ä–∞–Ω—ã
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ç–æ–ø –≥–æ—Ä–æ–¥–æ–≤
        """
        try:
            logger.info(f"üåÜ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ø-{limit} –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è country_id: {country_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ "region" —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º regcountry
            regions_data = await tourvisor_client.get_references(
                "region", 
                regcountry=country_id
            )
            
            logger.debug(f"üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º - –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ lists.regions.region
            regions = regions_data.get("lists", {}).get("regions", {}).get("region", [])
            if not isinstance(regions, list):
                regions = [regions] if regions else []
            
            logger.info(f"üóÇÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–≥–∏–æ–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
            valid_regions = []
            for region in regions:
                region_country = region.get("country")
                if region_country and str(region_country) == str(country_id):
                    valid_regions.append(region)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω {region.get('name')} - –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å—Ç—Ä–∞–Ω–µ {region_country}, –∞ –Ω–µ {country_id}")
            
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(valid_regions)} –∏–∑ {len(regions)}")
            
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º fallback
            if len(valid_regions) < limit:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ ({len(valid_regions)} < {limit}), –ø—Ä–æ–±—É–µ–º fallback")
                fallback_regions = await self._get_fallback_regions(country_id, limit)
                if fallback_regions:
                    valid_regions.extend(fallback_regions)
                    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
                    seen_ids = set()
                    unique_regions = []
                    for region in valid_regions:
                        region_id = region.get("id")
                        if region_id not in seen_ids:
                            seen_ids.add(region_id)
                            unique_regions.append(region)
                    valid_regions = unique_regions
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            top_cities = valid_regions[:limit]
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            if len(top_cities) < limit:
                logger.warning(f"‚ö†Ô∏è –í—Å–µ –µ—â–µ –º–∞–ª–æ –≥–æ—Ä–æ–¥–æ–≤ ({len(top_cities)} < {limit}), –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ")
                synthetic_cities = self._create_synthetic_cities(country_id, limit - len(top_cities))
                top_cities.extend(synthetic_cities)
            
            for i, city in enumerate(top_cities[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                logger.debug(f"  üìç –ì–æ—Ä–æ–¥ {i+1}: {city.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {city.get('id', 'N/A')})")
            
            logger.info(f"üèÅ –ò—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {len(top_cities)}")
            return top_cities
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            return self._create_synthetic_cities(country_id, limit)

    async def _get_fallback_regions(self, country_id: int, limit: int) -> List[Dict[str, Any]]:
        """Fallback –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –æ—Ç–µ–ª–∏"""
        try:
            logger.info(f"üîÑ Fallback: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –æ—Ç–µ–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–µ–ª–∏ —Å—Ç—Ä–∞–Ω—ã
            hotels_data = await tourvisor_client.get_references(
                "hotel",
                hotcountry=country_id
            )
            
            hotels = hotels_data.get("lists", {}).get("hotels", {}).get("hotel", [])
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –æ—Ç–µ–ª–µ–π
            regions_from_hotels = {}
            for hotel in hotels:
                region_id = hotel.get("regioncode")
                region_name = hotel.get("regionname")
                if region_id and region_name:
                    if region_id not in regions_from_hotels:
                        regions_from_hotels[region_id] = {
                            "id": region_id,
                            "name": region_name,
                            "country": str(country_id)
                        }
            
            fallback_regions = list(regions_from_hotels.values())[:limit]
            logger.info(f"üîÑ Fallback –Ω–∞—à–µ–ª {len(fallback_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
            return fallback_regions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
            return []

    def _create_synthetic_cities(self, country_id: int, count: int) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏)
        popular_cities_by_country = {
            1: ["–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö", "–•—É—Ä–≥–∞–¥–∞", "–ö–∞–∏—Ä", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—è", "–ú–∞—Ä—Å–∞ –ê–ª–∞–º", "–î–∞—Ö–∞–±", "–¢–∞–±–∞", "–°–∞—Ñ–∞–≥–∞", "–≠–ª—å –ì—É–Ω–∞", "–°–æ–º–∞ –ë–µ–π", "–ú–∞–∫–∞–¥–∏ –ë–µ–π", "–ù—É–≤–µ–π–±–∞"],
            2: ["–ü—Ö—É–∫–µ—Ç", "–ü–∞—Ç—Ç–∞–π—è", "–ë–∞–Ω–≥–∫–æ–∫", "–°–∞–º—É–∏", "–ö—Ä–∞–±–∏", "–ü—Ö–∏ –ü—Ö–∏", "–•—É–∞ –•–∏–Ω", "–ß–∏–∞–Ω–≥–º–∞–π", "–ö–∞–æ –õ–∞–∫", "–ö–æ –ß–∞–Ω–≥", "–†–∞–π–æ–Ω–≥", "–°—É—Ä–∞—Ç –¢–∞–Ω–∏"],  # –¢–∞–∏–ª–∞–Ω–¥
            3: ["–ì–æ–∞", "–ö–µ—Ä–∞–ª–∞", "–ú—É–º–±–∞–∏", "–î–µ–ª–∏", "–ê–≥—Ä–∞", "–î–∂–∞–π–ø—É—Ä", "–ß–µ–Ω–Ω–∞–π", "–ë–∞–Ω–≥–∞–ª–æ—Ä", "–ö–∞–ª—å–∫—É—Ç—Ç–∞", "–í–∞—Ä–∞–Ω–∞—Å–∏", "–†–∏—à–∏–∫–µ—à", "–î–∞—Ä–¥–∂–∏–ª–∏–Ω–≥"],  # –ò–Ω–¥–∏—è
            4: ["–ê–Ω—Ç–∞–ª—å—è", "–°—Ç–∞–º–±—É–ª", "–ö–µ–º–µ—Ä", "–°–∏–¥–µ", "–ë–µ–ª–µ–∫", "–ê–ª–∞–Ω—å—è", "–ú–∞—Ä–º–∞—Ä–∏—Å", "–ë–æ–¥—Ä—É–º", "–§–µ—Ç—Ö–∏–µ", "–ö–∞–ø–ø–∞–¥–æ–∫–∏—è", "–ò–∑–º–∏—Ä", "–ö—É—à–∞–¥–∞—Å—ã"],  # –¢—É—Ä—Ü–∏—è
            8: ["–ú–∞–ª–µ", "–ê—Ç–æ–ª–ª –ê—Ä–∏", "–ê—Ç–æ–ª–ª –ë–∞–∞", "–ê—Ç–æ–ª–ª –õ–∞–≤–∏–∞–Ω–∏", "–ê—Ç–æ–ª–ª –ö–∞–∞—Ñ—É", "–ê—Ç–æ–ª–ª –†–∞—Å", "–ê—Ç–æ–ª–ª –î–∞–∞–ª—É", "–ê—Ç–æ–ª–ª –§–∞–∞—Ñ—É", "–ê—Ç–æ–ª–ª –•–∞", "–ê—Ç–æ–ª–ª –õ—Ö–∞–≤–∏–∞–Ω–∏", "–ê—Ç–æ–ª–ª –ú–∏–∏–º—É", "–ê—Ç–æ–ª–ª –í–∞avu"],  # –ú–∞–ª—å–¥–∏–≤—ã
            9: ["–î—É–±–∞–π", "–ê–±—É-–î–∞–±–∏", "–®–∞—Ä–¥–∂–∞", "–ê–¥–∂–º–∞–Ω", "–†–∞—Å-—ç–ª—å-–•–∞–π–º–∞", "–§—É–¥–∂–µ–π—Ä–∞", "–£–º–º-—ç–ª—å-–ö–∞–π–≤–∞–π–Ω", "–ê–ª—å-–ê–π–Ω", "–î–∏–±–±–∞", "–ö–æ—Ä—Ñ–∞–∫–∫–∞–Ω", "–•–æ—Ä –§–∞–∫–∫–∞–Ω", "–î–∏–±–±–∞ –ê–ª—å-–•–∏—Å–Ω"],  # –û–ê–≠
            10: ["–ì–∞–≤–∞–Ω–∞", "–í–∞—Ä–∞–¥–µ—Ä–æ", "–ö–∞–π–æ –ö–æ–∫–æ", "–ö–∞–π–æ –°–∞–Ω—Ç–∞ –ú–∞—Ä–∏—è", "–û–ª—å–≥–∏–Ω", "–°–∞–Ω—Ç—å—è–≥–æ –¥–µ –ö—É–±–∞", "–¢—Ä–∏–Ω–∏–¥–∞–¥", "–°—å–µ–Ω—Ñ—É—ç–≥–æ—Å", "–ö–∞–π–æ –õ–∞—Ä–≥–æ", "–ú–∞—Ç–∞–Ω—Å–∞—Å", "–ü–∏–Ω–∞—Ä –¥–µ–ª—å –†–∏–æ", "–ö–∞–º–∞–≥—É—ç–π"],  # –ö—É–±–∞
            12: ["–ö–æ–ª–æ–º–±–æ", "–ö–∞–Ω–¥–∏", "–ì–∞–ª–ª–µ", "–ù—É–≤–∞—Ä–∞ –≠–ª–∏—è", "–ê–Ω—É—Ä–∞–¥—Ö–∞–ø—É—Ä–∞", "–ü–æ–ª–æ–Ω–Ω–∞—Ä—É–≤–∞", "–°–∏–≥–∏—Ä–∏—è", "–î–∞–º–±—É–ª–ª–∞", "–¢—Ä–∏–Ω–∫–æ–º–∞–ª–∏", "–•–∏–∫–∫–∞–¥—É–≤–∞", "–ú–∏—Ä–∏—Å—Å–∞", "–ë–µ–Ω—Ç–æ—Ç–∞"],  # –®—Ä–∏-–õ–∞–Ω–∫–∞
            13: ["–ü–µ–∫–∏–Ω", "–®–∞–Ω—Ö–∞–π", "–ì—É–∞–Ω—á–∂–æ—É", "–•–∞–π–Ω–∞–Ω—å", "–°–∏–∞–Ω—å", "–ß—ç–Ω–¥—É", "–•–∞–Ω—á–∂–æ—É", "–°—É—á–∂–æ—É", "–ì—É–π–ª–∏–Ω—å", "–õ–∏—Ü–∑—è–Ω", "–î–∞–ª–∏", "–ö—É–Ω—å–º–∏–Ω"],  # –ö–∏—Ç–∞–π
            16: ["–•–æ—à–∏–º–∏–Ω", "–•–∞–Ω–æ–π", "–ù—è—á–∞–Ω–≥", "–§—É–∫—É–æ–∫", "–î–∞–ª–∞—Ç", "–•–æ–π–∞–Ω", "–•—é—ç", "–î–∞–Ω–∞–Ω–≥", "–§–∞–Ω—Ç—å–µ—Ç", "–í—É–Ω–≥—Ç–∞—É", "–°–∞–ø–∞", "–•–∞–ª–æ–Ω–≥"],  # –í—å–µ—Ç–Ω–∞–º
            40: ["–°–∏–µ–º –†–µ–∞–ø", "–ü–Ω–æ–º –ü–µ–Ω—å", "–°–∏–∞–Ω—É–∫–≤–∏–ª—å", "–ë–∞—Ç—Ç–∞–º–±–∞–Ω–≥", "–ö–∞–º–ø–æ—Ç", "–ö–µ–ø", "–ö–æ—Ö –†–æ–Ω–≥", "–ö—Ä–∞—Ç–∏–µ", "–ú–æ–Ω–¥—É–ª–∫–∏—Ä–∏", "–†–∞—Ç–∞–Ω–∞–∫–∏—Ä–∏", "–ü—Ä–µ–∞—Ö –í–∏—Ö–µ–∞—Ä", "–°—Ç—ã–Ω–≥ –¢—Ä–µ–Ω–≥"],  # –ö–∞–º–±–æ–¥–∂–∞
            46: ["–°—É—Ö—É–º", "–ì–∞–≥—Ä–∞", "–ü–∏—Ü—É–Ω–¥–∞", "–ù–æ–≤—ã–π –ê—Ñ–æ–Ω", "–û—á–∞–º—á–∏—Ä–∞", "–ì—É–¥–∞—É—Ç–∞", "–¶–∞–Ω–¥—Ä–∏–ø—à", "–ú—é—Å—Å–µ—Ä–∞", "–†–∏—Ü–∞", "–ü—Å—Ö—É", "–¢–∫—É–∞—Ä—á–∞–ª", "–ì–∞–ª–∏"],  # –ê–±—Ö–∞–∑–∏—è
            47: ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–æ—á–∏", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–≥–æ—Ä–æ–¥", "–°—É–∑–¥–∞–ª—å", "–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ", "–ë–∞–π–∫–∞–ª", "–ö–∞–º—á–∞—Ç–∫–∞", "–ê–ª—Ç–∞–π"]  # –†–æ—Å—Å–∏—è
        }
        
        cities = popular_cities_by_country.get(country_id, [f"–ì–æ—Ä–æ–¥ {i+1}" for i in range(count)])
        
        synthetic_cities = []
        for i in range(min(count, len(cities))):
            synthetic_cities.append({
                "id": f"synthetic_{country_id}_{i+1000}",
                "name": cities[i],
                "country": str(country_id),
                "synthetic": True
            })
        
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ {len(synthetic_cities)} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        return synthetic_cities

    async def filter_directions_by_country_id(self, country_id: int, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ country_id (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –¢–ó)
        
        Args:
            country_id: ID —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            limit: –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ country_id: {country_id}")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
            country_name = None
            for name, info in self.COUNTRIES_MAPPING.items():
                if info["country_id"] == country_id:
                    country_name = name
                    break
            
            if not country_name:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∞ —Å country_id {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            directions = await self.get_directions_by_country(country_name)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if limit is not None:
                directions = directions[:limit]
                logger.info(f"‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç: {limit} –∏–∑ {len(directions)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            return directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ country_id {country_id}: {e}")
            return []

    async def _get_min_price_and_image_for_region(self, country_id: int, region_id: str, city_name: str) -> tuple[Optional[int], Optional[str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        
        Args:
            country_id: ID —Å—Ç—Ä–∞–Ω—ã
            region_id: ID —Ä–µ–≥–∏–æ–Ω–∞ (–≥–æ—Ä–æ–¥–∞)
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –ª–æ–≥–æ–≤)
            
        Returns:
            tuple: (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        """
        try:
            logger.debug(f"üí∞üñºÔ∏è –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} (region_id: {region_id})")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            from datetime import datetime, timedelta
            
            # –î–∞—Ç—ã: –∑–∞–≤—Ç—Ä–∞ + –Ω–µ–¥–µ–ª—è (–∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            tomorrow = datetime.now() + timedelta(days=1)
            week_later = datetime.now() + timedelta(days=8)
            
            search_params = {
                "departure": 1,  # –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "country": country_id,
                "regions": region_id,
                "datefrom": tomorrow.strftime("%d.%m.%Y"),
                "dateto": week_later.strftime("%d.%m.%Y"),
                "nightsfrom": 7,
                "nightsto": 10,
                "adults": 2,
                "format": "json"
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
            logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name}")
            request_id = await tourvisor_client.search_tours(search_params)
            
            if not request_id:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è {city_name}")
                return None, None
            
            logger.debug(f"üîÑ Request ID –¥–ª—è {city_name}: {request_id}")
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (–º–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 30)
            import asyncio
            max_attempts = 10  # 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 20 —Å–µ–∫
            
            for attempt in range(max_attempts):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
                    status_result = await tourvisor_client.get_search_status(request_id)
                    
                    if not status_result:
                        continue
                        
                    status_data = status_result.get("data", {}).get("status", {})
                    state = status_data.get("state", "")
                    min_price = status_data.get("minprice")
                    hotels_found = status_data.get("hotelsfound", 0)
                    tours_found = status_data.get("toursfound", 0)
                    
                    logger.debug(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state}, —Ü–µ–Ω–∞={min_price}, –æ—Ç–µ–ª–∏={hotels_found}, —Ç—É—Ä—ã={tours_found}")
                    
                    if state == "finished":
                        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
                        price = None
                        if min_price is not None:
                            price_val = int(min_price) if str(min_price).replace('0', '').replace('.', '').isdigit() else 0
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
                            if price_val > 0 and price_val < 1000000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã —Ü–µ–Ω—ã
                                price = price_val
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {city_name}: {price} —Ä—É–±.")
                            elif price_val == 0:
                                if hotels_found == 0 or tours_found == 0:
                                    logger.warning(f"üö´ –ù–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è {city_name}")
                                    return None, None
                                else:
                                    logger.warning(f"‚ö†Ô∏è –¶–µ–Ω–∞ 0 –¥–ª—è {city_name}")
                                    price = None
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                        image_link = await self._extract_image_from_search_results(request_id, city_name)
                        
                        # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–æ –µ—Å—Ç—å —Ü–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–∏—Å–∫–æ–≤
                        if not image_link and price:
                            image_link = await self._get_fallback_image_for_region(country_id, region_id, city_name)
                        
                        return price, image_link
                    
                    elif state == "error":
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name}")
                        break
                    
                    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.debug(f"üîÑ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {city_name}: {e}")
                    await asyncio.sleep(2)
                    continue
            
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name} (20 —Å–µ–∫)")
            
            # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫
            mock_price = self._generate_mock_price(country_id, city_name)
            mock_image = await self._get_fallback_image_for_region(country_id, region_id, city_name)
            
            if mock_price:
                logger.info(f"üé≠ –ú–æ–∫ —Ü–µ–Ω–∞ –¥–ª—è {city_name}: {mock_price} —Ä—É–±.")
            
            return mock_price, mock_image
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}: {e}")
            return None, None

    async def _get_fallback_image_for_region(self, country_id: int, region_id: str, city_name: str) -> Optional[str]:
        """
        Fallback –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ –æ—Ç–µ–ª–∏
        
        Args:
            country_id: ID —Å—Ç—Ä–∞–Ω—ã
            region_id: ID —Ä–µ–≥–∏–æ–Ω–∞
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –ª–æ–≥–æ–≤)
            
        Returns:
            Optional[str]: –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ None
        """
        try:
            logger.debug(f"üîÑ Fallback –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–µ–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
            hotels_data = await tourvisor_client.get_references(
                "hotel",
                hotcountry=country_id,
                hotregion=region_id
            )
            
            hotels = hotels_data.get("lists", {}).get("hotels", {}).get("hotel", [])
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            logger.debug(f"üè® Fallback –Ω–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –¥–ª—è {city_name}")
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            for hotel in hotels[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—Ç–µ–ª–µ–π
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
                for pic_field in ["picturelink", "picture", "image", "photo"]:
                    picture_link = hotel.get(pic_field)
                    if picture_link and self._is_valid_image_link(picture_link):
                        logger.info(f"üñºÔ∏è Fallback –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {picture_link}")
                        return picture_link
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            fallback_image = self._generate_fallback_image_link(country_id, city_name)
            if fallback_image:
                logger.info(f"üé® –ó–∞–≥–ª—É—à–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}: {fallback_image}")
                return fallback_image
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}: {e}")
            return None

    def _generate_fallback_image_link(self, country_id: int, city_name: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞"""
        
        # –í–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç—Ä–∞–Ω
        country_fallback_images = {
            1: "/static/mockup_images/egypt.jpg",        # –ï–≥–∏–ø–µ—Ç
            2: "/static/mockup_images/thailand.webp",     # –¢–∞–∏–ª–∞–Ω–¥  
            3: "/static/mockup_images/india.webp",        # –ò–Ω–¥–∏—è
            4: "/static/mockup_images/turkey.jpeg",       # –¢—É—Ä—Ü–∏—è
            8: "/static/mockup_images/maldives.jpg",      # –ú–∞–ª—å–¥–∏–≤—ã
            9: "/static/mockup_images/oae.jpg",           # –û–ê–≠
            10: "/static/mockup_images/kuba.jpg",         # –ö—É–±–∞
            12: "/static/mockup_images/sri_lanka.jpg",    # –®—Ä–∏-–õ–∞–Ω–∫–∞
            13: "/static/mockup_images/china.jpg",        # –ö–∏—Ç–∞–π
            16: "/static/mockup_images/vietnam.jpg",      # –í—å–µ—Ç–Ω–∞–º
            40: "/static/mockup_images/kambodja.jpg",     # –ö–∞–º–±–æ–¥–∂–∞
            46: "/static/mockup_images/abkhazia.jpg",     # –ê–±—Ö–∞–∑–∏—è
            47: "/static/mockup_images/russia.webp",      # –†–æ—Å—Å–∏—è
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ç—Ä–∞–Ω—ã
        fallback = country_fallback_images.get(country_id)
        if fallback:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            import os
            file_path = os.path.join(os.path.dirname(__file__), "mockup_images", os.path.basename(fallback))
            if os.path.exists(file_path):
                logger.debug(f"üé® –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {fallback}")
                return fallback
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∑–∞–≥–ª—É—à–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –û–±—â–∞—è –∑–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        logger.debug(f"‚ùì –ù–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–ª—É—à–∫–∏

    async def _extract_image_from_search_results(self, request_id: str, city_name: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
        Args:
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞
            city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –ª–æ–≥–æ–≤)
            
        Returns:
            Optional[str]: –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ None
        """
        try:
            logger.debug(f"üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name} –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ {request_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            search_results = await tourvisor_client.get_search_results(request_id)
            
            if not search_results:
                logger.debug(f"üîç –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name}")
                return None
            
            # –ò—â–µ–º –æ—Ç–µ–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            result_data = search_results.get("data", {}).get("result", {})
            hotels = result_data.get("hotel", [])
            
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            logger.debug(f"üè® –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–ª—è {city_name}")
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            for i, hotel in enumerate(hotels):
                picture_link = hotel.get("picturelink")
                hotel_name = hotel.get("hotelname", f"–û—Ç–µ–ª—å {i+1}")
                
                if picture_link and self._is_valid_image_link(picture_link):
                    logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {hotel_name} - {picture_link}")
                    return picture_link
                else:
                    logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç {hotel_name}: {picture_link}")
            
            logger.warning(f"üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è {city_name}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}: {e}")
            return None

    def _is_valid_image_link(self, link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É"""
        if not link or not isinstance(link, str):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ URL
        if not (link.startswith("http://") or link.startswith("https://")):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp']
        link_lower = link.lower()
        
        # –õ–∏–±–æ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫
        has_extension = any(link_lower.endswith(ext) for ext in image_extensions)
        has_image_pattern = any(pattern in link_lower for pattern in ['image', 'img', 'pic', 'photo', 'hotel_pics'])
        
        return has_extension or has_image_pattern

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
directions_service = DirectionsService()