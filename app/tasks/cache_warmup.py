import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.config import settings
from app.utils.logger import setup_logger
from app.services.random_tours_service import random_tours_service
from app.models.tour import RandomTourRequest

logger = setup_logger(__name__)

class CacheWarmupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏"""
    
    def __init__(self):
        self.countries = settings.POPULAR_COUNTRIES
        self.cities = settings.DEPARTURE_CITIES
        
    async def warm_up_cache(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞"""
        logger.info("üî• –ù–∞—á–∞—Ç –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞")
        
        try:
            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–±—ã—Å—Ç—Ä–æ –∏ –ø–æ–ª–µ–∑–Ω–æ)
            await self._warm_references()
            
            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            await self._warm_directions()

            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—É—Ä—ã –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π
            await self._warm_random_tours_by_hotel_types()

            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è)
            await self._warm_popular_searches_limited()
            
            logger.info("‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞: {e}")
    
    async def _warm_directions(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π"""
        logger.info("üåç –ü—Ä–æ–≥—Ä–µ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π DirectionsService –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
            await directions_service.refresh_directions()
            logger.info("‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"üåç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")

    async def _warm_random_tours_by_hotel_types(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π"""
        logger.info("üè® –ü—Ä–æ–≥—Ä–µ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π...")
        
        hotel_types = ["active", "relax", "family", "health", "city", "beach", "deluxe"]
        tour_counts = [6, 8, 10]  # –†–∞–∑–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—É—Ä–æ–≤
        
        for hotel_type in hotel_types:
            for count in tour_counts:
                try:
                    logger.info(f"üè® –ü—Ä–æ–≥—Ä–µ–≤ {count} —Ç—É—Ä–æ–≤ —Ç–∏–ø–∞ '{hotel_type}'")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ—Ç–µ–ª—è
                    request = RandomTourRequest(count=count, hotel_types=[hotel_type])
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ä—ã
                    tours = await random_tours_service._generate_fully_random_tours(request)
                    
                    if tours:
                        # –ö—ç—à–∏—Ä—É–µ–º –ø–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
                        cache_key = f"random_tours_type_{hotel_type}_count_{count}"
                        await cache_service.set(
                            cache_key,
                            [tour.dict() for tour in tours],
                            ttl=settings.RANDOM_TOURS_CACHE_TTL
                        )
                        
                        logger.info(f"‚úÖ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤ —Ç–∏–ø–∞ '{hotel_type}' (count={count})")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ä—ã –¥–ª—è —Ç–∏–ø–∞ '{hotel_type}'")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ —Ç—É—Ä–æ–≤ —Ç–∏–ø–∞ '{hotel_type}': {e}")
                    continue
        
        logger.info("‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ —Ç—É—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    async def _warm_popular_searches_limited(self):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≥—Ä–µ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)...")
        
        # –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        search_combinations = [
            # –ï–≥–∏–ø–µ—Ç –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
            {
                "departure": 1, "country": 1,
                "nightsfrom": 7, "nightsto": 10,
                "adults": 2, "child": 0
            },
            # –¢—É—Ä—Ü–∏—è –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ –Ω–µ–¥–µ–ª—é  
            {
                "departure": 1, "country": 4,
                "nightsfrom": 7, "nightsto": 10,
                "adults": 2, "child": 0
            },
            # –¢–∞–∏–ª–∞–Ω–¥ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ 10 –¥–Ω–µ–π
            {
                "departure": 1, "country": 22,
                "nightsfrom": 10, "nightsto": 14,
                "adults": 2, "child": 0
            }
        ]
        
        # –î–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
        today = datetime.now()
        date_range = {
            "datefrom": (today + timedelta(days=7)).strftime("%d.%m.%Y"),
            "dateto": (today + timedelta(days=14)).strftime("%d.%m.%Y")
        }
        
        for i, search_params in enumerate(search_combinations):
            try:
                full_params = {**search_params, **date_range}
                
                logger.info(f"üîç –ü–æ–∏—Å–∫ {i+1}/3: —Å—Ç—Ä–∞–Ω–∞ {search_params['country']} –∏–∑ –≥–æ—Ä–æ–¥–∞ {search_params['departure']}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                request_id = await tourvisor_client.search_tours(full_params)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥)
                max_wait_time = 15
                wait_count = 0
                
                while wait_count < max_wait_time:
                    await asyncio.sleep(2)
                    wait_count += 2
                    
                    status_result = await tourvisor_client.get_search_status(request_id)
                    status = status_result.get("data", {}).get("status", {})
                    
                    if status.get("state") == "finished":
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        results = await tourvisor_client.get_search_results(request_id, 1, 10)
                        
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        cache_key = f"popular_search:{search_params['country']}_{search_params['departure']}_{search_params['nightsfrom']}"
                        await cache_service.set(
                            cache_key,
                            results,
                            ttl=settings.POPULAR_TOURS_CACHE_TTL
                        )
                        
                        logger.info(f"‚úÖ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –ø–æ–∏—Å–∫: —Å—Ç—Ä–∞–Ω–∞ {search_params['country']}")
                        break
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ {i+1}: {e}")
                continue
    
    async def _warm_references(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        logger.info("üìã –ü—Ä–æ–≥—Ä–µ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        
        reference_types = [
            "departure",
            "country", 
            "meal",
            "stars",
            "operator",
            "services"
        ]
        
        for ref_type in reference_types:
            try:
                data = await tourvisor_client.get_references(ref_type)
                
                cache_key = f"reference:{ref_type}"
                await cache_service.set(
                    cache_key,
                    data,
                    ttl=86400  # 24 —á–∞—Å–∞ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                )
                
                logger.info(f"üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {ref_type} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω")
                await asyncio.sleep(0.2)
                
            except Exception as e:
                logger.error(f"üìã –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {ref_type}: {e}")
        
        # –ö—ç—à–∏—Ä—É–µ–º –∫—É—Ä–æ—Ä—Ç—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        for country in self.countries:
            try:
                regions_data = await tourvisor_client.get_references(
                    "region",
                    regcountry=country
                )
                
                cache_key = f"reference:regions_country_{country}"
                await cache_service.set(
                    cache_key,
                    regions_data,
                    ttl=86400
                )
                
                logger.info(f"üìã –ö—É—Ä–æ—Ä—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã")
                await asyncio.sleep(0.2)
                
            except Exception as e:
                logger.error(f"üìã –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞
async def warm_up_cache():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞"""
    warmup_service = CacheWarmupService()
    
    while True:
        try:
            await warmup_service.warm_up_cache()
            
            logger.info("üò¥ –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤")
            # –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ–≤ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
            await asyncio.sleep(21600)
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(1800)