# app/api/v1/directions_cache.py

from fastapi import APIRouter, HTTPException, BackgroundTasks
from typing import Dict, Any
from datetime import datetime

from app.tasks.directions_cache_update import directions_cache_update_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter(prefix="/directions/cache", tags=["Directions Cache Management"])

@router.get("/status")
async def get_cache_update_status() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
    - –¢–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    - –í—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    - –í—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    try:
        logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        status = await directions_cache_update_service.get_update_status()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        current_time = datetime.now()
        status["current_time"] = current_time
        status["scheduler_info"] = {
            "update_interval_hours": directions_cache_update_service.update_interval / 3600,
            "batch_size": directions_cache_update_service.countries_batch_size,
            "total_countries": len(directions_cache_update_service.countries_mapping) if hasattr(directions_cache_update_service, 'countries_mapping') else 13
        }
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )

@router.post("/force-update")
async def force_cache_update(background_tasks: BackgroundTasks) -> Dict[str, Any]:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-4 —á–∞—Å–∞!
    """
    try:
        logger.info("üöÄ API –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        status = await directions_cache_update_service.get_update_status()
        
        if status.get("is_running") and status.get("update_stats", {}).get("end_time") is None:
            return {
                "success": False,
                "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                "current_status": status
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(directions_cache_update_service.force_update_now)
        
        return {
            "success": True,
            "message": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            "estimated_duration": "2-4 —á–∞—Å–∞",
            "note": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GET /status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
            "started_at": datetime.now()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
        )

@router.get("/stats")
async def get_detailed_cache_stats() -> Dict[str, Any]:
    """
    –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏,
    –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–µ.
    """
    try:
        logger.info("üìà –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞")
        
        status = await directions_cache_update_service.get_update_status()
        update_stats = status.get("update_stats")
        
        if not update_stats:
            return {
                "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ",
                "recommendation": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /force-update"
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        countries_details = update_stats.get("countries_details", {})
        
        # –¢–æ–ø —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        top_countries = sorted(
            [(name, data) for name, data in countries_details.items() if data.get("success")],
            key=lambda x: x[1].get("directions_count", 0),
            reverse=True
        )[:5]
        
        # –°—Ç—Ä–∞–Ω—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        failed_countries = [
            name for name, data in countries_details.items() 
            if not data.get("success")
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        total_directions = sum(
            data.get("directions_count", 0) 
            for data in countries_details.values() 
            if data.get("success")
        )
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_stats = []
        for name, data in countries_details.items():
            if data.get("success") and data.get("quality_stats"):
                quality_stats.append(data["quality_stats"])
        
        avg_price_coverage = 0
        avg_image_coverage = 0
        if quality_stats:
            avg_price_coverage = sum(
                float(qs.get("price_coverage", "0%").replace("%", "")) 
                for qs in quality_stats
            ) / len(quality_stats)
            
            avg_image_coverage = sum(
                float(qs.get("image_coverage", "0%").replace("%", "")) 
                for qs in quality_stats
            ) / len(quality_stats)
        
        return {
            "last_update": update_stats.get("end_time"),
            "execution_summary": {
                "total_countries": update_stats.get("total_countries", 0),
                "successful_countries": update_stats.get("successful_countries", 0),
                "failed_countries": update_stats.get("failed_countries", 0),
                "success_rate": f"{update_stats.get('success_rate', 0):.1f}%",
                "total_directions": total_directions,
                "execution_time": f"{update_stats.get('execution_time_seconds', 0):.1f} —Å–µ–∫"
            },
            "data_quality": {
                "average_price_coverage": f"{avg_price_coverage:.1f}%",
                "average_image_coverage": f"{avg_image_coverage:.1f}%"
            },
            "top_countries_by_directions": [
                {
                    "country": name,
                    "directions_count": data.get("directions_count", 0),
                    "execution_time": f"{data.get('execution_time_seconds', 0):.1f}s"
                }
                for name, data in top_countries
            ],
            "failed_countries": failed_countries,
            "countries_details": countries_details
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.post("/scheduler/start")
async def start_cache_scheduler(background_tasks: BackgroundTasks) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    try:
        logger.info("‚ñ∂Ô∏è API –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        if directions_cache_update_service.is_running:
            return {
                "success": False,
                "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
                "status": "running"
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(directions_cache_update_service.start_scheduler)
        
        return {
            "success": True,
            "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω",
            "schedule": "–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞",
            "started_at": datetime.now()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}"
        )

@router.post("/scheduler/stop")
async def stop_cache_scheduler() -> Dict[str, Any]:
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    """
    try:
        logger.info("‚èπÔ∏è API –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        if not directions_cache_update_service.is_running:
            return {
                "success": False,
                "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "status": "stopped"
            }
        
        await directions_cache_update_service.stop_scheduler()
        
        return {
            "success": True,
            "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "stopped_at": datetime.now()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}"
        )

@router.get("/health")
async def cache_health_check() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.
    """
    try:
        from app.services.cache_service import cache_service
        from app.services.directions_service import directions_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_keys_count = 0
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            for country_name, country_info in directions_service.COUNTRIES_MAPPING.items():
                country_id = country_info.get("country_id")
                if country_id:
                    cache_key = f"directions_with_prices_country_{country_id}"
                    cached_data = await cache_service.get(cache_key)
                    if cached_data:
                        cache_keys_count += 1
        except:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        status = await directions_cache_update_service.get_update_status()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        health_status = "unknown"
        issues = []
        
        if cache_keys_count == 0:
            health_status = "poor"
            issues.append("–ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        elif cache_keys_count < 5:
            health_status = "warning"
            issues.append("–ú–∞–ª–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            health_status = "good"
        
        if not status.get("is_running"):
            issues.append("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            if health_status == "good":
                health_status = "warning"
        
        last_update = status.get("last_update")
        if last_update:
            from datetime import datetime, timedelta
            if isinstance(last_update, str):
                last_update = datetime.fromisoformat(last_update.replace('Z', '+00:00'))
            
            hours_since_update = (datetime.now() - last_update).total_seconds() / 3600
            if hours_since_update > 48:  # –ë–æ–ª–µ–µ 48 —á–∞—Å–æ–≤
                issues.append("–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                health_status = "warning"
        
        return {
            "health_status": health_status,
            "cache_keys_count": cache_keys_count,
            "total_countries": len(directions_service.COUNTRIES_MAPPING),
            "cache_coverage": f"{(cache_keys_count / len(directions_service.COUNTRIES_MAPPING) * 100):.1f}%",
            "scheduler_running": status.get("is_running", False),
            "last_update": last_update,
            "issues": issues,
            "recommendations": [
                "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: POST /scheduler/start" if not status.get("is_running") else None,
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /force-update" if cache_keys_count < 5 else None
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return {
            "health_status": "error",
            "error": str(e),
            "cache_keys_count": 0,
            "issues": ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"]
        }