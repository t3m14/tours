# app/services/city_directions_service.py

import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import json

from app.services.cache_service import cache_service
from app.core.tourvisor_client import tourvisor_client
from app.models.tour import TourSearchRequest
from app.services.tour_service import tour_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class CityDirectionsService:
    """
    –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ (–≥–æ—Ä–æ–¥–æ–≤) –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
    3. –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    
    def __init__(self):
        self.cache = cache_service
        
        # –ö—ç—à –Ω–∞ 24 —á–∞—Å–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        self.CITIES_CACHE_TTL = 86400  # 24 —á–∞—Å–∞
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞—Ä–∞ —Å–∞–π—Ç–∞ (—Ç–æ—á–Ω—ã–µ ID –∏–∑ TourVisor)
        self.COUNTRIES_MAPPING = {
            "–†–æ—Å—Å–∏—è": 47,
            "–¢—É—Ä—Ü–∏—è": 4, 
            "–¢–∞–∏–ª–∞–Ω–¥": 2,
            "–û–ê–≠": 9,
            "–ï–≥–∏–ø–µ—Ç": 1,
            "–ú–∞–ª—å–¥–∏–≤—ã": 8,
            "–ö–∏—Ç–∞–π": 13,
            "–®—Ä–∏-–õ–∞–Ω–∫–∞": 12,
            "–ê–±—Ö–∞–∑–∏—è": 46,
            "–ö—É–±–∞": 10,
            "–ò–Ω–¥–∏—è": 3,
            "–í—å–µ—Ç–Ω–∞–º": 16,
            "–ö–∞–º–±–æ–¥–∂–∞": 40
        }

    async def get_city_directions(self, country_id: int, limit: Optional[int] = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        
        Args:
            country_id: ID —Å—Ç—Ä–∞–Ω—ã –≤ TourVisor
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö –∏ —Ñ–æ—Ç–æ
        """
        cache_key = f"city_directions_{country_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await self.cache.get(cache_key)
        if cached_result:
            logger.info(f"üèôÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached_result)} –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
            return cached_result[:limit] if limit else cached_result
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            country_name = await self._get_country_name(country_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ (–≥–æ—Ä–æ–¥–æ–≤) –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
            regions = await self._get_country_regions(country_id)
            
            if not regions:
                logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
                return []
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å—Ç—Ä–∞–Ω—ã {country_name}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            semaphore = asyncio.Semaphore(2)  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            tasks = []
            
            for region in regions[:limit] if limit else regions:
                task = self._process_region(semaphore, country_id, country_name, region)
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            city_directions = []
            for result in results:
                if isinstance(result, dict) and result.get("min_price"):
                    city_directions.append(result)
                elif isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏–æ–Ω–∞: {result}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
            city_directions.sort(key=lambda x: x.get("min_price", float('inf')))
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.cache.set(cache_key, city_directions, ttl=self.CITIES_CACHE_TTL)
            
            logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(city_directions)} –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}")
            
            return city_directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º: {e}")
            return []

    async def _process_region(self, semaphore: asyncio.Semaphore, country_id: int, 
                            country_name: str, region: Dict) -> Optional[Dict]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–≥–æ—Ä–æ–¥–∞)
        
        Args:
            semaphore: –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            country_id: ID —Å—Ç—Ä–∞–Ω—ã
            country_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            region: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏–æ–Ω–µ
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ —Å —Ü–µ–Ω–æ–π –∏ —Ñ–æ—Ç–æ –∏–ª–∏ None
        """
        async with semaphore:
            try:
                region_id = region.get("id")
                region_name = region.get("name")
                
                if not region_id or not region_name:
                    return None
                
                logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω: {region_name} (ID: {region_id})")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ
                search_request = TourSearchRequest(
                    departure=1,  # –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    country=country_id,
                    regions=str(region_id),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞
                    nights=7,  # 7 –Ω–æ—á–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    adults=2
                )
                
                logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                search_response = await tour_service.search_tours(search_request)
                request_id = search_response.request_id
                
                logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω request_id: {request_id} –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
                search_completed = False
                for attempt in range(60):  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(1)
                    status = await tour_service.get_search_status(request_id)
                    
                    logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/60 –¥–ª—è {region_name}: —Å—Ç–∞—Ç—É—Å = {status.state}")
                    
                    if status.state == "finished":
                        search_completed = True
                        break
                    elif status.state == "error":
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}: {status.error}")
                        return None
                
                if not search_completed:
                    logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                    return None
                
                logger.debug(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ (–Ω–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ!)
                min_price = status.minprice
                
                if not min_price or min_price <= 0:
                    logger.debug(f"‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}: {min_price}")
                    return None
                
                logger.debug(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {region_name}: {min_price}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –±–æ–ª–µ–µ –º—è–≥–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                try:
                    search_results = await tour_service.get_search_results(request_id, page=1, onpage=10)
                except Exception as validation_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {region_name}: {validation_error}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç TourVisor
                        raw_results = await tourvisor_client.get_search_results(request_id, page=1, onpage=10)
                        
                        if not raw_results or not raw_results.get("result"):
                            logger.debug(f"‚ùå –ù–µ—Ç —Å—ã—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                            return None
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        hotels = raw_results.get("result", [])
                        if not hotels:
                            return None
                        
                        min_price = float('inf')
                        image_link = "https://via.placeholder.com/300x200?text=No+Image"
                        
                        for hotel in hotels:
                            # –ò—â–µ–º —Ç—É—Ä—ã –≤ –æ—Ç–µ–ª–µ
                            tours = hotel.get("tours", [])
                            if isinstance(tours, list):
                                for tour in tours:
                                    try:
                                        price = float(tour.get("price", 0))
                                        if price > 0 and price < min_price:
                                            min_price = price
                                    except (ValueError, TypeError):
                                        continue
                            
                            # –ò—â–µ–º —Ñ–æ—Ç–æ
                            hotel_picture = hotel.get("picturelink") or hotel.get("hotelpicture")
                            if hotel_picture and isinstance(hotel_picture, str) and hotel_picture.startswith('http'):
                                image_link = hotel_picture
                        
                        if min_price == float('inf'):
                            logger.debug(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                            return None
                        
                        result = {
                            "country_name": country_name,
                            "country_id": country_id,
                            "city_name": region_name,
                            "image_link": image_link,
                            "min_price": int(min_price)
                        }
                        
                        logger.info(f"‚úÖ –†–µ–≥–∏–æ–Ω {region_name} (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ): —Ü–µ–Ω–∞ –æ—Ç {min_price} —Ä—É–±., —Ñ–æ—Ç–æ: {'–µ—Å—Ç—å' if not image_link.startswith('https://via.placeholder.com') else '–Ω–µ—Ç'}")
                        
                        return result
                        
                    except Exception as raw_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {region_name}: {raw_error}")
                        return None
                
                if not search_results.result:
                    logger.debug(f"‚ùå –ù–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                    return None
                
                logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(search_results.result)} —Ç—É—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
                
                # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Ñ–æ—Ç–æ
                min_price = min(tour.price for tour in search_results.result)
                
                # –ò—â–µ–º —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ)
                image_link = "https://via.placeholder.com/300x200?text=No+Image"
                for tour in search_results.result:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ç–æ
                    photo_fields = ['hotel_picture', 'hotel_image', 'image', 'picture', 'picturelink']
                    for field in photo_fields:
                        if hasattr(tour, field):
                            photo_url = getattr(tour, field)
                            if photo_url and isinstance(photo_url, str) and photo_url.startswith('http'):
                                image_link = photo_url
                                logger.debug(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è {region_name}: {photo_url}")
                                break
                    if image_link != "https://via.placeholder.com/300x200?text=No+Image":
                        break
                
                result = {
                    "country_name": country_name,
                    "country_id": country_id,
                    "city_name": region_name,
                    "image_link": image_link,
                    "min_price": min_price
                }
                
                logger.info(f"‚úÖ –†–µ–≥–∏–æ–Ω {region_name}: —Ü–µ–Ω–∞ –æ—Ç {min_price} —Ä—É–±., —Ñ–æ—Ç–æ: {'–µ—Å—Ç—å' if not image_link.startswith('https://via.placeholder.com') else '–Ω–µ—Ç'}")
                
                return result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏–æ–Ω–∞ {region.get('name', 'Unknown')}: {e}")
                return None

    async def _get_country_regions(self, country_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
        try:
            logger.debug(f"üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ
            regions_data = await tourvisor_client.get_references("region", regcountry=country_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–æ–π
            regions = None
            if isinstance(regions_data, dict):
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if "lists" in regions_data and "regions" in regions_data["lists"]:
                    regions = regions_data["lists"]["regions"].get("region", [])
                elif "region" in regions_data:
                    regions = regions_data["region"]
                else:
                    logger.warning(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {list(regions_data.keys())}")
                    return []
            
            if not regions:
                logger.warning(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ API")
                return []
            
            if not isinstance(regions, list):
                regions = [regions] if regions else []
            
            logger.debug(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ API: {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
            valid_regions = []
            for region in regions:
                region_id = region.get("id")
                region_name = region.get("name")
                
                if region_id and region_name:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –≤–∞–ª–∏–¥–Ω—ã–π
                        int(region_id)
                        valid_regions.append({
                            "id": int(region_id),
                            "name": region_name.strip()
                        })
                    except (ValueError, TypeError):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–≥–∏–æ–Ω–∞: {region_id}")
                        continue
            
            logger.info(f"üìç –ù–∞–π–¥–µ–Ω–æ {len(valid_regions)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
            
            if len(valid_regions) == 0:
                logger.warning(f"‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API response.")
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"Raw regions data: {regions_data}")
            
            return valid_regions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
            return []

    async def _get_country_name(self, country_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ ID"""
        try:
            countries_data = await tourvisor_client.get_references("country")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            countries = None
            if isinstance(countries_data, dict):
                if "lists" in countries_data and "countries" in countries_data["lists"]:
                    countries = countries_data["lists"]["countries"].get("country", [])
                elif "country" in countries_data:
                    countries = countries_data["country"]
                else:
                    logger.warning(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ countries API: {list(countries_data.keys())}")
                    return f"–°—Ç—Ä–∞–Ω–∞ {country_id}"
            
            if not countries:
                return f"–°—Ç—Ä–∞–Ω–∞ {country_id}"
            
            if not isinstance(countries, list):
                countries = [countries] if countries else []
            
            for country in countries:
                if country.get("id"):
                    try:
                        if int(country.get("id")) == country_id:
                            return country.get("name", f"–°—Ç—Ä–∞–Ω–∞ {country_id}")
                    except (ValueError, TypeError):
                        continue
            
            return f"–°—Ç—Ä–∞–Ω–∞ {country_id}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
            return f"–°—Ç—Ä–∞–Ω–∞ {country_id}"

    async def clear_cities_cache(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
            pattern = "city_directions_*"
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ cache_service, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
            
            # –ü—Ä–∏–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à cache_service)
            cleared_count = 0
            for country_id in range(1, 50):  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ID —Å—Ç—Ä–∞–Ω
                cache_key = f"city_directions_{country_id}"
                if await self.cache.delete(cache_key):
                    cleared_count += 1
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º")
            
            return cleared_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            return 0

    async def get_cities_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        try:
            status = {
                "service_name": "CityDirectionsService",
                "cache_info": {
                    "ttl_hours": self.CITIES_CACHE_TTL // 3600,
                },
                "supported_countries": [],
                "last_updated": datetime.now().isoformat()
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã –µ—Å—Ç—å –≤ –∫—ç—à–µ
            cached_countries = []
            for country_id in [47, 4, 2, 9, 1, 8, 13, 12, 46, 10, 3, 16, 40]:  # –°—Ç—Ä–∞–Ω—ã –∏–∑ –±–∞—Ä–∞ —Å–∞–π—Ç–∞
                cache_key = f"city_directions_{country_id}"
                cached_data = await self.cache.get(cache_key)
                if cached_data:
                    country_name = await self._get_country_name(country_id)
                    cached_countries.append({
                        "country_id": country_id,
                        "country_name": country_name,
                        "cities_count": len(cached_data),
                        "cached": True
                    })
            
            status["supported_countries"] = cached_countries
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}

    def _extract_image_from_raw(self, raw_data: Dict) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
        
        Returns:
            str: –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ placeholder
        """
        try:
            # –ò—â–µ–º –æ—Ç–µ–ª–∏ –ø–æ –ø—É—Ç–∏ data -> result -> hotel
            if "data" in raw_data and isinstance(raw_data["data"], dict):
                data = raw_data["data"]
                if "result" in data and isinstance(data["result"], dict):
                    result = data["result"]
                    if "hotel" in result and isinstance(result["hotel"], list):
                        hotels = result["hotel"]
                        
                        # –ò—â–µ–º —Ñ–æ—Ç–æ –≤ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ—Ç–µ–ª–µ
                        for hotel in hotels:
                            if isinstance(hotel, dict):
                                photo_fields = ['picturelink', 'hotelpicture', 'picture', 'image']
                                for field in photo_fields:
                                    photo_url = hotel.get(field)
                                    if photo_url and isinstance(photo_url, str) and photo_url.startswith('http'):
                                        logger.debug(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {photo_url}")
                                        return photo_url
            
            return "https://via.placeholder.com/300x200?text=No+Image"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return "https://via.placeholder.com/300x200?text=No+Image"

    def get_country_id_by_name(self, country_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ –±–∞—Ä–∞ —Å–∞–π—Ç–∞"""
        return self.COUNTRIES_MAPPING.get(country_name)
    
    def get_all_supported_countries(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω"""
        return [
            {"id": country_id, "name": country_name}
            for country_name, country_id in self.COUNTRIES_MAPPING.items()
        ]

    def _extract_price_and_image_from_raw(self, raw_data: Dict) -> Optional[tuple]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
        
        Returns:
            tuple: (min_price, image_link) –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            hotels = None
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º –æ—Ç–µ–ª–µ–π
            possible_paths = [
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∞–Ω–∞–ª–∏–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                ["data", "result", "hotel"],
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                ["result"],
                ["data", "result"], 
                ["data", "hotels"],
                ["data", "data", "result"],
                ["data"],
                ["hotels"],
                ["items"],
                ["results"]
            ]
            
            logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö: {list(raw_data.keys())}")
            
            for path in possible_paths:
                try:
                    current_obj = raw_data
                    path_str = " -> ".join(path)
                    
                    for key in path:
                        if isinstance(current_obj, dict) and key in current_obj:
                            current_obj = current_obj[key]
                        else:
                            break
                    else:
                        # –î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ
                        if isinstance(current_obj, list) and current_obj:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–µ–ª–∏
                            first_item = current_obj[0]
                            if isinstance(first_item, dict) and any(key in first_item for key in ['hotelname', 'hotelcode', 'tours']):
                                hotels = current_obj
                                logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏ –ø–æ –ø—É—Ç–∏: {path_str}")
                                break
                        elif isinstance(current_obj, dict):
                            # –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–µ–ª—å
                            if any(key in current_obj for key in ['hotelname', 'hotelcode', 'tours']):
                                hotels = [current_obj]
                                logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–µ–ª—å –ø–æ –ø—É—Ç–∏: {path_str}")
                                break
                                
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ {path_str}: {e}")
                    continue
            
            if not hotels:
                logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
                logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(raw_data.keys())}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if "data" in raw_data:
                    data_obj = raw_data["data"]
                    if isinstance(data_obj, dict):
                        logger.info(f"üîç –ö–ª—é—á–∏ –≤ data: {list(data_obj.keys())}")
                        
                        if "result" in data_obj:
                            result_obj = data_obj["result"]
                            if isinstance(result_obj, dict):
                                logger.info(f"üîç –ö–ª—é—á–∏ –≤ result: {list(result_obj.keys())}")
                            else:
                                logger.info(f"üîç –¢–∏–ø result: {type(result_obj)}")
                    else:
                        logger.info(f"üîç –¢–∏–ø data: {type(data_obj)}")
                
                return None
            
            logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(hotels)} –æ—Ç–µ–ª–µ–π –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            min_price = float('inf')
            image_link = "https://via.placeholder.com/300x200?text=No+Image"
            
            for i, hotel in enumerate(hotels):
                if not isinstance(hotel, dict):
                    continue
                    
                hotel_name = hotel.get('hotelname', f'Hotel_{i+1}')
                logger.info(f"üè® –û—Ç–µ–ª—å {i+1}: {hotel_name}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è
                photo_fields = ['picturelink', 'hotelpicture', 'picture', 'image']
                for field in photo_fields:
                    hotel_picture = hotel.get(field)
                    if hotel_picture and isinstance(hotel_picture, str) and hotel_picture.startswith('http'):
                        image_link = hotel_picture
                        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–µ {field}: {hotel_picture}")
                        break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Ç—É—Ä–æ–≤
                tours = hotel.get("tours", [])
                
                logger.info(f"üéØ –ü–æ–ª–µ tours –≤ –æ—Ç–µ–ª–µ {hotel_name}: —Ç–∏–ø={type(tours)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ={str(tours)[:100]}...")
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç—É—Ä—ã –≤ —Å–ø–∏—Å–æ–∫
                if isinstance(tours, dict):
                    tours = [tours]  # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ç—É—Ä –ø—Ä–∏—à–µ–ª –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                    logger.info(f"   –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –∏–∑ dict –≤ list —Å 1 —ç–ª–µ–º–µ–Ω—Ç–æ–º")
                elif not isinstance(tours, list):
                    logger.info(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç—É—Ä–æ–≤: {type(tours)}")
                    continue
                
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ {hotel_name}")
                
                for j, tour in enumerate(tours):
                    if not isinstance(tour, dict):
                        logger.warning(f"‚ö†Ô∏è –¢—É—Ä {j+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(tour)}")
                        continue
                        
                    logger.info(f"   –¢—É—Ä {j+1}: –∫–ª—é—á–∏={list(tour.keys())}")
                    
                    try:
                        price = tour.get("price")
                        logger.info(f"   –¶–µ–Ω–∞ –∏–∑ —Ç—É—Ä–∞ {j+1}: {repr(price)} (—Ç–∏–ø: {type(price)})")
                        
                        if price is not None:
                            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                            if isinstance(price, str):
                                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                                price_str = ''.join(c for c in price if c.isdigit() or c == '.')
                                if price_str:
                                    price = float(price_str)
                                    logger.info(f"   –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ —á–∏—Å–ª–æ: {price}")
                                else:
                                    logger.warning(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã: {repr(price)}")
                                    continue
                            else:
                                price = float(price)
                                logger.info(f"   –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ: {price}")
                            
                            if price > 0 and price < min_price:
                                min_price = price
                                logger.info(f"üí∞ –ù–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} (–æ—Ç–µ–ª—å: {hotel_name})")
                                
                    except (ValueError, TypeError) as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –≤ —Ç—É—Ä–µ {j+1}: {e}")
                        continue
            
            if min_price == float('inf'):
                logger.info("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–Ω—ã")
                return None
            
            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price}, —Ñ–æ—Ç–æ: {image_link}")
            
            return (int(min_price), image_link)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
city_directions_service = CityDirectionsService()