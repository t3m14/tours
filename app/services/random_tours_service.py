import asyncio
import random
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service
from app.services.tour_service import tour_service
from app.models.tour import RandomTourRequest, HotTourInfo
from app.config import settings
from app.utils.logger import setup_logger

logger = setup_logger(__name__)

class RandomToursService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏"""
    
    def __init__(self):
        self.cache = cache_service
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤
        self.popular_countries = [1, 4, 8, 15, 22, 35]  # –ï–≥–∏–ø–µ—Ç, –¢—É—Ä—Ü–∏—è, –ì—Ä–µ—Ü–∏—è, –û–ê–≠, –¢–∞–∏–ª–∞–Ω–¥, –ú–∞–ª—å–¥–∏–≤—ã
        self.all_cities = [1, 2, 3, 5, 6]  # –ú–æ—Å–∫–≤–∞, –ü–µ—Ä–º—å, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –°–ü–±, –ö–∞–∑–∞–Ω—å
    
    async def get_random_tours(self, request: RandomTourRequest) -> List[HotTourInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        cache_key = f"random_tours_count_{request.count}"
        
        logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å {request.count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        try:
            cached_tours = await self.cache.get(cache_key)
            if cached_tours:
                tours_list = []
                for tour_data in cached_tours[:request.count]:
                    try:
                        tour = HotTourInfo(**tour_data)
                        tours_list.append(tour)
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Ç—É—Ä–∞ –∏–∑ –∫—ç—à–∞: {e}")
                        continue
                
                if len(tours_list) >= request.count:
                    logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(tours_list)} —Ç—É—Ä–æ–≤ –∏–∑ –∫—ç—à–∞")
                    return tours_list
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä—ã
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—É—Ä—ã")
        return await self._generate_random_tours_multilevel(request)
    
    async def _generate_random_tours_multilevel(self, request: RandomTourRequest) -> List[HotTourInfo]:
        """–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        logger.info(f"üé≤ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–£–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ {request.count} –¢–£–†–û–í")
        
        random_tours = []
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
        logger.info("üìç –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–±—É–µ–º –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã")
        hot_tours_result = await self._try_hot_tours_strategy()
        if hot_tours_result and len(hot_tours_result) >= request.count:
            random_tours = hot_tours_result[:request.count]
            logger.info(f"üî• –£—Å–ø–µ—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ 1: –ø–æ–ª—É—á–µ–Ω–æ {len(random_tours)} —Ç—É—Ä–æ–≤")
        else:
            if hot_tours_result:
                random_tours.extend(hot_tours_result)
                logger.info(f"üî• –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ 1: {len(hot_tours_result)} —Ç—É—Ä–æ–≤")
        
        # –£—Ä–æ–≤–µ–Ω—å 2: –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç—É—Ä–æ–≤)
        if len(random_tours) < request.count:
            needed = request.count - len(random_tours)
            logger.info(f"üìç –£—Ä–æ–≤–µ–Ω—å 2: –ù—É–∂–Ω–æ –µ—â–µ {needed} —Ç—É—Ä–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫")
            
            search_tours = await self._try_search_strategy(needed)
            if search_tours:
                random_tours.extend(search_tours)
                logger.info(f"üîç –£—Å–ø–µ—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ 2: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(search_tours)} —Ç—É—Ä–æ–≤")
        
        # –£—Ä–æ–≤–µ–Ω—å 3: Mock-–¥–∞–Ω–Ω—ã–µ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        if len(random_tours) < request.count:
            needed = request.count - len(random_tours)
            logger.info(f"üìç –£—Ä–æ–≤–µ–Ω—å 3: –°–æ–∑–¥–∞–µ–º {needed} mock-—Ç—É—Ä–æ–≤")
            
            mock_tours = await self._create_smart_mock_tours(needed)
            random_tours.extend(mock_tours)
            logger.info(f"üé≠ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(mock_tours)} mock-—Ç—É—Ä–æ–≤")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        random.shuffle(random_tours)
        final_tours = random_tours[:request.count]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if final_tours:
            try:
                cache_key = f"random_tours_count_{request.count}"
                await self.cache.set(
                    cache_key,
                    [tour.dict() for tour in final_tours],
                    ttl=1800  # 30 –º–∏–Ω—É—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
                )
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(final_tours)} —Ç—É—Ä–æ–≤ –≤ –∫—ç—à")
            except Exception as cache_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {cache_error}")
        
        logger.info(f"üèÅ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {len(final_tours)} —Ç—É—Ä–æ–≤")
        return final_tours
    
    async def _try_hot_tours_strategy(self) -> List[HotTourInfo]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã"""
        try:
            logger.info("üî• –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤")
            
            all_tours = []
            
            # –ü—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            strategies = [
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                {"items": 15},
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –¢–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–µ–ª–∏
                {"items": 10, "stars": 4},
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
                {"items": 8, "countries": "1,4,22"},  # –ï–≥–∏–ø–µ—Ç, –¢—É—Ä—Ü–∏—è, –¢–∞–∏–ª–∞–Ω–¥
            ]
            
            for city in self.all_cities[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–æ—Ä–æ–¥–∞
                for strategy in strategies:
                    try:
                        logger.debug(f"üî• –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥ {city} —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy}")
                        
                        hot_tours_data = await tourvisor_client.get_hot_tours(
                            city=city,
                            **strategy
                        )
                        
                        tours_list = hot_tours_data.get("hottours", [])
                        if not isinstance(tours_list, list):
                            tours_list = [tours_list] if tours_list else []
                        
                        logger.debug(f"üî• –ì–æ—Ä–æ–¥ {city}: –Ω–∞–π–¥–µ–Ω–æ {len(tours_list)} —Ç—É—Ä–æ–≤")
                        
                        for tour_data in tours_list:
                            try:
                                tour = HotTourInfo(**tour_data)
                                all_tours.append(tour)
                            except Exception as tour_error:
                                logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞: {tour_error}")
                                continue
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—É—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ—Ä–æ–¥—É
                        if tours_list:
                            break
                        
                        await asyncio.sleep(0.2)
                        
                    except Exception as strategy_error:
                        logger.debug(f"üî• –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy}: {strategy_error}")
                        continue
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
                await asyncio.sleep(0.3)
            
            if all_tours:
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ hotel_code
                seen_hotels = set()
                unique_tours = []
                for tour in all_tours:
                    if tour.hotelcode not in seen_hotels:
                        seen_hotels.add(tour.hotelcode)
                        unique_tours.append(tour)
                
                logger.info(f"üî• –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: {len(unique_tours)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤")
                return unique_tours
            
            logger.info("üî• –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return []
            
        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: {e}")
            return []
    
    async def _try_search_strategy(self, needed_count: int) -> List[HotTourInfo]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
        try:
            logger.info(f"üîç –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è {needed_count} —Ç—É—Ä–æ–≤")
            
            found_tours = []
            max_attempts = min(needed_count * 2, 8)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
            search_variants = self._create_optimized_search_variants(max_attempts)
            
            for i, search_params in enumerate(search_variants):
                if len(found_tours) >= needed_count:
                    break
                
                try:
                    country_name = tour_service._get_country_name(search_params['country'])
                    city_name = tour_service._get_city_name(search_params['departure'])
                    
                    logger.debug(f"üîç –ü–æ–∏—Å–∫ {i+1}/{len(search_variants)}: {country_name} –∏–∑ {city_name}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                    request_id = await tourvisor_client.search_tours(search_params)
                    
                    # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã)
                    tour_found = await self._quick_search_result(request_id, search_params)
                    
                    if tour_found:
                        found_tours.append(tour_found)
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—É—Ä: {tour_found.hotelname}")
                    
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    await asyncio.sleep(0.3)
                    
                except Exception as e:
                    logger.debug(f"üîç –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {i+1}: {e}")
                    continue
            
            logger.info(f"üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {len(found_tours)} —Ç—É—Ä–æ–≤")
            return found_tours
            
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _create_optimized_search_variants(self, max_variants: int) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        variants = []
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∞-–≥–æ—Ä–æ–¥
        popular_combinations = [
            (1, 1),   # –ï–≥–∏–ø–µ—Ç –∏–∑ –ú–æ—Å–∫–≤—ã
            (4, 1),   # –¢—É—Ä—Ü–∏—è –∏–∑ –ú–æ—Å–∫–≤—ã
            (22, 1),  # –¢–∞–∏–ª–∞–Ω–¥ –∏–∑ –ú–æ—Å–∫–≤—ã
            (8, 2),   # –ì—Ä–µ—Ü–∏—è –∏–∑ –ü–µ—Ä–º–∏
            (15, 3),  # –û–ê–≠ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
            (4, 5),   # –¢—É—Ä—Ü–∏—è –∏–∑ –°–ü–±
        ]
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        base_dates = {
            "datefrom": (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y"),
            "dateto": (datetime.now() + timedelta(days=21)).strftime("%d.%m.%Y")
        }
        
        base_params = {
            "nightsfrom": 7,
            "nightsto": 10,
            "adults": 2,
            "child": 0
        }
        
        for i in range(min(max_variants, len(popular_combinations))):
            country, city = popular_combinations[i]
            
            variant = {
                "departure": city,
                "country": country,
                **base_dates,
                **base_params
            }
            
            # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–Ω–æ—Å—Ç—å
            if i % 2 == 0:
                variant["stars"] = random.choice([3, 4])
            
            variants.append(variant)
        
        return variants
    
    async def _quick_search_result(self, request_id: str, search_params: Dict[str, Any]) -> Optional[HotTourInfo]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã)
            for attempt in range(3):
                await asyncio.sleep(1)
                
                status_result = await tourvisor_client.get_search_status(request_id)
                status_data = status_result.get("data", {}).get("status", {})
                state = status_data.get("state", "searching")
                hotels_found = status_data.get("hotelsfound", 0)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
                try:
                    hotels_found = int(hotels_found) if hotels_found else 0
                except (ValueError, TypeError):
                    hotels_found = 0
                
                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if state == "finished" or (hotels_found > 0 and attempt >= 1):
                    break
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = await tourvisor_client.get_search_results(request_id, 1, 5)
            data = results.get("data", {})
            result_data = data.get("result", {})
            hotel_list = result_data.get("hotel", [])
            
            if not isinstance(hotel_list, list):
                hotel_list = [hotel_list] if hotel_list else []
            
            if not hotel_list:
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–µ–ª—å –∏ –ø–µ—Ä–≤—ã–π —Ç—É—Ä
            hotel = hotel_list[0]
            tours_data = hotel.get("tours", {}).get("tour", [])
            
            if not isinstance(tours_data, list):
                tours_data = [tours_data] if tours_data else []
            
            if not tours_data:
                return None
            
            tour_data = tours_data[0]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HotTourInfo
            hot_tour_data = self._convert_search_to_hot_tour(hotel, tour_data, search_params)
            return HotTourInfo(**hot_tour_data)
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return None
    
    def _convert_search_to_hot_tour(self, hotel_data: Dict, tour_data: Dict, search_params: Dict) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç HotTourInfo"""
        
        country_name = tour_service._get_country_name(search_params["country"])
        city_name = tour_service._get_city_name(search_params["departure"])
        
        return {
            "countrycode": str(search_params["country"]),
            "countryname": country_name,
            "departurecode": str(search_params["departure"]),
            "departurename": city_name,
            "departurenamefrom": tour_service._get_city_name_from(search_params["departure"]),
            "operatorcode": tour_data.get("operatorcode", ""),
            "operatorname": tour_data.get("operatorname", ""),
            "hotelcode": hotel_data.get("hotelcode", ""),
            "hotelname": hotel_data.get("hotelname", ""),
            "hotelstars": hotel_data.get("hotelstars", 3),
            "hotelregioncode": hotel_data.get("regioncode", ""),
            "hotelregionname": hotel_data.get("regionname", ""),
            "hotelpicture": hotel_data.get("picturelink", ""),
            "fulldesclink": hotel_data.get("fulldesclink", ""),
            "flydate": tour_data.get("flydate", ""),
            "nights": tour_data.get("nights", 7),
            "meal": tour_data.get("mealrussian", tour_data.get("meal", "")),
            "price": float(tour_data.get("price", 0)),
            "priceold": None,
            "currency": tour_data.get("currency", "RUB")
        }
    
    async def _create_smart_mock_tours(self, count: int) -> List[HotTourInfo]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω—ã—Ö mock-—Ç—É—Ä–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        logger.info(f"üé≠ –°–æ–∑–¥–∞–µ–º {count} —É–º–Ω—ã—Ö mock-—Ç—É—Ä–æ–≤")
        
        mock_tours = []
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è mock-—Ç—É—Ä–æ–≤
        destinations = [
            {"code": 1, "name": "–ï–≥–∏–ø–µ—Ç", "regions": ["–•—É—Ä–≥–∞–¥–∞", "–®–∞—Ä–º-—ç–ª—å-–®–µ–π—Ö"], "base_price": 45000},
            {"code": 4, "name": "–¢—É—Ä—Ü–∏—è", "regions": ["–ê–Ω—Ç–∞–ª—å—è", "–ö–µ–º–µ—Ä", "–ë–µ–ª–µ–∫"], "base_price": 35000},
            {"code": 8, "name": "–ì—Ä–µ—Ü–∏—è", "regions": ["–ö—Ä–∏—Ç", "–†–æ–¥–æ—Å", "–•–∞–ª–∫–∏–¥–∏–∫–∏"], "base_price": 55000},
            {"code": 15, "name": "–û–ê–≠", "regions": ["–î—É–±–∞–π", "–ê–±—É-–î–∞–±–∏", "–®–∞—Ä–¥–∂–∞"], "base_price": 75000},
            {"code": 22, "name": "–¢–∞–∏–ª–∞–Ω–¥", "regions": ["–ü—Ö—É–∫–µ—Ç", "–ü–∞—Ç—Ç–∞–π—è", "–°–∞–º—É–∏"], "base_price": 95000},
        ]
        
        cities = [
            {"code": 1, "name": "–ú–æ—Å–∫–≤–∞", "namefrom": "–ú–æ—Å–∫–≤—ã"},
            {"code": 2, "name": "–ü–µ—Ä–º—å", "namefrom": "–ü–µ—Ä–º–∏"},
            {"code": 3, "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "namefrom": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"},
            {"code": 5, "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "namefrom": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞"},
        ]
        
        operators = ["Pegas Touristik", "Coral Travel", "Anex Tour", "TEZ TOUR", "Sunmar"]
        meals = ["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω", "–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ", "Ultra All Inclusive"]
        
        for i in range(count):
            destination = random.choice(destinations)
            city = random.choice(cities)
            operator = random.choice(operators)
            region = random.choice(destination["regions"])
            meal = random.choice(meals)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–Ω—É
            base_price = destination["base_price"]
            price_variation = random.randint(-15000, 25000)
            final_price = max(25000, base_price + price_variation)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–µ—Å—è—Ü–∞)
            departure_date = datetime.now() + timedelta(days=random.randint(7, 30))
            
            mock_tour_data = {
                "countrycode": str(destination["code"]),
                "countryname": destination["name"],
                "departurecode": str(city["code"]),
                "departurename": city["name"],
                "departurenamefrom": city["namefrom"],
                "operatorcode": str(i + 10),
                "operatorname": operator,
                "hotelcode": str(1000 + i),
                "hotelname": f"{destination['name'].upper()} RESORT {region.upper()} {i+1}",
                "hotelstars": random.choice([3, 4, 5]),
                "hotelregioncode": str(100 + i),
                "hotelregionname": region,
                "hotelpicture": f"https://via.placeholder.com/250x150/{'4a90e2' if i % 2 == 0 else 'e74c3c'}/ffffff?text={region}+Resort",
                "fulldesclink": f"https://example.com/hotel/{1000+i}",
                "flydate": departure_date.strftime("%d.%m.%Y"),
                "nights": random.choice([7, 10, 14]),
                "meal": meal,
                "price": float(final_price),
                "priceold": float(final_price + random.randint(5000, 15000)),
                "currency": "RUB"
            }
            
            try:
                mock_tour = HotTourInfo(**mock_tour_data)
                mock_tours.append(mock_tour)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mock-—Ç—É—Ä–∞: {e}")
                continue
        
        logger.info(f"üé≠ –°–æ–∑–¥–∞–Ω–æ {len(mock_tours)} —É–º–Ω—ã—Ö mock-—Ç—É—Ä–æ–≤")
        return mock_tours
    
    async def get_random_tours_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_keys = await self.cache.get_keys_pattern("random_tours_count_*")
            
            status = {
                "cache_status": {
                    "cached_variants": len(cache_keys),
                    "cache_keys": cache_keys
                },
                "last_generation": "unknown",
                "strategies": {
                    "hot_tours": "–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã (–±—ã—Å—Ç—Ä–æ)",
                    "search": "–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–º–µ–¥–ª–µ–Ω–Ω–æ)",
                    "mock": "–°–æ–∑–¥–∞–Ω–∏–µ mock-–¥–∞–Ω–Ω—ã—Ö (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ)"
                },
                "api_status": "unknown"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            try:
                test_result = await tourvisor_client.test_connection()
                status["api_status"] = "working" if test_result.get("success") else "error"
            except:
                status["api_status"] = "error"
            
            return status
            
        except Exception as e:
            return {"error": str(e)}
    
    async def refresh_random_tours(self, count: int = 6) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        try:
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            cache_keys = await self.cache.get_keys_pattern("random_tours_count_*")
            for key in cache_keys:
                await self.cache.delete(key)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä—ã
            request = RandomTourRequest(count=count)
            new_tours = await self._generate_random_tours_multilevel(request)
            
            return {
                "success": True,
                "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_tours)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
                "cleared_cache_keys": len(cache_keys),
                "tours_generated": len(new_tours),
                "tours_preview": [
                    {
                        "hotel": tour.hotelname,
                        "country": tour.countryname,
                        "price": tour.price
                    }
                    for tour in new_tours[:3]
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e)
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
random_tours_service = RandomToursService()