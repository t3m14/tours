from fastapi import APIRouter, HTTPException
from typing import Dict, Any
import asyncio
from datetime import datetime, timedelta

from app.core.tourvisor_client import tourvisor_client
from app.tasks.random_tours_cache_update import random_tours_cache_update_service
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter(prefix="/debug-tours", tags=["Debug Tours"])

@router.get("/test-search-extraction/{hotel_type}")
async def test_search_extraction(hotel_type: str) -> Dict[str, Any]:
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    try:
        if hotel_type not in random_tours_cache_update_service.hotel_types_mapping:
            raise HTTPException(status_code=400, detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–µ–ª—è: {hotel_type}")
        
        hotel_type_info = random_tours_cache_update_service.hotel_types_mapping[hotel_type]
        api_param = hotel_type_info["api_param"]
        
        logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –¥–ª—è {hotel_type}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
        tomorrow = datetime.now() + timedelta(days=1)
        week_later = datetime.now() + timedelta(days=8)
        
        search_params = {
            "departure": 1,  # –ú–æ—Å–∫–≤–∞
            "country": 4,    # –¢—É—Ä—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            "datefrom": tomorrow.strftime("%d.%m.%Y"),
            "dateto": week_later.strftime("%d.%m.%Y"),
            "nightsfrom": 7,
            "nightsto": 10,
            "adults": 2,
            "format": "xml",
            "onpage": 10
        }
        
        if api_param:
            search_params["hoteltypes"] = api_param
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {search_params}")
        request_id = await tourvisor_client.search_tours(search_params)
        
        # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥
        logger.info(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ {request_id}")
        await asyncio.sleep(15)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status_result = await tourvisor_client.get_search_status(request_id)
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: {status_result}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_results = await tourvisor_client.get_search_results(request_id)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        structure_analysis = {
            "request_id": request_id,
            "search_params_used": search_params,
            "status_response": status_result,
            "results_top_level_keys": list(search_results.keys()),
            "results_type": type(search_results).__name__
        }
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ data
        if "data" in search_results:
            data = search_results["data"]
            structure_analysis["data_type"] = type(data).__name__
            
            if isinstance(data, dict):
                structure_analysis["data_keys"] = list(data.keys())
                
                # –ê–Ω–∞–ª–∏–∑ result
                if "result" in data:
                    result = data["result"]
                    structure_analysis["result_type"] = type(result).__name__
                    
                    if isinstance(result, dict):
                        structure_analysis["result_keys"] = list(result.keys())
                        
                        # –ê–Ω–∞–ª–∏–∑ hotel
                        if "hotel" in result:
                            hotels = result["hotel"]
                            structure_analysis["hotels_type"] = type(hotels).__name__
                            structure_analysis["hotels_count"] = len(hotels) if isinstance(hotels, list) else (1 if hotels else 0)
                            
                            # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è
                            if hotels:
                                first_hotel = hotels[0] if isinstance(hotels, list) else hotels
                                if isinstance(first_hotel, dict):
                                    structure_analysis["first_hotel_keys"] = list(first_hotel.keys())
                                    structure_analysis["first_hotel_name"] = first_hotel.get("hotelname", "Unknown")
                                    
                                    # –ê–Ω–∞–ª–∏–∑ —Ç—É—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ
                                    if "tours" in first_hotel:
                                        tours_block = first_hotel["tours"]
                                        structure_analysis["tours_block_type"] = type(tours_block).__name__
                                        
                                        if isinstance(tours_block, dict) and "tour" in tours_block:
                                            tours = tours_block["tour"]
                                            structure_analysis["tours_type"] = type(tours).__name__
                                            structure_analysis["tours_count"] = len(tours) if isinstance(tours, list) else (1 if tours else 0)
                                            
                                            # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç—É—Ä–∞
                                            if tours:
                                                first_tour = tours[0] if isinstance(tours, list) else tours
                                                if isinstance(first_tour, dict):
                                                    structure_analysis["first_tour_keys"] = list(first_tour.keys())
                                                    structure_analysis["first_tour_price"] = first_tour.get("price", "No price")
        
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç—É—Ä—ã —á–µ—Ä–µ–∑ –Ω–∞—à –º–µ—Ç–æ–¥
        try:
            extracted_tours = await random_tours_cache_update_service._extract_tours_from_search_results(
                search_results, 5, hotel_type
            )
            extraction_result = {
                "success": True,
                "extracted_count": len(extracted_tours),
                "extracted_tours": extracted_tours[:2] if extracted_tours else []  # –ü–µ—Ä–≤—ã–µ 2 —Ç—É—Ä–∞
            }
        except Exception as extraction_error:
            extraction_result = {
                "success": False,
                "error": str(extraction_error),
                "traceback": str(extraction_error.__traceback__)
            }
        
        return {
            "success": True,
            "hotel_type": hotel_type,
            "api_param": api_param,
            "structure_analysis": structure_analysis,
            "extraction_result": extraction_result,
            "raw_results_sample": str(search_results)[:2000] + "..." if len(str(search_results)) > 2000 else str(search_results)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/raw-search/{country_id}")
async def get_raw_search_results(country_id: int = 4) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        tomorrow = datetime.now() + timedelta(days=1)
        week_later = datetime.now() + timedelta(days=8)
        
        search_params = {
            "departure": 1,
            "country": country_id,
            "datefrom": tomorrow.strftime("%d.%m.%Y"),
            "dateto": week_later.strftime("%d.%m.%Y"),
            "nightsfrom": 7,
            "nightsto": 10,
            "adults": 2,
            "format": "xml",
            "onpage": 5
        }
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
        request_id = await tourvisor_client.search_tours(search_params)
        logger.info(f"üöÄ Raw –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω: {request_id}")
        
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_results = await tourvisor_client.get_search_results(request_id)
        
        return {
            "success": True,
            "request_id": request_id,
            "search_params": search_params,
            "raw_results": search_results
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ raw –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))