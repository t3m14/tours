from fastapi import APIRouter, HTTPException, Query
from typing import List, Optional
import asyncio
import random
from datetime import datetime, timedelta

from app.models.tour import (
    TourSearchRequest, SearchResponse, SearchResult, SearchStatus,
    RandomTourRequest, HotTourInfo, DirectionInfo, TourActualizationRequest,
    DetailedTourInfo, HotelInfo
)
from app.services.tour_service import tour_service
from app.services.random_tours_service import random_tours_service
from app.services.directions_service import directions_service
from app.services.photo_service import photo_service
from app.services.price_service import price_service
from app.core.tourvisor_client import tourvisor_client
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

# ========== –û–°–ù–û–í–ù–´–ï ENDPOINTS –ü–û–ò–°–ö–ê –¢–£–†–û–í ==========

@router.post("/search", response_model=SearchResponse)
async def search_tours(search_request: TourSearchRequest):
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    try:
        return await tour_service.search_tours(search_request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/status", response_model=SearchStatus)
async def get_search_status(request_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_status(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search/{request_id}/results", response_model=SearchResult)
async def get_search_results(
    request_id: str,
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    onpage: int = Query(25, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    """
    try:
        return await tour_service.get_search_results(request_id, page, onpage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search/{request_id}/continue")
async def continue_search(request_id: str):
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        return await tour_service.continue_search(request_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ù–î–û–ú–ù–´–ï –¢–£–†–´ –° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô ==========

@router.get("/random", response_model=List[HotTourInfo])
async def get_random_tours_get(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"),
    hotel_types: Optional[str] = Query(
        None, 
        description="–¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: active,relax,family,health,city,beach,deluxe"
    )
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ (GET –º–µ—Ç–æ–¥)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ (1-20)
    - hotel_types: —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - /api/v1/tours/random?count=8
    - /api/v1/tours/random?count=6&hotel_types=beach,relax
    - /api/v1/tours/random?count=10&hotel_types=deluxe
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        hotel_types_list = None
        if hotel_types:
            hotel_types_list = [ht.strip() for ht in hotel_types.split(",") if ht.strip()]
        
        request = RandomTourRequest(count=count, hotel_types=hotel_types_list)
        logger.info(f"üéØ GET –∑–∞–ø—Ä–æ—Å {request.count} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random", response_model=List[HotTourInfo])
async def get_random_tours_post(request: RandomTourRequest = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ –∏–∑ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ (POST –º–µ—Ç–æ–¥)
    
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    {
        "count": 8,
        "hotel_types": ["beach", "relax", "deluxe"]
    }
    """
    try:
        if request is None:
            request = RandomTourRequest()
        
        logger.info(f"üéØ POST –∑–∞–ø—Ä–æ—Å {request.count} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service.get_random_tours(request)
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/random/generate", response_model=List[HotTourInfo])
async def generate_random_tours(
    count: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤"),
    hotel_types: Optional[str] = Query(
        None,
        description="–¢–∏–ø—ã –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: active,relax,family,health,city,beach,deluxe"
    )
):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    
    –≠—Ç–æ—Ç endpoint –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ç—É—Ä—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç–µ–ª–µ–π
        hotel_types_list = None
        if hotel_types:
            hotel_types_list = [ht.strip() for ht in hotel_types.split(",") if ht.strip()]
        
        request = RandomTourRequest(count=count, hotel_types=hotel_types_list)
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {request.count} —Ç—É—Ä–æ–≤")
        if request.hotel_types:
            logger.info(f"üè® –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º: {request.hotel_types}")
        
        result = await random_tours_service._generate_fully_random_tours(request)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} —Ç—É—Ä–æ–≤")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/random/clear-cache")
async def clear_random_tours_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        cleared_count = await random_tours_service.clear_random_tours_cache()
        
        return {
            "success": True,
            "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤",
            "cleared_cache_keys": cleared_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ò–õ–¨–¢–†–ê–• ==========

@router.get("/random/hotel-types")
async def get_available_hotel_types():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    return {
        "available_hotel_types": [
            {"code": "active", "name": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "description": "–û—Ç–µ–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"},
            {"code": "relax", "name": "–°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö", "description": "–û—Ç–µ–ª–∏ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"},
            {"code": "family", "name": "–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö", "description": "–°–µ–º–µ–π–Ω—ã–µ –æ—Ç–µ–ª–∏"},
            {"code": "health", "name": "–ó–¥–æ—Ä–æ–≤—å–µ", "description": "SPA –∏ wellness –æ—Ç–µ–ª–∏"},
            {"code": "city", "name": "–ì–æ—Ä–æ–¥—Å–∫–æ–π", "description": "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –æ—Ç–µ–ª–∏"},
            {"code": "beach", "name": "–ü–ª—è–∂–Ω—ã–π", "description": "–ü–ª—è–∂–Ω—ã–µ –æ—Ç–µ–ª–∏"},
            {"code": "deluxe", "name": "–õ—é–∫—Å (VIP)", "description": "–†–æ—Å–∫–æ—à–Ω—ã–µ –æ—Ç–µ–ª–∏"}
        ],
        "usage_examples": [
            "GET /api/v1/tours/random?hotel_types=beach,relax",
            "GET /api/v1/tours/random?count=10&hotel_types=deluxe",
            "POST /api/v1/tours/random —Å body: {\"count\": 8, \"hotel_types\": [\"family\", \"beach\"]}"
        ]
    }

@router.get("/random/stats")
async def get_random_tours_stats():
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—É—Ä–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
        cache_keys = await random_tours_service.cache.get_keys_pattern("random_tours_count_*")
        
        cache_info = {}
        for key in cache_keys:
            try:
                cached_data = await random_tours_service.cache.get(key)
                if cached_data:
                    cache_info[key] = {
                        "tours_count": len(cached_data),
                        "sample_countries": list(set([tour.get("countryname", "Unknown") for tour in cached_data[:5]])),
                        "sample_cities": list(set([tour.get("departurename", "Unknown") for tour in cached_data[:5]]))
                    }
            except:
                cache_info[key] = {"error": "Cannot read cache"}
        
        return {
            "system_info": {
                "total_countries_available": len(random_tours_service.all_countries),
                "total_cities_available": len(random_tours_service.all_cities),
                "cache_ttl_seconds": 3600,
                "max_tours_per_request": 20
            },
            "cache_status": {
                "cached_variants": len(cache_keys),
                "cache_details": cache_info
            },
            "supported_hotel_types": ["active", "relax", "family", "health", "city", "beach", "deluxe"],
            "features": {
                "fully_random_countries": True,
                "fully_random_cities": True,
                "hotel_type_filtering": True,
                "random_dates": True,
                "random_duration": True,
                "random_tourists_count": True
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            "error": str(e),
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        }

# ========== –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ==========

@router.get("/directions", response_model=List[DirectionInfo])
async def get_directions():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª–µ–π
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä
    """
    try:
        logger.info("üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        result = await directions_service.get_directions_with_prices()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/popular")
async def get_popular_directions(
    limit: int = Query(6, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    """
    try:
        logger.info(f"üåü –ü–æ–ª—É—á–µ–Ω–∏–µ {limit} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        result = await directions_service.get_directions_subset(limit=limit)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/directions/collect-all")
async def collect_all_directions(
    force_rebuild: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä –¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
):
    """
    –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
    
    –≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ–ª–≥–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)
    """
    try:
        logger.info(f"üåç –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (force_rebuild={force_rebuild})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä
        result = await directions_service.collect_all_directions(force_rebuild=force_rebuild)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        status = await directions_service.get_directions_status()
        
        return {
            "success": True,
            "message": f"–ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            "statistics": {
                "total_directions": len(result),
                "with_real_photos": len([d for d in result if not d.image_link.startswith("https://via.placeholder.com")]),
                "average_price": sum(d.min_price for d in result) / len(result) if result else 0,
                "price_range": {
                    "min": min(d.min_price for d in result) if result else 0,
                    "max": max(d.min_price for d in result) if result else 0
                }
            },
            "cache_info": status.get("master_cache", {}),
            "recommendations": [
                "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—ç—à –Ω–∞ 30 –¥–Ω–µ–π",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/v1/tours/directions –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–±–æ—Ä –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/status")
async def get_directions_status():
    """
    –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        status = await directions_service.get_directions_status()
        return status
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/refresh")
async def refresh_directions():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
    """
    try:
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        result = await directions_service.refresh_directions()
        
        return {
            "success": True,
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            "directions_count": len(result),
            "sample_directions": [
                {
                    "name": d.name,
                    "price": d.min_price,
                    "has_real_photo": not d.image_link.startswith("https://via.placeholder.com")
                }
                for d in result[:5]
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/directions/clear-cache")
async def clear_directions_cache():
    """
    –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        result = await directions_service.clear_all_cache()
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/progress")
async def get_collection_progress():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)
    """
    try:
        progress_data = await directions_service.cache.get("directions_collection_progress")
        
        if progress_data:
            return {
                "in_progress": progress_data.get("status", "").startswith("processing"),
                "progress": progress_data
            }
        else:
            return {
                "in_progress": False,
                "message": "–°–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/directions/fix-issues")
async def fix_directions_issues():
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        result = await directions_service.fix_cache_issues()
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/directions/countries-info")
async def get_countries_info():
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –∏–∑ API
        countries_data = await tourvisor_client.get_references("country")
        countries_list = countries_data.get("country", [])
        
        if not isinstance(countries_list, list):
            countries_list = [countries_list] if countries_list else []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        valid_countries = []
        for country in countries_list:
            country_id = country.get("id")
            country_name = country.get("name")
            
            if country_id and country_name:
                try:
                    valid_countries.append({
                        "id": int(country_id),
                        "name": country_name
                    })
                except (ValueError, TypeError):
                    continue
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        popular_countries = [1, 4, 22, 8, 15, 35, 9, 11]
        popular = [c for c in valid_countries if c["id"] in popular_countries]
        others = [c for c in valid_countries if c["id"] not in popular_countries]
        
        return {
            "total_countries": len(valid_countries),
            "popular_countries": {
                "count": len(popular),
                "countries": popular
            },
            "other_countries": {
                "count": len(others),
                "sample": others[:10] if len(others) > 10 else others
            },
            "collection_info": {
                "estimated_time": f"{len(valid_countries) * 0.5:.1f} - {len(valid_countries) * 1:.1f} –º–∏–Ω—É—Ç",
                "features": [
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª–µ–π",
                    "–†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫",
                    "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –¥–Ω–µ–π)",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
                ]
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∞—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô ==========

@router.get("/directions/diagnose")
async def diagnose_directions_system():
    """
    –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        diagnosis = {
            "timestamp": datetime.now().isoformat(),
            "components": {},
            "recommendations": []
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º TourVisor API
        try:
            countries_test = await tourvisor_client.get_references("country")
            diagnosis["components"]["tourvisor_api"] = {
                "status": "healthy" if countries_test else "degraded",
                "countries_available": len(countries_test.get("country", [])) if countries_test else 0
            }
        except Exception as e:
            diagnosis["components"]["tourvisor_api"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏
        try:
            api_cache = await directions_service.cache.get("api_directions_response")
            master_cache = await directions_service.cache.get("master_directions_all_countries")
            
            diagnosis["components"]["cache_system"] = {
                "api_cache": {
                    "exists": bool(api_cache),
                    "count": len(api_cache) if api_cache else 0
                },
                "master_cache": {
                    "exists": bool(master_cache),
                    "count": len(master_cache) if master_cache else 0
                }
            }
        except Exception as e:
            diagnosis["components"]["cache_system"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not diagnosis["components"].get("cache_system", {}).get("master_cache", {}).get("exists"):
            diagnosis["recommendations"].append("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä: POST /api/v1/tours/directions/collect-all")
        
        if diagnosis["components"].get("tourvisor_api", {}).get("status") != "healthy":
            diagnosis["recommendations"].append("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å TourVisor API - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        if not diagnosis["recommendations"]:
            diagnosis["recommendations"].append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return diagnosis
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –¢–£–†–û–í ==========

@router.post("/actualize", response_model=DetailedTourInfo)
async def actualize_tour(request: TourActualizationRequest):
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–π—Å–æ–≤
    """
    try:
        return await tour_service.actualize_tour(request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/tour/{tour_id}", response_model=DetailedTourInfo)
async def get_tour_by_id(tour_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ –ø–æ –µ–≥–æ ID
    """
    try:
        result = await tour_service.search_tour_by_id(tour_id)
        if not result:
            raise HTTPException(status_code=404, detail="–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return result
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search-by-hotel", response_model=List[HotelInfo])
async def search_tours_by_hotel(
    hotel_name: str = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"),
    country_code: int = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")
):
    """
    –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–µ–ª—è
    """
    try:
        return await tour_service.search_tours_by_hotel_name(hotel_name, country_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –æ—Ç–µ–ª—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –°–¢–ê–¢–£–° ==========

@router.get("/test-random-search")
async def test_random_search():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ç—É—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        request = RandomTourRequest(count=1)
        result = await random_tours_service._generate_fully_random_tours(request)
        
        if result:
            tour = result[0]
            return {
                "success": True,
                "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "test_tour": {
                    "hotel_name": tour.hotelname,
                    "country": tour.countryname,
                    "departure_city": tour.departurename,
                    "nights": tour.nights,
                    "price": tour.price,
                    "stars": tour.hotelstars
                }
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/test-connection")
async def test_tourvisor_connection():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API
    """
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TourVisor API...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        result = await tourvisor_client.get_references("departure")
        
        if result:
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TourVisor API —É—Å–ø–µ—à–Ω–æ",
                "data_keys": list(result.keys()),
                "sample_data": str(result)[:200] + "..." if len(str(result)) > 200 else str(result)
            }
        else:
            return {
                "success": False,
                "message": "TourVisor API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TourVisor API: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        }

@router.get("/status")
async def get_system_status():
    """
    –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ç—É—Ä–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        status = {
            "timestamp": datetime.now().isoformat(),
            "components": {},
            "overall_health": "unknown"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TourVisor API
        try:
            test_result = await tourvisor_client.get_references("departure")
            status["components"]["tourvisor_api"] = {
                "status": "healthy" if test_result else "degraded",
                "response_time": "< 1s"
            }
        except Exception as e:
            status["components"]["tourvisor_api"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        try:
            test_key = "health_check_test"
            await tour_service.cache.set(test_key, "test", ttl=60)
            test_value = await tour_service.cache.get(test_key)
            await tour_service.cache.delete(test_key)
            
            status["components"]["cache"] = {
                "status": "healthy" if test_value == "test" else "degraded"
            }
        except Exception as e:
            status["components"]["cache"] = {
                "status": "unhealthy",
                "error": str(e)
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        all_statuses = [comp["status"] for comp in status["components"].values()]
        if all(s == "healthy" for s in all_statuses):
            status["overall_health"] = "healthy"
        elif any(s == "unhealthy" for s in all_statuses):
            status["overall_health"] = "unhealthy"
        else:
            status["overall_health"] = "degraded"
        
        return status
        
    except Exception as e:
        return {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "unhealthy",
            "error": str(e) 
        }
@router.post("/random/clear-hotel-type-cache")
async def clear_hotel_type_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç—É—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π
    """
    try:
        cleared_count = await random_tours_service.clear_hotel_type_cache()
        
        return {
            "success": True,
            "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ —Ç—É—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–µ–ª–µ–π",
            "cleared_cache_keys": cleared_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Ç–∏–ø–æ–≤ –æ—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))