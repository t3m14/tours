# app/services/directions_service.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
from typing import List, Dict, Any, Optional
from app.core.tourvisor_client import tourvisor_client
from app.services.cache_service import cache_service

logger = logging.getLogger(__name__)

class DirectionsService:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    
    def __init__(self):
        pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π tourvisor_client
        
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω –∏–∑ –¢–ó (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ API)
    COUNTRIES_MAPPING = {
        "–†–æ—Å—Å–∏—è": {"country_id": 47, "country_code": 47},
        "–¢—É—Ä—Ü–∏—è": {"country_id": 4, "country_code": 4},
        "–¢–∞–∏–ª–∞–Ω–¥": {"country_id": 2, "country_code": 2},
        "–û–ê–≠": {"country_id": 9, "country_code": 9},
        "–ï–≥–∏–ø–µ—Ç": {"country_id": 1, "country_code": 1},
        "–ú–∞–ª—å–¥–∏–≤—ã": {"country_id": 8, "country_code": 8},
        "–ö–∏—Ç–∞–π": {"country_id": 13, "country_code": 13},
        "–®—Ä–∏-–õ–∞–Ω–∫–∞": {"country_id": 12, "country_code": 12},
        "–ê–±—Ö–∞–∑–∏—è": {"country_id": 46, "country_code": 46},
        "–ö—É–±–∞": {"country_id": 10, "country_code": 10},
        "–ò–Ω–¥–∏—è": {"country_id": 3, "country_code": 3},
        "–í—å–µ—Ç–Ω–∞–º": {"country_id": 16, "country_code": 16},
        # "–ö–∞–º–±–æ–¥–∂–∞": {"country_id": 40, "country_code": 40},
    }

 
    async def get_directions_by_country(self, country_name: str) -> List[Dict[str, Any]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∫–µ—à–∞ –∫–∞–∫ –≤ random_tours_service
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à, –ø–æ—Ç–æ–º –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        """
        if country_name not in self.COUNTRIES_MAPPING:
            logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country_name}")
            return []
        
        country_info = self.COUNTRIES_MAPPING[country_name]
        country_id = country_info["country_id"]
        cache_key = f"directions_with_prices_country_{country_id}"
        
        # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞!
        try:
            cached_directions = await cache_service.get(cache_key)
            if cached_directions:
                logger.info(f"üì¶ –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –û–¢–î–ê–ß–ê {len(cached_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –∫–µ—à–∞ –¥–ª—è {country_name}")
                return cached_directions
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ—à–∞ –¥–ª—è {country_name}: {e}")
        
        # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {country_name} (–∫–µ—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        
        try:
            # –í–°–Ø –í–ê–®–ê –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:
            logger.info(f"üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã: {country_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∞ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–ø–ø–∏–Ω–≥–µ
            if country_name not in self.COUNTRIES_MAPPING:
                raise ValueError(f"–°—Ç—Ä–∞–Ω–∞ '{country_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω")
            
            country_info = self.COUNTRIES_MAPPING[country_name]
            country_id = country_info["country_id"]
            
            if country_id is None:
                logger.warning(f"‚ö†Ô∏è –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è '{country_name}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                return []
            
            logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è country_id: {country_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º 12 —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            cities = await self._get_top_cities_for_country(country_id, limit=12)
            logger.info(f"üèôÔ∏è –ü–æ–ª—É—á–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ API")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–∏—Å–∫–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
            result = []
            for i, city in enumerate(cities):
                city_name = city.get("name", "")
                region_id = city.get("id")
                is_synthetic = city.get("synthetic", False)
                
                if not city_name:
                    continue
                
                logger.info(f"üîç [{i+1}/{len(cities)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city_name} {'(—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π)' if is_synthetic else ''}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
                min_price, image_link = await self._get_price_and_image_safe(
                    country_id, region_id, city_name, is_synthetic
                )
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è
                direction_item = {
                    "country_name": country_name,
                    "country_id": country_id,
                    "city_name": city_name,
                    "city_id": region_id,
                    "min_price": min_price,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –±–µ–∑ —Ç—É—Ä–æ–≤
                    "image_link": image_link  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
                }
                result.append(direction_item)
                
                status_price = f"üí∞{min_price}" if min_price else "‚ùå–ù–µ—Ç"
                status_image = "üñºÔ∏è‚úÖ" if image_link else "üñºÔ∏è‚ùå"
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {city_name}, —Ü–µ–Ω–∞: {status_price}, –∫–∞—Ä—Ç–∏–Ω–∫–∞: {status_image}")
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                if i < len(cities) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    import asyncio
                    await asyncio.sleep(1.0)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞—Ö
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            valid_results = self._validate_and_fix_results(result, country_id, country_name)
            
            # –ò–ó–ú–ï–ù–Ø–ï–ú: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 30 –¥–Ω–µ–π (–≤–º–µ—Å—Ç–æ 2 —á–∞—Å–æ–≤) 
            if valid_results:
                try:
                    await cache_service.set(cache_key, valid_results, ttl=86400 * 30)  # 30 –¥–Ω–µ–π
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(valid_results)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–µ—à –¥–ª—è {country_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à –¥–ª—è {country_name}: {e}")
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(valid_results)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è {country_name}")
            return valid_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {country_name}: {e}")
            
            # –í–ê–ñ–ù–û: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                backup_cache = await cache_service.get(cache_key)
                if backup_cache:
                    logger.info(f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–µ—à –¥–ª—è {country_name}")
                    return backup_cache
            except Exception:
                pass
            
            return []
    def _validate_and_fix_results(self, results: List[Dict], country_id: int, country_name: str) -> List[Dict]:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ—Ç fallback –¥–∞–Ω–Ω—ã–µ
        """
        logger.info(f"üîß –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {country_name}")
        
        fixed_results = []
        null_prices_count = 0
        null_images_count = 0
        
        for item in results:
            city_name = item["city_name"]
            min_price = item["min_price"]
            image_link = item["image_link"]
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL —Ü–µ–Ω—ã
            if min_price is None:
                null_prices_count += 1
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback —Ü–µ–Ω—É
                fallback_price = self._generate_mock_price(country_id, city_name)
                item["min_price"] = fallback_price
                logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {city_name}: {fallback_price}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∫–∞—Ä—Ç–∏–Ω–∫–∏
            if image_link is None:
                null_images_count += 1
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –∫–∞—Ä—Ç–∏–Ω–∫—É
                fallback_image = self._generate_fallback_image_link(country_id, city_name)
                item["image_link"] = fallback_image
                logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {fallback_image}")
            
            fixed_results.append(item)
        
        logger.info(f"üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω: {null_prices_count}, –∫–∞—Ä—Ç–∏–Ω–æ–∫: {null_images_count}")
        return fixed_results

    async def _get_price_and_image_safe(self, country_id: int, region_id: str, city_name: str, is_synthetic: bool) -> tuple[Optional[int], Optional[str]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        try:
            # –î–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
            if is_synthetic or not region_id or region_id.startswith("synthetic"):
                logger.info(f"üé≠ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ {city_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                mock_price = self._generate_mock_price(country_id, city_name)
                mock_image = self._generate_fallback_image_link(country_id, city_name)
                return mock_price, mock_image
            
            # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫
            return await self._get_min_price_and_image_for_region(country_id, region_id, city_name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city_name}: {e}")
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
            mock_price = self._generate_mock_price(country_id, city_name)
            mock_image = self._generate_fallback_image_link(country_id, city_name)
            return mock_price, mock_image

    async def _get_top_cities_for_country(self, country_id: int, limit: int = 12) -> List[Dict[str, Any]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-N —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API
        
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        1. –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        2. –ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
        3. –õ—É—á—à–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        """
        try:
            logger.info(f"üåÜ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ {limit} –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è country_id: {country_id}")
            
            final_cities = []
            
            # –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ API
            try:
                regions_data = await tourvisor_client.get_references(
                    "region", 
                    regcountry=country_id
                )
                
                logger.debug(f"üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
                regions = regions_data.get("lists", {}).get("regions", {}).get("region", [])
                if not isinstance(regions, list):
                    regions = [regions] if regions else []
                
                logger.info(f"üóÇÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                seen_names = set()
                valid_regions = []
                
                for region in regions:
                    region_country = region.get("country")
                    region_name = region.get("name", "").strip()
                    region_id = region.get("id")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                    if not region_name or not region_id:
                        continue
                    if region_country and str(region_country) != str(country_id):
                        continue
                    if region_name.lower() in seen_names:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    
                    seen_names.add(region_name.lower())
                    valid_regions.append(region)
                
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ API: {len(valid_regions)}")
                final_cities.extend(valid_regions[:limit])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ API: {e}")
            
            # –®–ê–ì 2: –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            if len(final_cities) < limit:
                needed = limit - len(final_cities)
                logger.warning(f"‚ö†Ô∏è –ù—É–∂–Ω–æ –µ—â–µ {needed} –≥–æ—Ä–æ–¥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ")
                
                synthetic_cities = self._create_synthetic_cities(country_id, needed)
                final_cities.extend(synthetic_cities)
                
                logger.info(f"üèóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ {len(synthetic_cities)} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤")
            
            # –®–ê–ì 3: –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            final_cities = final_cities[:limit]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            real_count = len([c for c in final_cities if not c.get("synthetic", False)])
            synthetic_count = len([c for c in final_cities if c.get("synthetic", False)])
            
            logger.info(f"üèÅ –ò–¢–û–ì–û: {len(final_cities)} –≥–æ—Ä–æ–¥–æ–≤ (—Ä–µ–∞–ª—å–Ω—ã—Ö: {real_count}, —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö: {synthetic_count})")
            
            return final_cities
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
            logger.info(f"üé≠ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {limit} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –∫–∞–∫ fallback")
            # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            return self._create_synthetic_cities(country_id, limit)

    def _create_synthetic_cities(self, country_id: int, count: int) -> List[Dict[str, Any]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
        
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        1. –ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
        2. –õ—É—á—à–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        popular_cities_by_country = {
            1: ["–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö", "–•—É—Ä–≥–∞–¥–∞", "–ö–∞–∏—Ä", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—è", "–ú–∞—Ä—Å–∞-–ê–ª–∞–º", "–î–∞—Ö–∞–±", "–¢–∞–±–∞", "–°–∞—Ñ–∞–≥–∞", "–≠–ª—å-–ì—É–Ω–∞", "–°–æ–º–∞-–ë–µ–π", "–ú–∞–∫–∞–¥–∏-–ë–µ–π", "–ù—É–≤–µ–π–±–∞"],
            2: ["–ü—Ö—É–∫–µ—Ç", "–ü–∞—Ç—Ç–∞–π—è", "–ë–∞–Ω–≥–∫–æ–∫", "–°–∞–º—É–∏", "–ö—Ä–∞–±–∏", "–ü—Ö–∏-–ü—Ö–∏", "–•—É–∞-–•–∏–Ω", "–ß–∏–∞–Ω–≥–º–∞–π", "–ö–∞–æ-–õ–∞–∫", "–ö–æ-–ß–∞–Ω–≥", "–†–∞–π–æ–Ω–≥", "–°—É—Ä–∞—Ç-–¢–∞–Ω–∏"],
            3: ["–ì–æ–∞", "–ö–µ—Ä–∞–ª–∞", "–ú—É–º–±–∞–∏", "–î–µ–ª–∏", "–ê–≥—Ä–∞", "–î–∂–∞–π–ø—É—Ä", "–ß–µ–Ω–Ω–∞–π", "–ë–∞–Ω–≥–∞–ª–æ—Ä", "–ö–∞–ª—å–∫—É—Ç—Ç–∞", "–í–∞—Ä–∞–Ω–∞—Å–∏", "–†–∏—à–∏–∫–µ—à", "–î–∞—Ä–¥–∂–∏–ª–∏–Ω–≥"],
            4: ["–ê–Ω—Ç–∞–ª—å—è", "–°—Ç–∞–º–±—É–ª", "–ö–µ–º–µ—Ä", "–°–∏–¥–µ", "–ë–µ–ª–µ–∫", "–ê–ª–∞–Ω—å—è", "–ú–∞—Ä–º–∞—Ä–∏—Å", "–ë–æ–¥—Ä—É–º", "–§–µ—Ç—Ö–∏–µ", "–ö–∞–ø–ø–∞–¥–æ–∫–∏—è", "–ò–∑–º–∏—Ä", "–ö—É—à–∞–¥–∞—Å—ã"],
            8: ["–ú–∞–ª–µ", "–ê—Ä–∏-–ê—Ç–æ–ª–ª", "–ë–∞–∞-–ê—Ç–æ–ª–ª", "–õ–∞–≤–∏–∞–Ω–∏-–ê—Ç–æ–ª–ª", "–ö–∞–∞—Ñ—É-–ê—Ç–æ–ª–ª", "–†–∞—Å-–ê—Ç–æ–ª–ª", "–î–∞–∞–ª—É-–ê—Ç–æ–ª–ª", "–§–∞–∞—Ñ—É-–ê—Ç–æ–ª–ª", "–•–∞-–ê—Ç–æ–ª–ª", "–õ—Ö–∞–≤–∏–∞–Ω–∏-–ê—Ç–æ–ª–ª", "–ú–∏–∏–º—É-–ê—Ç–æ–ª–ª", "–í–∞avu-–ê—Ç–æ–ª–ª"],
            9: ["–î—É–±–∞–π", "–ê–±—É-–î–∞–±–∏", "–®–∞—Ä–¥–∂–∞", "–ê–¥–∂–º–∞–Ω", "–†–∞—Å-—ç–ª—å-–•–∞–π–º–∞", "–§—É–¥–∂–µ–π—Ä–∞", "–£–º–º-—ç–ª—å-–ö–∞–π–≤–∞–π–Ω", "–ê–ª—å-–ê–π–Ω", "–î–∏–±–±–∞", "–ö–æ—Ä—Ñ–∞–∫–∫–∞–Ω", "–•–æ—Ä-–§–∞–∫–∫–∞–Ω", "–î–∏–±–±–∞-–ê–ª—å-–•–∏—Å–Ω"],
            10: ["–ì–∞–≤–∞–Ω–∞", "–í–∞—Ä–∞–¥–µ—Ä–æ", "–ö–∞–π–æ-–ö–æ–∫–æ", "–ö–∞–π–æ-–°–∞–Ω—Ç–∞-–ú–∞—Ä–∏—è", "–û–ª—å–≥–∏–Ω", "–°–∞–Ω—Ç—å—è–≥–æ-–¥–µ-–ö—É–±–∞", "–¢—Ä–∏–Ω–∏–¥–∞–¥", "–°—å–µ–Ω—Ñ—É—ç–≥–æ—Å", "–ö–∞–π–æ-–õ–∞—Ä–≥–æ", "–ú–∞—Ç–∞–Ω—Å–∞—Å", "–ü–∏–Ω–∞—Ä-–¥–µ–ª—å-–†–∏–æ", "–ö–∞–º–∞–≥—É—ç–π"],
            12: ["–ö–æ–ª–æ–º–±–æ", "–ö–∞–Ω–¥–∏", "–ì–∞–ª–ª–µ", "–ù—É–≤–∞—Ä–∞-–≠–ª–∏—è", "–ê–Ω—É—Ä–∞–¥—Ö–∞–ø—É—Ä–∞", "–ü–æ–ª–æ–Ω–Ω–∞—Ä—É–≤–∞", "–°–∏–≥–∏—Ä–∏—è", "–î–∞–º–±—É–ª–ª–∞", "–¢—Ä–∏–Ω–∫–æ–º–∞–ª–∏", "–•–∏–∫–∫–∞–¥—É–≤–∞", "–ú–∏—Ä–∏—Å—Å–∞", "–ë–µ–Ω—Ç–æ—Ç–∞"],
            13: ["–ü–µ–∫–∏–Ω", "–®–∞–Ω—Ö–∞–π", "–ì—É–∞–Ω—á–∂–æ—É", "–•–∞–π–Ω–∞–Ω—å", "–°–∏–∞–Ω—å", "–ß—ç–Ω–¥—É", "–•–∞–Ω—á–∂–æ—É", "–°—É—á–∂–æ—É", "–ì—É–π–ª–∏–Ω—å", "–õ–∏—Ü–∑—è–Ω", "–î–∞–ª–∏", "–ö—É–Ω—å–º–∏–Ω"],  # –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –ö–∏—Ç–∞—è
            16: ["–•–æ—à–∏–º–∏–Ω", "–•–∞–Ω–æ–π", "–ù—è—á–∞–Ω–≥", "–§—É–∫—É–æ–∫", "–î–∞–ª–∞—Ç", "–•–æ–π–∞–Ω", "–•—é—ç", "–î–∞–Ω–∞–Ω–≥", "–§–∞–Ω—Ç—å–µ—Ç", "–í—É–Ω–≥—Ç–∞—É", "–°–∞–ø–∞", "–•–∞–ª–æ–Ω–≥"],
            # 40: ["–°–∏–µ–º-–†–µ–∞–ø", "–ü–Ω–æ–º-–ü–µ–Ω—å", "–°–∏–∞–Ω—É–∫–≤–∏–ª—å", "–ë–∞—Ç—Ç–∞–º–±–∞–Ω–≥", "–ö–∞–º–ø–æ—Ç", "–ö–µ–ø", "–ö–æ—Ö-–†–æ–Ω–≥", "–ö—Ä–∞—Ç–∏–µ", "–ú–æ–Ω–¥—É–ª–∫–∏—Ä–∏", "–†–∞—Ç–∞–Ω–∞–∫–∏—Ä–∏", "–ü—Ä–µ–∞—Ö-–í–∏—Ö–µ–∞—Ä", "–°—Ç—ã–Ω–≥-–¢—Ä–µ–Ω–≥"],
            46: ["–°—É—Ö—É–º", "–ì–∞–≥—Ä–∞", "–ü–∏—Ü—É–Ω–¥–∞", "–ù–æ–≤—ã–π-–ê—Ñ–æ–Ω", "–û—á–∞–º—á–∏—Ä–∞", "–ì—É–¥–∞—É—Ç–∞", "–¶–∞–Ω–¥—Ä–∏–ø—à", "–ú—é—Å—Å–µ—Ä–∞", "–†–∏—Ü–∞", "–ü—Å—Ö—É", "–¢–∫—É–∞—Ä—á–∞–ª", "–ì–∞–ª–∏"],
            47: ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–æ—á–∏", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–≥–æ—Ä–æ–¥", "–°—É–∑–¥–∞–ª—å", "–ó–æ–ª–æ—Ç–æ–µ-–∫–æ–ª—å—Ü–æ", "–ë–∞–π–∫–∞–ª", "–ö–∞–º—á–∞—Ç–∫–∞", "–ê–ª—Ç–∞–π"]
        }
        
        cities = popular_cities_by_country.get(country_id, [f"–ì–æ—Ä–æ–¥-{i+1}" for i in range(count)])
        
        synthetic_cities = []
        for i in range(min(count, len(cities))):
            synthetic_cities.append({
                "id": f"synthetic_{country_id}_{i+1000}",
                "name": cities[i],
                "country": str(country_id),
                "synthetic": True,
                "generated": True  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
            })
        
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ {len(synthetic_cities)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}")
        return synthetic_cities

    async def _get_min_price_and_image_for_region(self, country_id: int, region_id: str, city_name: str) -> tuple[Optional[int], Optional[str]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        1. –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 120 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        2. –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        3. –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π fallback
        """
        try:
            logger.debug(f"üí∞üñºÔ∏è –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} (region_id: {region_id})")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            from datetime import datetime, timedelta
            
            # –î–∞—Ç—ã: –∑–∞–≤—Ç—Ä–∞ + –Ω–µ–¥–µ–ª—è (–∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            tomorrow = datetime.now() + timedelta(days=1)
            week_later = datetime.now() + timedelta(days=8)
            
            search_params = {
                "departure": 1,  # –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "country": country_id,
                "regions": region_id,
                "datefrom": tomorrow.strftime("%d.%m.%Y"),
                "dateto": week_later.strftime("%d.%m.%Y"),
                "nightsfrom": 7,
                "nightsto": 10,
                "adults": 2,
                "format": "json"
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
            logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name}")
            request_id = await tourvisor_client.search_tours(search_params)
            
            if not request_id:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è {city_name}")
                return self._generate_mock_price(country_id, city_name), self._generate_fallback_image_link(country_id, city_name)
            
            logger.debug(f"üîÑ Request ID –¥–ª—è {city_name}: {request_id}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 120 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            import asyncio
            max_attempts = 60  # 60 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 120 —Å–µ–∫
            
            for attempt in range(max_attempts):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
                    status_result = await tourvisor_client.get_search_status(request_id)
                    
                    if not status_result:
                        continue
                        
                    status_data = status_result.get("data", {}).get("status", {})
                    state = status_data.get("state", "")
                    min_price = status_data.get("minprice")
                    hotels_found = status_data.get("hotelsfound", 0)
                    tours_found = status_data.get("toursfound", 0)
                    
                    logger.debug(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state}, —Ü–µ–Ω–∞={min_price}, –æ—Ç–µ–ª–∏={hotels_found}, —Ç—É—Ä—ã={tours_found}")
                    
                    if state == "finished":
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
                        price = self._process_price(min_price, hotels_found, tours_found, country_id, city_name)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
                        image_link = await self._extract_image_from_search_results(request_id, city_name)
                        if not image_link:
                            image_link = self._generate_fallback_image_link(country_id, city_name)
                        
                        return price, image_link
                    
                    elif state == "error":
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name}")
                        break
                    
                    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.debug(f"üîÑ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {city_name}: {e}")
                    await asyncio.sleep(2)
                    continue
            
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name} (120 —Å–µ–∫)")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
            mock_price = self._generate_mock_price(country_id, city_name)
            mock_image = self._generate_fallback_image_link(country_id, city_name)
            return mock_price, mock_image
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏
            mock_price = self._generate_mock_price(country_id, city_name)
            mock_image = self._generate_fallback_image_link(country_id, city_name)
            return mock_price, mock_image

    def _process_price(self, min_price, hotels_found: int, tours_found: int, country_id: int, city_name: str) -> Optional[int]:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        if min_price is not None:
            try:
                price_val = int(float(min_price)) if min_price != "" else 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
                if price_val > 0 and price_val < 1000000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã —Ü–µ–Ω—ã
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {city_name}: {price_val} —Ä—É–±.")
                    return price_val
                elif price_val == 0:
                    if hotels_found == 0 or tours_found == 0:
                        logger.warning(f"üö´ –ù–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è {city_name}")
                        return self._generate_mock_price(country_id, city_name)
                    else:
                        logger.warning(f"‚ö†Ô∏è –¶–µ–Ω–∞ 0 –¥–ª—è {city_name}, –Ω–æ –µ—Å—Ç—å –æ—Ç–µ–ª–∏")
                        return self._generate_mock_price(country_id, city_name)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ä–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞ {price_val} –¥–ª—è {city_name}")
                    return self._generate_mock_price(country_id, city_name)
            except (ValueError, TypeError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã {min_price} –¥–ª—è {city_name}: {e}")
                return self._generate_mock_price(country_id, city_name)
        
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return self._generate_mock_price(country_id, city_name)

    async def _extract_image_from_search_results(self, request_id: str, city_name: str) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        try:
            logger.debug(f"üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name} –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ {request_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            search_results = await tourvisor_client.get_search_results(request_id)
            
            if not search_results:
                logger.debug(f"üîç –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è {city_name}")
                return None
            
            # –ò—â–µ–º –æ—Ç–µ–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            result_data = search_results.get("data", {}).get("result", {})
            hotels = result_data.get("hotel", [])
            
            if not isinstance(hotels, list):
                hotels = [hotels] if hotels else []
            
            logger.debug(f"üè® –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–ª—è {city_name}")
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            for i, hotel in enumerate(hotels[:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                picture_link = hotel.get("picturelink")
                hotel_name = hotel.get("hotelname", f"–û—Ç–µ–ª—å {i+1}")
                
                if picture_link and self._is_valid_image_link(picture_link):
                    logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {hotel_name} - {picture_link}")
                    return picture_link
                else:
                    logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç {hotel_name}: {picture_link}")
            
            logger.warning(f"üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è {city_name}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {city_name}: {e}")
            return None

    def _is_valid_image_link(self, link: str) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É"""
        if not link or not isinstance(link, str):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ URL
        if not (link.startswith("http://") or link.startswith("https://")):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã)
        if len(link) < 10:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp']
        link_lower = link.lower()
        
        # –õ–∏–±–æ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫
        has_extension = any(link_lower.endswith(ext) for ext in image_extensions)
        has_image_pattern = any(pattern in link_lower for pattern in ['image', 'img', 'pic', 'photo', 'hotel_pics'])
        
        return has_extension or has_image_pattern
    
    def _generate_mock_price(self, country_id: int, city_name: str) -> Optional[int]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è mock-—Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
        
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        1. –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
        2. –£—á–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–æ–≤
        3. –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã
        """
        import random
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)
            base_prices = {
                1: 45000,   # –ï–≥–∏–ø–µ—Ç
                2: 85000,   # –¢–∞–∏–ª–∞–Ω–¥  
                3: 75000,   # –ò–Ω–¥–∏—è
                4: 35000,   # –¢—É—Ä—Ü–∏—è
                8: 150000,  # –ú–∞–ª—å–¥–∏–≤—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ)
                9: 95000,   # –û–ê–≠ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
                10: 105000, # –ö—É–±–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
                12: 85000,  # –®—Ä–∏-–õ–∞–Ω–∫–∞
                13: 70000,  # –ö–∏—Ç–∞–π (—É–≤–µ–ª–∏—á–µ–Ω–æ)
                16: 80000,  # –í—å–µ—Ç–Ω–∞–º
                # 40: 75000,  # –ö–∞–º–±–æ–¥–∂–∞
                46: 25000,  # –ê–±—Ö–∞–∑–∏—è
                47: 25000,  # –†–æ—Å—Å–∏—è
            }
            
            base_price = base_prices.get(country_id, 60000)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—á–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–æ–≤
            popular_cities_multiplier = {
                # –ï–≥–∏–ø–µ—Ç
                "–®–∞—Ä–º-–≠–ª—å-–®–µ–π—Ö": 1.1, "–•—É—Ä–≥–∞–¥–∞": 1.0, "–ö–∞–∏—Ä": 0.9,
                # –¢–∞–∏–ª–∞–Ω–¥
                "–ü—Ö—É–∫–µ—Ç": 1.2, "–ü–∞—Ç—Ç–∞–π—è": 1.0, "–ë–∞–Ω–≥–∫–æ–∫": 0.9, "–°–∞–º—É–∏": 1.15,
                # –¢—É—Ä—Ü–∏—è
                "–ê–Ω—Ç–∞–ª—å—è": 1.0, "–°—Ç–∞–º–±—É–ª": 0.85, "–ö–µ–º–µ—Ä": 1.05, "–ë–µ–ª–µ–∫": 1.15,
                # –û–ê–≠
                "–î—É–±–∞–π": 1.3, "–ê–±—É-–î–∞–±–∏": 1.2, "–®–∞—Ä–¥–∂–∞": 0.9,
                # –ú–∞–ª—å–¥–∏–≤—ã
                "–ú–∞–ª–µ": 1.0, "–ê—Ä–∏-–ê—Ç–æ–ª–ª": 1.25, "–ë–∞–∞-–ê—Ç–æ–ª–ª": 1.3,
                # –ö–∏—Ç–∞–π
                "–ü–µ–∫–∏–Ω": 1.1, "–®–∞–Ω—Ö–∞–π": 1.15, "–•–∞–π–Ω–∞–Ω—å": 1.2, "–ì—É–∞–Ω—á–∂–æ—É": 1.0,
            }
            
            city_multiplier = popular_cities_multiplier.get(city_name, 1.0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            adjusted_price = int(base_price * city_multiplier)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é ¬±15% (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            variation = random.randint(-15, 15) / 100
            final_price = int(adjusted_price * (1 + variation))
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç—ã—Å—è—á –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Ü–µ–Ω
            final_price = round(final_price, -3)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 15000
            final_price = max(final_price, 15000)
            
            logger.info(f"üé≠ Mock-—Ü–µ–Ω–∞ –¥–ª—è {city_name}: {final_price} —Ä—É–±. (–±–∞–∑–∞: {base_price}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: {city_multiplier})")
            return final_price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock-—Ü–µ–Ω—ã –¥–ª—è {city_name}: {e}")
            return 50000  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞

    def _generate_fallback_image_link(self, country_id: int, city_name: str) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        2. CDN —Å—Å—ã–ª–∫–∏ –∫–∞–∫ fallback
        3. –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        """
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç—Ä–∞–Ω
        country_fallback_images = {
            1: "/static/mockup_images/egypt.jpg",        # –ï–≥–∏–ø–µ—Ç
            2: "/static/mockup_images/thailand.webp",     # –¢–∞–∏–ª–∞–Ω–¥  
            3: "/static/mockup_images/india.webp",        # –ò–Ω–¥–∏—è
            4: "/static/mockup_images/turkey.jpeg",       # –¢—É—Ä—Ü–∏—è
            8: "/static/mockup_images/maldives.jpg",      # –ú–∞–ª—å–¥–∏–≤—ã
            9: "/static/mockup_images/oae.jpg",           # –û–ê–≠ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            10: "/static/mockup_images/kuba.jpg",         # –ö—É–±–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            12: "/static/mockup_images/sri_lanka.jpg",    # –®—Ä–∏-–õ–∞–Ω–∫–∞
            13: "/static/mockup_images/china.jpg",        # –ö–∏—Ç–∞–π
            16: "/static/mockup_images/vietnam.jpg",      # –í—å–µ—Ç–Ω–∞–º
            40: "/static/mockup_images/kambodja.jpg",     # –ö–∞–º–±–æ–¥–∂–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            46: "/static/mockup_images/abkhazia.jpg",     # –ê–±—Ö–∞–∑–∏—è
            47: "/static/mockup_images/russia.webp",      # –†–æ—Å—Å–∏—è
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ç—Ä–∞–Ω—ã
        fallback = country_fallback_images.get(country_id)
        if fallback:
            logger.info(f"üé® Fallback –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {fallback}")
            return fallback
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: CDN fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        cdn_fallback_images = {
            1: "https://images.unsplash.com/photo-1539650116574-75c0c6d68370?w=400",  # –ï–≥–∏–ø–µ—Ç - –ø–∏—Ä–∞–º–∏–¥—ã
            2: "https://images.unsplash.com/photo-1552465011-b4e21bf6e79a?w=400",  # –¢–∞–∏–ª–∞–Ω–¥ - —Ö—Ä–∞–º
            3: "https://images.unsplash.com/photo-1524492412937-b28074a5d7da?w=400",  # –ò–Ω–¥–∏—è - –¢–∞–¥–∂-–ú–∞—Ö–∞–ª
            4: "https://images.unsplash.com/photo-1541432901042-2d8bd64b4a9b?w=400",  # –¢—É—Ä—Ü–∏—è - –≤–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã
            8: "https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400",  # –ú–∞–ª—å–¥–∏–≤—ã - –±—É–Ω–≥–∞–ª–æ
            9: "https://images.unsplash.com/photo-1512453979798-5ea266f8880c?w=400",  # –û–ê–≠ - –î—É–±–∞–π
            10: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400", # –ö—É–±–∞ - —Å—Ç–∞—Ä–∞—è –ì–∞–≤–∞–Ω–∞
            12: "https://images.unsplash.com/photo-1566302350832-46ba5b84f295?w=400", # –®—Ä–∏-–õ–∞–Ω–∫–∞ - —á–∞–π–Ω—ã–µ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏
            13: "https://images.unsplash.com/photo-1508804185872-d7badad00f7d?w=400", # –ö–∏—Ç–∞–π - –í–µ–ª–∏–∫–∞—è —Å—Ç–µ–Ω–∞
            16: "https://images.unsplash.com/photo-1540611025311-01df3cef54b5?w=400", # –í—å–µ—Ç–Ω–∞–º - –±—É—Ö—Ç–∞ –•–∞–ª–æ–Ω–≥
            # 40: "https://images.unsplash.com/photo-1563492065-48c9655b7e81?w=400", # –ö–∞–º–±–æ–¥–∂–∞ - –ê–Ω–≥–∫–æ—Ä –í–∞—Ç
            46: "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400", # –ê–±—Ö–∞–∑–∏—è - –≥–æ—Ä—ã —É –º–æ—Ä—è
            47: "https://images.unsplash.com/photo-1547036967-23d11aacaee0?w=400", # –†–æ—Å—Å–∏—è - –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
        }
        
        cdn_fallback = cdn_fallback_images.get(country_id)
        if cdn_fallback:
            logger.info(f"üåê CDN fallback –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {cdn_fallback}")
            return cdn_fallback
        
        # –û–±—â–∞—è –∑–∞–≥–ª—É—à–∫–∞
        default_fallback = "https://images.unsplash.com/photo-1488646953014-85cb44e25828?w=400"  # –ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç–µ–ª—å
        logger.info(f"üé® –û–±—â–∞—è fallback –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {city_name}: {default_fallback}")
        return default_fallback

    async def get_all_directions(self) -> List[Dict[str, Any]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
        
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω
        2. –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        try:
            logger.info("üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = []
            for country_name in self.COUNTRIES_MAPPING.keys():
                task = asyncio.create_task(self._safe_get_country_directions(country_name))
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_directions = []
            for country_name, result in zip(self.COUNTRIES_MAPPING.keys(), results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}: {result}")
                    continue
                elif isinstance(result, list):
                    all_directions.extend(result)
                    logger.info(f"‚úÖ {country_name}: {len(result)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤—Å–µ–≥–æ")
            return all_directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            raise

    async def _safe_get_country_directions(self, country_name: str) -> List[Dict[str, Any]]:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        """
        try:
            return await self.get_directions_by_country(country_name)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}: {e}")
            return []

    async def filter_directions_by_country_id(self, country_id: int, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ country_id
        """
        try:
            logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ country_id: {country_id}")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
            country_name = None
            for name, info in self.COUNTRIES_MAPPING.items():
                if info["country_id"] == country_id:
                    country_name = name
                    break
            
            if not country_name:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∞ —Å country_id {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            directions = await self.get_directions_by_country(country_name)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if limit is not None:
                directions = directions[:limit]
                logger.info(f"‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç: {limit} –∏–∑ {len(directions)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            return directions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ country_id {country_id}: {e}")
            return []


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
directions_service = DirectionsService()